Args: /home/xgong/Develop/llvm/build/bin/llc -march=amdgcn -mcpu=verde Global1Char_ref.ll --print-after-all --debug 

Features:+promote-alloca,+fp64-denormals,
CPU:verde

Inliner visiting SCC: Global1: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
Inliner visiting SCC: llvm.r600.read.tgid.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1
Inliner visiting SCC: llvm.r600.read.local.size.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1
Inliner visiting SCC: llvm.r600.read.tidig.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1
Inliner visiting SCC: llvm.SI.if: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare { i1, i64 } @llvm.SI.if(i1)
Inliner visiting SCC: llvm.SI.else: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare { i1, i64 } @llvm.SI.else(i64)
Inliner visiting SCC: llvm.SI.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.break(i64)
Inliner visiting SCC: llvm.SI.if.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.if.break(i1, i64)
Inliner visiting SCC: llvm.SI.else.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.else.break(i64, i64)
Inliner visiting SCC: llvm.SI.loop: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i1 @llvm.SI.loop(i64)
Inliner visiting SCC: llvm.SI.end.cf: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare void @llvm.SI.end.cf(i64)
Inliner visiting SCC: INDIRECTNODE: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'Global1Char_ref.ll'
target datalayout = "e-p:32:32-p1:64:64-p2:64:64-p3:32:32-p4:64:64-p5:32:32-p24:64:64-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64"
target triple = "amdgcn-unknown-unknown-unknown"

; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1

declare { i1, i64 } @llvm.SI.if(i1)

declare { i1, i64 } @llvm.SI.else(i64)

declare i64 @llvm.SI.break(i64)

declare i64 @llvm.SI.if.break(i1, i64)

declare i64 @llvm.SI.else.break(i64, i64)

declare i1 @llvm.SI.loop(i64)

declare void @llvm.SI.end.cf(i64)

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="verde" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "target-cpu"="verde" }
attributes #2 = { nounwind readnone }

!opencl.kernels = !{!0}
!llvm.ident = !{!6, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}

!0 = !{void (i8 addrspace(1)*)* @Global1, !1, !2, !3, !4, !5}
!1 = !{!"kernel_arg_addr_space", i32 1}
!2 = !{!"kernel_arg_access_qual", !"none"}
!3 = !{!"kernel_arg_type", !"char*"}
!4 = !{!"kernel_arg_base_type", !"char*"}
!5 = !{!"kernel_arg_type_qual", !""}
!6 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 73e976449b53bf91364bec5926194b37f7f08488) (https://github.com/llvm-mirror/llvm.git e48de91069450173c2d5abaad9da9b25920ef692)"}
!7 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 61690d9018c8da94a7812ae53d501af17f0cf265) (https://github.com/llvm-mirror/llvm.git 591adee23bf68ecae9fccd35c937dd03d15a054e)"}
!8 = !{!9, !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
********** Begin Constant Hoisting **********
********** Function: Global1
********** End Constant Hoisting **********
*** IR Dump After Constant Hoisting ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
32768bytes free in local memory.
SROA function: Global1
*** IR Dump After SROA ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
CGP: Found      local addrmode: [Base:%result + 1*%0]
*** IR Dump After CodeGen Prepare ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'Global1Char_ref.ll'
target datalayout = "e-p:32:32-p1:64:64-p2:64:64-p3:32:32-p4:64:64-p5:32:32-p24:64:64-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64"
target triple = "amdgcn-unknown-unknown-unknown"

; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1

declare { i1, i64 } @llvm.SI.if(i1)

declare { i1, i64 } @llvm.SI.else(i64)

declare i64 @llvm.SI.break(i64)

declare i64 @llvm.SI.if.break(i1, i64)

declare i64 @llvm.SI.else.break(i64, i64)

declare i1 @llvm.SI.loop(i64)

declare void @llvm.SI.end.cf(i64)

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="verde" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "target-cpu"="verde" }
attributes #2 = { nounwind readnone }

!opencl.kernels = !{!0}
!llvm.ident = !{!6, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}

!0 = !{void (i8 addrspace(1)*)* @Global1, !1, !2, !3, !4, !5}
!1 = !{!"kernel_arg_addr_space", i32 1}
!2 = !{!"kernel_arg_access_qual", !"none"}
!3 = !{!"kernel_arg_type", !"char*"}
!4 = !{!"kernel_arg_base_type", !"char*"}
!5 = !{!"kernel_arg_type_qual", !""}
!6 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 73e976449b53bf91364bec5926194b37f7f08488) (https://github.com/llvm-mirror/llvm.git e48de91069450173c2d5abaad9da9b25920ef692)"}
!7 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 61690d9018c8da94a7812ae53d501af17f0cf265) (https://github.com/llvm-mirror/llvm.git 591adee23bf68ecae9fccd35c937dd03d15a054e)"}
!8 = !{!9, !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Lower invoke and unwind, for unwindless code generators ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Flatten the CFG ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Lower SwitchInst's to branches ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Structurize control flow ***
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void

Region tree of function Global1 after all region Pass:
Region tree:
[0] entry => <Function Return>
End region tree

Sinking iteration 0
*** IR Dump After Code sinking ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
[SafeStack] Function: Global1
[SafeStack]     safestack is not requested for this function
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i64 %0
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
---- Branch Probability Info : Global1 ----

Computing probabilities for entry



=== Global1
Initial selection DAG: BB#0 'Global1:entry'
SelectionDAG has 21 nodes:
  0x44bdd40: ch = EntryToken

  0x4523600: i64 = undef

    0x44bdd40: <multiple use>
        0x44bdd40: <multiple use>
        0x4523160: i64 = Register %vreg0

      0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1]

      0x45233b0: i64 = Constant<36>

    0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1]

    0x4523600: <multiple use>
  0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

      0x4523e18: i32 = TargetConstant<3265>

    0x4523f40: i32 = llvm.r600.read.tidig.x 0x4523e18 [ORD=5]

        0x4523aa0: i32 = TargetConstant<3256>

      0x4523bc8: i32 = llvm.r600.read.local.size.x 0x4523aa0 [ORD=3]

        0x4523850: i32 = TargetConstant<3262>

      0x4523978: i32 = llvm.r600.read.tgid.x 0x4523850 [ORD=2]

    0x4523cf0: i32 = mul 0x4523bc8, 0x4523978 [ORD=4]

  0x45247b0: i32 = add 0x4523f40, 0x4523cf0 [ORD=6]

  0x4524c50: i64 = Constant<0>

      0x4523728: <multiple use>
        0x45247b0: <multiple use>
      0x45248d8: i8 = truncate 0x45247b0 [ORD=7]

        0x4523728: <multiple use>
          0x45247b0: <multiple use>
        0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8]

      0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9]

      0x4523600: <multiple use>
    0x4524d78: ch = store 0x4523728:1, 0x45248d8, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>)> [ORD=10]

  0x4524ea0: ch = RET_FLAG 0x4524d78 [ORD=11]



Combining: 0x4524ea0: ch = RET_FLAG 0x4524d78 [ORD=11]

Combining: 0x4524d78: ch = store 0x4523728:1, 0x45248d8, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>)> [ORD=10]
 ... into: 0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10]

Combining: 0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11]

Combining: 0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10]

Combining: 0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9]

Combining: 0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8]

Combining: 0x45247b0: i32 = add 0x4523f40, 0x4523cf0 [ORD=6]

Combining: 0x4523f40: i32 = llvm.r600.read.tidig.x 0x4523e18 [ORD=5]

Combining: 0x4523e18: i32 = TargetConstant<3265>

Combining: 0x4523cf0: i32 = mul 0x4523bc8, 0x4523978 [ORD=4]

Combining: 0x4523bc8: i32 = llvm.r600.read.local.size.x 0x4523aa0 [ORD=3]

Combining: 0x4523aa0: i32 = TargetConstant<3256>

Combining: 0x4523978: i32 = llvm.r600.read.tgid.x 0x4523850 [ORD=2]

Combining: 0x4523850: i32 = TargetConstant<3262>

Combining: 0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

Combining: 0x4523600: i64 = undef

Combining: 0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1]

Combining: 0x45233b0: i64 = Constant<36>

Combining: 0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1]

Combining: 0x4523160: i64 = Register %vreg0

Combining: 0x44bdd40: ch = EntryToken
Optimized lowered selection DAG: BB#0 'Global1:entry'
SelectionDAG has 19 nodes:
  0x44bdd40: ch = EntryToken

  0x4523600: i64 = undef

    0x44bdd40: <multiple use>
        0x44bdd40: <multiple use>
        0x4523160: i64 = Register %vreg0

      0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1]

      0x45233b0: i64 = Constant<36>

    0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1]

    0x4523600: <multiple use>
  0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

      0x4523e18: i32 = TargetConstant<3265>

    0x4523f40: i32 = llvm.r600.read.tidig.x 0x4523e18 [ORD=5]

        0x4523aa0: i32 = TargetConstant<3256>

      0x4523bc8: i32 = llvm.r600.read.local.size.x 0x4523aa0 [ORD=3]

        0x4523850: i32 = TargetConstant<3262>

      0x4523978: i32 = llvm.r600.read.tgid.x 0x4523850 [ORD=2]

    0x4523cf0: i32 = mul 0x4523bc8, 0x4523978 [ORD=4]

  0x45247b0: i32 = add 0x4523f40, 0x4523cf0 [ORD=6]

      0x4523728: <multiple use>
      0x45247b0: <multiple use>
        0x4523728: <multiple use>
          0x45247b0: <multiple use>
        0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8]

      0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9]

      0x4523600: <multiple use>
    0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10]

  0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11]


Legally typed node: 0x4523e18: i32 = TargetConstant<3265> [ID=0]

Legally typed node: 0x4523f40: i32 = llvm.r600.read.tidig.x 0x4523e18 [ORD=5] [ID=0]

Legally typed node: 0x4523aa0: i32 = TargetConstant<3256> [ID=0]

Legally typed node: 0x4523bc8: i32 = llvm.r600.read.local.size.x 0x4523aa0 [ORD=3] [ID=0]

Legally typed node: 0x4523850: i32 = TargetConstant<3262> [ID=0]

Legally typed node: 0x4523978: i32 = llvm.r600.read.tgid.x 0x4523850 [ORD=2] [ID=0]

Legally typed node: 0x4523cf0: i32 = mul 0x4523bc8, 0x4523978 [ORD=4] [ID=0]

Legally typed node: 0x45247b0: i32 = add 0x4523f40, 0x4523cf0 [ORD=6] [ID=0]

Legally typed node: 0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8] [ID=0]

Legally typed node: 0x4523600: i64 = undef [ID=0]

Legally typed node: 0x45233b0: i64 = Constant<36> [ID=0]

Legally typed node: 0x4523160: i64 = Register %vreg0 [ID=0]

Legally typed node: 0x44bdd40: ch = EntryToken [ID=0]

Legally typed node: 0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=0]

Legally typed node: 0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1] [ID=0]

Legally typed node: 0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=0]

Legally typed node: 0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9] [ID=0]

Legally typed node: 0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10] [ID=0]

Legally typed node: 0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11] [ID=0]

Legally typed node: 0x7ffcee12f1a0: ch = handlenode 0x4524ea0 [ID=0]

Type-legalized selection DAG: BB#0 'Global1:entry'
SelectionDAG has 19 nodes:
  0x44bdd40: ch = EntryToken [ID=-3]

  0x4523600: i64 = undef [ID=-3]

    0x44bdd40: <multiple use>
        0x44bdd40: <multiple use>
        0x4523160: i64 = Register %vreg0 [ID=-3]

      0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=-3]

      0x45233b0: i64 = Constant<36> [ID=-3]

    0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1] [ID=-3]

    0x4523600: <multiple use>
  0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=-3]

      0x4523e18: i32 = TargetConstant<3265> [ID=-3]

    0x4523f40: i32 = llvm.r600.read.tidig.x 0x4523e18 [ORD=5] [ID=-3]

        0x4523aa0: i32 = TargetConstant<3256> [ID=-3]

      0x4523bc8: i32 = llvm.r600.read.local.size.x 0x4523aa0 [ORD=3] [ID=-3]

        0x4523850: i32 = TargetConstant<3262> [ID=-3]

      0x4523978: i32 = llvm.r600.read.tgid.x 0x4523850 [ORD=2] [ID=-3]

    0x4523cf0: i32 = mul 0x4523bc8, 0x4523978 [ORD=4] [ID=-3]

  0x45247b0: i32 = add 0x4523f40, 0x4523cf0 [ORD=6] [ID=-3]

      0x4523728: <multiple use>
      0x45247b0: <multiple use>
        0x4523728: <multiple use>
          0x45247b0: <multiple use>
        0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8] [ID=-3]

      0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9] [ID=-3]

      0x4523600: <multiple use>
    0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10] [ID=-3]

  0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11] [ID=-3]



Legalizing: 0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11] [ID=18]

Legalizing: 0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10] [ID=17]

Legalizing: 0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9] [ID=16]

Legalizing: 0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8] [ID=15]

Legalizing: 0x45247b0: i32 = add 0x4523f40, 0x4523cf0 [ORD=6] [ID=14]

Legalizing: 0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=13]

Legalizing: 0x4523cf0: i32 = mul 0x4523bc8, 0x4523978 [ORD=4] [ID=12]

Legalizing: 0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1] [ID=11]

Legalizing: 0x4523f40: i32 = llvm.r600.read.tidig.x 0x4523e18 [ORD=5] [ID=10]
 ... replacing: 0x4523f40: i32 = llvm.r600.read.tidig.x 0x4523e18 [ORD=5] [ID=10]
     with:      0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50

Legalizing: 0x4523bc8: i32 = llvm.r600.read.local.size.x 0x4523aa0 [ORD=3] [ID=9]
 ... replacing: 0x4523bc8: i32 = llvm.r600.read.local.size.x 0x4523aa0 [ORD=3] [ID=9]
     with:      0x45250f0: i32,ch = load 0x44bdd40, 0x4524d78, 0x4523600<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

Legalizing: 0x4523978: i32 = llvm.r600.read.tgid.x 0x4523850 [ORD=2] [ID=8]
 ... replacing: 0x4523978: i32 = llvm.r600.read.tgid.x 0x4523850 [ORD=2] [ID=8]
     with:      0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8

Legalizing: 0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=7]

Legalizing: 0x4523600: i64 = undef [ID=3]

Legalizing: 0x45233b0: i64 = Constant<36> [ID=2]

Legalizing: 0x4523160: i64 = Register %vreg0 [ID=1]

Legalizing: 0x44bdd40: ch = EntryToken [ID=0]

Legalizing: 0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8

Legalizing: 0x4523bc8: i32 = Register %vreg3

Legalizing: 0x45250f0: i32,ch = load 0x44bdd40, 0x4524d78, 0x4523600<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

Legalizing: 0x4524d78: i64 = add 0x4523288, 0x4523f40 [ORD=3]

Legalizing: 0x4523f40: i64 = Constant<24>

Legalizing: 0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50

Legalizing: 0x4524c50: i32 = Register %vreg2
Legalized selection DAG: BB#0 'Global1:entry'
SelectionDAG has 20 nodes:
  0x44bdd40: ch = EntryToken [ID=0]

  0x4523600: i64 = undef [ID=3]

    0x44bdd40: <multiple use>
    0x4523160: i64 = Register %vreg0 [ID=1]

  0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=7]

    0x44bdd40: <multiple use>
      0x4523288: <multiple use>
      0x45233b0: i64 = Constant<36> [ID=2]

    0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1] [ID=11]

    0x4523600: <multiple use>
  0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=13]

      0x44bdd40: <multiple use>
      0x4524c50: i32 = Register %vreg2

    0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50

        0x44bdd40: <multiple use>
          0x4523288: <multiple use>
          0x4523f40: i64 = Constant<24>

        0x4524d78: i64 = add 0x4523288, 0x4523f40 [ORD=3]

        0x4523600: <multiple use>
      0x45250f0: i32,ch = load 0x44bdd40, 0x4524d78, 0x4523600<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

        0x44bdd40: <multiple use>
        0x4523bc8: i32 = Register %vreg3

      0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8

    0x4523cf0: i32 = mul 0x45250f0, 0x4525218 [ORD=4] [ID=12]

  0x45247b0: i32 = add 0x45248d8, 0x4523cf0 [ORD=6] [ID=14]

      0x4523728: <multiple use>
      0x45247b0: <multiple use>
        0x4523728: <multiple use>
          0x45247b0: <multiple use>
        0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8] [ID=15]

      0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9] [ID=16]

      0x4523600: <multiple use>
    0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10] [ID=17]

  0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11] [ID=18]



Legalizing: 0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8

Combining: 0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8

Legalizing: 0x4523bc8: i32 = Register %vreg3

Combining: 0x4523bc8: i32 = Register %vreg3

Legalizing: 0x45250f0: i32,ch = load 0x44bdd40, 0x4524d78, 0x4523600<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

Combining: 0x45250f0: i32,ch = load 0x44bdd40, 0x4524d78, 0x4523600<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

Legalizing: 0x4524d78: i64 = add 0x4523288, 0x4523f40 [ORD=3]

Combining: 0x4524d78: i64 = add 0x4523288, 0x4523f40 [ORD=3]

Legalizing: 0x4523f40: i64 = Constant<24>

Combining: 0x4523f40: i64 = Constant<24>

Legalizing: 0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50

Combining: 0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50

Legalizing: 0x4524c50: i32 = Register %vreg2

Combining: 0x4524c50: i32 = Register %vreg2

Legalizing: 0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11] [ID=18]

Combining: 0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11] [ID=18]

Legalizing: 0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10] [ID=17]

Combining: 0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10] [ID=17]

Legalizing: 0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9] [ID=16]

Combining: 0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9] [ID=16]

Legalizing: 0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8] [ID=15]

Combining: 0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8] [ID=15]

Legalizing: 0x45247b0: i32 = add 0x45248d8, 0x4523cf0 [ORD=6] [ID=14]

Combining: 0x45247b0: i32 = add 0x45248d8, 0x4523cf0 [ORD=6] [ID=14]

Legalizing: 0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=13]

Combining: 0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=13]

Legalizing: 0x4523cf0: i32 = mul 0x45250f0, 0x4525218 [ORD=4] [ID=12]

Combining: 0x4523cf0: i32 = mul 0x45250f0, 0x4525218 [ORD=4] [ID=12]

Legalizing: 0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1] [ID=11]

Combining: 0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1] [ID=11]

Legalizing: 0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=7]

Combining: 0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=7]

Legalizing: 0x4523600: i64 = undef [ID=3]

Combining: 0x4523600: i64 = undef [ID=3]

Legalizing: 0x45233b0: i64 = Constant<36> [ID=2]

Combining: 0x45233b0: i64 = Constant<36> [ID=2]

Legalizing: 0x4523160: i64 = Register %vreg0 [ID=1]

Combining: 0x4523160: i64 = Register %vreg0 [ID=1]

Legalizing: 0x44bdd40: ch = EntryToken [ID=0]

Combining: 0x44bdd40: ch = EntryToken [ID=0]
Optimized legalized selection DAG: BB#0 'Global1:entry'
SelectionDAG has 20 nodes:
  0x44bdd40: ch = EntryToken [ID=0]

  0x4523600: i64 = undef [ID=3]

    0x44bdd40: <multiple use>
    0x4523160: i64 = Register %vreg0 [ID=1]

  0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=7]

    0x44bdd40: <multiple use>
      0x4523288: <multiple use>
      0x45233b0: i64 = Constant<36> [ID=2]

    0x45234d8: i64 = add 0x4523288, 0x45233b0 [ORD=1] [ID=11]

    0x4523600: <multiple use>
  0x4523728: i64,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=13]

      0x44bdd40: <multiple use>
      0x4524c50: i32 = Register %vreg2

    0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50

        0x44bdd40: <multiple use>
          0x4523288: <multiple use>
          0x4523f40: i64 = Constant<24>

        0x4524d78: i64 = add 0x4523288, 0x4523f40 [ORD=3]

        0x4523600: <multiple use>
      0x45250f0: i32,ch = load 0x44bdd40, 0x4524d78, 0x4523600<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

        0x44bdd40: <multiple use>
        0x4523bc8: i32 = Register %vreg3

      0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8

    0x4523cf0: i32 = mul 0x45250f0, 0x4525218 [ORD=4] [ID=12]

  0x45247b0: i32 = add 0x45248d8, 0x4523cf0 [ORD=6] [ID=14]

      0x4523728: <multiple use>
      0x45247b0: <multiple use>
        0x4523728: <multiple use>
          0x45247b0: <multiple use>
        0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8] [ID=15]

      0x4524b28: i64 = add 0x4523728, 0x4524a00 [ORD=9] [ID=16]

      0x4523600: <multiple use>
    0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10] [ID=17]

  0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11] [ID=18]


===== Instruction selection begins: BB#0 'entry'
ISEL: Starting pattern match on root node: 0x4524ea0: ch = RET_FLAG 0x4524fc8 [ORD=11] [ID=19]

  Morphed node: 0x4524ea0: ch = S_ENDPGM 0x4524fc8 [ORD=11]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4524fc8: ch = store 0x4523728:1, 0x45247b0, 0x4524b28, 0x4523600<ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>), trunc to i8> [ORD=10] [ID=18]

  Initial Opcode index to 5
  Match failed at index 11
  Continuing at 42
  Skipped scope entry (due to false predicate) at index 55, continuing at 82
  Morphed node: 0x4524fc8: ch = BUFFER_STORE_BYTE_ADDR64 0x45247b0, 0x4524a00, 0x4527578, 0x4523aa0, 0x4523978, 0x4523850, 0x4523850, 0x4523850, 0x4523728:1<Mem:ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>)> [ORD=10]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4524a00: i64 = sign_extend 0x45247b0 [ORD=8] [ID=16]

  Initial Opcode index to 49430
  TypeSwitch[i64] from 49431 to 49463
  Created node: 0x45277c8: i32 = S_ASHR_I32 0x45247b0, 0x45276a0 [ORD=8]

  Morphed node: 0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x45247b0: i32 = add 0x45248d8, 0x4523cf0 [ORD=6] [ID=15]

  Initial Opcode index to 14699
  Match failed at index 14704
  Continuing at 15017
  Match failed at index 15025
  Continuing at 15291
  Skipped scope entry (due to false predicate) at index 15297, continuing at 15398
  Morphed node: 0x45247b0: i32 = S_ADD_I32 0x45248d8, 0x4523cf0 [ORD=6]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4523cf0: i32 = mul 0x45250f0, 0x4525218 [ORD=4] [ID=14]

  Initial Opcode index to 42881
  Morphed node: 0x4523cf0: i32 = S_MUL_I32 0x45250f0, 0x4525218 [ORD=4]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x45278f0: v2i32,ch = load 0x44bdd40, 0x45234d8, 0x4523600<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

  Initial Opcode index to 1406
  Match failed at index 1414
  Continuing at 2340
  Match failed at index 2344
  Continuing at 2483
  Skipped scope entry (due to false predicate) at index 2495, continuing at 2526
  Skipped scope entry (due to false predicate) at index 2527, continuing at 2558
  Skipped scope entry (due to false predicate) at index 2559, continuing at 2590
  Skipped scope entry (due to false predicate) at index 2591, continuing at 2622
  Match failed at index 2625
  Continuing at 2679
  Match failed at index 2680
  Continuing at 2742
  Match failed at index 2743
  Continuing at 2774
  Match failed at index 2775
  Continuing at 2806
  Match failed at index 2807
  Continuing at 2838
  Match failed at index 2841
  Continuing at 2868
  Continuing at 2869
  Match failed at index 2871
  Continuing at 3112
  Continuing at 3113
  Match failed at index 3116
  Continuing at 3146
  Skipped scope entry (due to false predicate) at index 3155, continuing at 3209
  TypeSwitch[v2i32] from 3212 to 3215
  Match failed at index 3215
  Continuing at 3264
  Match failed at index 3265
  Continuing at 3355
  Match failed at index 3356
  Continuing at 3422
  Continuing at 3423
  Match failed at index 3426
  Continuing at 3452
  Skipped scope entry (due to false predicate) at index 3458, continuing at 3622
  TypeSwitch[v2i32] from 3633 to 3636
  Morphed node: 0x45278f0: v2i32,ch = S_LOAD_DWORDX2_IMM 0x4523288, 0x4527b40, 0x44bdd40<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4527a18: i64 = bitcast 0x45278f0 [ORD=1]

  Initial Opcode index to 43294
  Skipped scope entry (due to false predicate) at index 43297, continuing at 43322
  Skipped scope entry (due to false predicate) at index 43323, continuing at 43341
  TypeSwitch[i64] from 43344 to 43347
ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x45250f0: i32,ch = load 0x44bdd40, 0x4524d78, 0x4523600<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=12]

  Initial Opcode index to 1406
  Skipped scope entry (due to false predicate) at index 1422, continuing at 1447
  Match failed at index 1450
  Continuing at 1473
  Continuing at 1474
  Match failed at index 1475
  Continuing at 1501
  Match failed at index 1502
  Continuing at 1528
  Match failed at index 1529
  Continuing at 1555
  Match failed at index 1556
  Continuing at 1582
  Match failed at index 1585
  Continuing at 1607
  Match failed at index 1608
  Continuing at 1634
  Match failed at index 1635
  Continuing at 1661
  Match failed at index 1662
  Continuing at 1688
  Match failed at index 1689
  Continuing at 1742
  Match failed at index 1743
  Continuing at 1768
  Match failed at index 1769
  Continuing at 1794
  Match failed at index 1795
  Continuing at 1820
  Match failed at index 1823
  Continuing at 1844
  Match failed at index 1845
  Continuing at 1880
  Match failed at index 1881
  Continuing at 1916
  Match failed at index 1917
  Continuing at 1952
  Match failed at index 1953
  Continuing at 1988
  Match failed at index 1991
  Continuing at 2022
  Match failed at index 2024
  Continuing at 2288
  Morphed node: 0x45250f0: i32,ch = S_LOAD_DWORD_IMM 0x4523288, 0x45233b0, 0x44bdd40<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

ISEL: Match complete!
===== Instruction selection ends:
Selected selection DAG: BB#0 'Global1:entry'
SelectionDAG has 33 nodes:
  0x44bdd40: ch = EntryToken

    0x44bdd40: <multiple use>
    0x4523160: i64 = Register %vreg0

  0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1]

      0x44bdd40: <multiple use>
      0x4524c50: i32 = Register %vreg2

    0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50

        0x4523288: <multiple use>
        0x45233b0: i32 = TargetConstant<6>

        0x44bdd40: <multiple use>
      0x45250f0: i32,ch = S_LOAD_DWORD_IMM 0x4523288, 0x45233b0, 0x44bdd40<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

        0x44bdd40: <multiple use>
        0x4523bc8: i32 = Register %vreg3

      0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8

    0x4523cf0: i32 = S_MUL_I32 0x45250f0, 0x4525218 [ORD=4]

  0x45247b0: i32 = S_ADD_I32 0x45248d8, 0x4523cf0 [ORD=6]

  0x4523850: i1 = TargetConstant<0>

  0x4523aa0: i32 = TargetConstant<0>

  0x4525590: i32 = TargetConstant<1>

  0x4526fb0: i32 = TargetConstant<2>

    0x4523288: <multiple use>
    0x4527b40: i32 = TargetConstant<9>

    0x44bdd40: <multiple use>
  0x45278f0: v2i32,ch = S_LOAD_DWORDX2_IMM 0x4523288, 0x4527b40, 0x44bdd40<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

      0x45247b0: <multiple use>
        0x4524b28: i32 = TargetConstant<33>

        0x45247b0: <multiple use>
        0x4525590: <multiple use>
          0x45247b0: <multiple use>
          0x45276a0: i32 = TargetConstant<31>

        0x45277c8: i32 = S_ASHR_I32 0x45247b0, 0x45276a0 [ORD=8]

        0x4526fb0: <multiple use>
      0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8]

        0x4527200: i32 = TargetConstant<43>

        0x45278f0: <multiple use>
        0x4527328: i32 = TargetConstant<17>

          0x4525340: i32 = TargetConstant<34>

            0x4523aa0: <multiple use>
          0x4525468: i32 = S_MOV_B32 0x4523aa0 [ORD=9]

          0x4525590: <multiple use>
            0x4526d60: i32 = TargetConstant<61440>

          0x4526e88: i32 = S_MOV_B32 0x4526d60 [ORD=9]

          0x4526fb0: <multiple use>
        0x45270d8: v2i32 = REG_SEQUENCE 0x4525340, 0x4525468, 0x4525590, 0x4526e88, 0x4526fb0 [ORD=9]

        0x4527450: i32 = TargetConstant<18>

      0x4527578: v4i32 = REG_SEQUENCE 0x4527200, 0x45278f0, 0x4527328, 0x45270d8, 0x4527450 [ORD=9]

      0x4523aa0: <multiple use>
      0x4523978: i16 = TargetConstant<0>

      0x4523850: <multiple use>
      0x4523850: <multiple use>
      0x4523850: <multiple use>
      0x45278f0: <multiple use>
    0x4524fc8: ch = BUFFER_STORE_BYTE_ADDR64 0x45247b0, 0x4524a00, 0x4527578, 0x4523aa0, 0x4523978, 0x4523850, 0x4523850, 0x4523850, 0x45278f0:1<Mem:ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>)> [ORD=10]

  0x4524ea0: ch = S_ENDPGM 0x4524fc8 [ORD=11]


********** List Scheduling BB#0 'entry' **********
SU(0): 0x4524ea0: ch = S_ENDPGM 0x4524fc8 [ORD=11] [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x4524fc8: ch = BUFFER_STORE_BYTE_ADDR64 0x45247b0, 0x4524a00, 0x4527578, 0x4523aa0, 0x4523978, 0x4523850, 0x4523850, 0x4523850, 0x45278f0:1<Mem:ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>)> [ORD=10] [ID=1]

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
   val SU(10): Latency=1
   val SU(8): Latency=1
   val SU(4): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x45278f0: v2i32,ch = S_LOAD_DWORDX2_IMM 0x4523288, 0x4527b40, 0x44bdd40, 0x45250f0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=2]

    0x45250f0: i32,ch,glue = S_LOAD_DWORD_IMM 0x4523288, 0x45233b0, 0x44bdd40<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=2]

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 2
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
   val SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1
   val SU(4): Latency=1
   val SU(11): Latency=1

SU(3): 0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=3]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(2): Latency=1

SU(4): 0x4527578: v4i32 = REG_SEQUENCE 0x4527200, 0x45278f0, 0x4527328, 0x45270d8, 0x4527450 [ORD=9] [ID=4]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(2): Latency=1
   val SU(5): Latency=1
  Successors:
   val SU(1): Latency=1

SU(5): 0x45270d8: v2i32 = REG_SEQUENCE 0x4525340, 0x4525468, 0x4525590, 0x4526e88, 0x4526fb0 [ORD=9] [ID=5]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
  Successors:
   val SU(4): Latency=1

SU(6): 0x4526e88: i32 = S_MOV_B32 0x4526d60 [ORD=9] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=1

SU(7): 0x4525468: i32 = S_MOV_B32 0x4523aa0 [ORD=9] [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(5): Latency=1

SU(8): 0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8] [ID=8]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
   val SU(10): Latency=1
   val SU(9): Latency=1
  Successors:
   val SU(1): Latency=1

SU(9): 0x45277c8: i32 = S_ASHR_I32 0x45247b0, 0x45276a0 [ORD=8] [ID=9]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
   val SU(10): Latency=1
  Successors:
   val SU(8): Latency=1

SU(10): 0x45247b0: i32 = S_ADD_I32 0x45248d8, 0x4523cf0 [ORD=6] [ID=10]

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 4
  Predecessors:
   val SU(13): Latency=1
   val SU(11): Latency=1
  Successors:
   val SU(1): Latency=1
   val SU(8): Latency=1
   val SU(9): Latency=1

SU(11): 0x4523cf0: i32 = S_MUL_I32 0x45250f0, 0x4525218 [ORD=4] [ID=11]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
   val SU(2): Latency=1
   val SU(12): Latency=1
  Successors:
   val SU(10): Latency=1

SU(12): 0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8 [ID=12]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(11): Latency=1

SU(13): 0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50 [ID=13]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(10): Latency=1


Examining Available:
Height 0: SU(0): 0x4524ea0: ch = S_ENDPGM 0x4524fc8 [ORD=11] [ID=0]


*** Scheduling [0]: SU(0): 0x4524ea0: ch = S_ENDPGM 0x4524fc8 [ORD=11] [ID=0]


Examining Available:
Height 1: SU(1): 0x4524fc8: ch = BUFFER_STORE_BYTE_ADDR64 0x45247b0, 0x4524a00, 0x4527578, 0x4523aa0, 0x4523978, 0x4523850, 0x4523850, 0x4523850, 0x45278f0:1<Mem:ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>)> [ORD=10] [ID=1]


*** Scheduling [1]: SU(1): 0x4524fc8: ch = BUFFER_STORE_BYTE_ADDR64 0x45247b0, 0x4524a00, 0x4527578, 0x4523aa0, 0x4523978, 0x4523850, 0x4523850, 0x4523850, 0x45278f0:1<Mem:ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>)> [ORD=10] [ID=1]


Examining Available:
Height 2: SU(4): 0x4527578: v4i32 = REG_SEQUENCE 0x4527200, 0x45278f0, 0x4527328, 0x45270d8, 0x4527450 [ORD=9] [ID=4]

Height 2: SU(8): 0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8] [ID=8]


*** Scheduling [2]: SU(4): 0x4527578: v4i32 = REG_SEQUENCE 0x4527200, 0x45278f0, 0x4527328, 0x45270d8, 0x4527450 [ORD=9] [ID=4]


Examining Available:
Height 3: SU(5): 0x45270d8: v2i32 = REG_SEQUENCE 0x4525340, 0x4525468, 0x4525590, 0x4526e88, 0x4526fb0 [ORD=9] [ID=5]

Height 2: SU(8): 0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8] [ID=8]


*** Scheduling [3]: SU(5): 0x45270d8: v2i32 = REG_SEQUENCE 0x4525340, 0x4525468, 0x4525590, 0x4526e88, 0x4526fb0 [ORD=9] [ID=5]


Examining Available:
Height 4: SU(7): 0x4525468: i32 = S_MOV_B32 0x4523aa0 [ORD=9] [ID=7]

Height 4: SU(6): 0x4526e88: i32 = S_MOV_B32 0x4526d60 [ORD=9] [ID=6]

Height 2: SU(8): 0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8] [ID=8]


*** Scheduling [4]: SU(7): 0x4525468: i32 = S_MOV_B32 0x4523aa0 [ORD=9] [ID=7]


Examining Available:
Height 4: SU(6): 0x4526e88: i32 = S_MOV_B32 0x4526d60 [ORD=9] [ID=6]

Height 2: SU(8): 0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8] [ID=8]


*** Scheduling [5]: SU(6): 0x4526e88: i32 = S_MOV_B32 0x4526d60 [ORD=9] [ID=6]


Examining Available:
Height 2: SU(8): 0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8] [ID=8]


*** Scheduling [6]: SU(8): 0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8] [ID=8]


Examining Available:
Height 7: SU(9): 0x45277c8: i32 = S_ASHR_I32 0x45247b0, 0x45276a0 [ORD=8] [ID=9]


*** Scheduling [7]: SU(9): 0x45277c8: i32 = S_ASHR_I32 0x45247b0, 0x45276a0 [ORD=8] [ID=9]


Examining Available:
Height 8: SU(10): 0x45247b0: i32 = S_ADD_I32 0x45248d8, 0x4523cf0 [ORD=6] [ID=10]


*** Scheduling [8]: SU(10): 0x45247b0: i32 = S_ADD_I32 0x45248d8, 0x4523cf0 [ORD=6] [ID=10]


Examining Available:
Height 9: SU(13): 0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50 [ID=13]

Height 9: SU(11): 0x4523cf0: i32 = S_MUL_I32 0x45250f0, 0x4525218 [ORD=4] [ID=11]


*** Scheduling [9]: SU(13): 0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50 [ID=13]


Examining Available:
Height 9: SU(11): 0x4523cf0: i32 = S_MUL_I32 0x45250f0, 0x4525218 [ORD=4] [ID=11]


*** Scheduling [10]: SU(11): 0x4523cf0: i32 = S_MUL_I32 0x45250f0, 0x4525218 [ORD=4] [ID=11]


Examining Available:
Height 11: SU(12): 0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8 [ID=12]

Height 11: SU(2): 0x45278f0: v2i32,ch = S_LOAD_DWORDX2_IMM 0x4523288, 0x4527b40, 0x44bdd40, 0x45250f0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=2]

    0x45250f0: i32,ch,glue = S_LOAD_DWORD_IMM 0x4523288, 0x45233b0, 0x44bdd40<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=2]


*** Scheduling [11]: SU(12): 0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8 [ID=12]


Examining Available:
Height 11: SU(2): 0x45278f0: v2i32,ch = S_LOAD_DWORDX2_IMM 0x4523288, 0x4527b40, 0x44bdd40, 0x45250f0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=2]

    0x45250f0: i32,ch,glue = S_LOAD_DWORD_IMM 0x4523288, 0x45233b0, 0x44bdd40<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=2]


*** Scheduling [12]: SU(2): 0x45278f0: v2i32,ch = S_LOAD_DWORDX2_IMM 0x4523288, 0x4527b40, 0x44bdd40, 0x45250f0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=2]

    0x45250f0: i32,ch,glue = S_LOAD_DWORD_IMM 0x4523288, 0x45233b0, 0x44bdd40<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=2]


Examining Available:
Height 13: SU(3): 0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=3]


*** Scheduling [13]: SU(3): 0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=3]

*** Final schedule ***
SU(3): 0x4523288: i64,ch = CopyFromReg 0x44bdd40, 0x4523160 [ORD=1] [ID=3]

SU(2): 0x45278f0: v2i32,ch = S_LOAD_DWORDX2_IMM 0x4523288, 0x4527b40, 0x44bdd40, 0x45250f0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=2]

    0x45250f0: i32,ch,glue = S_LOAD_DWORD_IMM 0x4523288, 0x45233b0, 0x44bdd40<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=2]

SU(12): 0x4525218: i32,ch = CopyFromReg 0x44bdd40, 0x4523bc8 [ID=12]

SU(11): 0x4523cf0: i32 = S_MUL_I32 0x45250f0, 0x4525218 [ORD=4] [ID=11]

SU(13): 0x45248d8: i32,ch = CopyFromReg 0x44bdd40, 0x4524c50 [ID=13]

SU(10): 0x45247b0: i32 = S_ADD_I32 0x45248d8, 0x4523cf0 [ORD=6] [ID=10]

SU(9): 0x45277c8: i32 = S_ASHR_I32 0x45247b0, 0x45276a0 [ORD=8] [ID=9]

SU(8): 0x4524a00: i64 = REG_SEQUENCE 0x4524b28, 0x45247b0, 0x4525590, 0x45277c8, 0x4526fb0 [ORD=8] [ID=8]

SU(6): 0x4526e88: i32 = S_MOV_B32 0x4526d60 [ORD=9] [ID=6]

SU(7): 0x4525468: i32 = S_MOV_B32 0x4523aa0 [ORD=9] [ID=7]

SU(5): 0x45270d8: v2i32 = REG_SEQUENCE 0x4525340, 0x4525468, 0x4525590, 0x4526e88, 0x4526fb0 [ORD=9] [ID=5]

SU(4): 0x4527578: v4i32 = REG_SEQUENCE 0x4527200, 0x45278f0, 0x4527328, 0x45270d8, 0x4527450 [ORD=9] [ID=4]

SU(1): 0x4524fc8: ch = BUFFER_STORE_BYTE_ADDR64 0x45247b0, 0x4524a00, 0x4527578, 0x4523aa0, 0x4523978, 0x4523850, 0x4523850, 0x4523850, 0x45278f0:1<Mem:ST1[%arrayidx(addrspace=1)](tbaa=<0x448b698>)> [ORD=10] [ID=1]

SU(0): 0x4524ea0: ch = S_ENDPGM 0x4524fc8 [ORD=11] [ID=0]


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg8<def> = COPY %vreg2; SReg_32:%vreg8 VGPR_32:%vreg2
	%vreg7<def> = S_ADD_I32 %vreg8, %vreg6<kill>, %SCC<imp-def,dead>; SReg_32:%vreg7,%vreg8,%vreg6
	%vreg9<def> = S_ASHR_I32 %vreg7, 31, %SCC<imp-def,dead>; SReg_32:%vreg9,%vreg7
	%vreg10<def> = REG_SEQUENCE %vreg7, sub0, %vreg9<kill>, sub1; SReg_64:%vreg10 SReg_32:%vreg7,%vreg9
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	%vreg15<def> = COPY %vreg7; VGPR_32:%vreg15 SReg_32:%vreg7
	%vreg16<def> = COPY %vreg10; VReg_64:%vreg16 SReg_64:%vreg10
	BUFFER_STORE_BYTE_ADDR64 %vreg15, %vreg16<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg15 VReg_64:%vreg16 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After SI Lower i1 Copies ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg8<def> = COPY %vreg2; SReg_32:%vreg8 VGPR_32:%vreg2
	%vreg7<def> = S_ADD_I32 %vreg8, %vreg6<kill>, %SCC<imp-def,dead>; SReg_32:%vreg7,%vreg8,%vreg6
	%vreg9<def> = S_ASHR_I32 %vreg7, 31, %SCC<imp-def,dead>; SReg_32:%vreg9,%vreg7
	%vreg10<def> = REG_SEQUENCE %vreg7, sub0, %vreg9<kill>, sub1; SReg_64:%vreg10 SReg_32:%vreg7,%vreg9
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	%vreg15<def> = COPY %vreg7; VGPR_32:%vreg15 SReg_32:%vreg7
	%vreg16<def> = COPY %vreg10; VReg_64:%vreg16 SReg_64:%vreg10
	BUFFER_STORE_BYTE_ADDR64 %vreg15, %vreg16<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg15 VReg_64:%vreg16 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

Fixing VGPR -> SGPR copy: %vreg8<def> = COPY %vreg2; SReg_32:%vreg8 VGPR_32:%vreg2
Folded source from %vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
 into OpNo 2 of %vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6

Folded source from %vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
 into OpNo 0 of BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg16<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg16 SReg_128:%vreg14

Folded source from %vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
 into OpNo 1 of BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14

# *** IR Dump After SI Fold Operands ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
	%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
	%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	%vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
	%vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
	%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
	%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	%vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
	%vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Tail Duplication ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
	%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
	%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	%vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
	%vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
	%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
	%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	%vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
	%vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
128B		%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
144B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
160B		%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
176B		%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
192B		%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
208B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
224B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
240B		%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
256B		%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
272B		%vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
288B		%vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
304B		BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
320B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Slot index numbering ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
128B		%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
144B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
160B		%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
176B		%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
192B		%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
208B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
224B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
240B		%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
256B		%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
272B		%vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
288B		%vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
304B		BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
320B		S_ENDPGM

# End machine code for function Global1.

********** Stack Coloring **********
********** Function: Global1
# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
	%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
	%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	%vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
	%vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
	%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
	%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	%vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
	%vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

DeadMachineInstructionElim: DELETING: %vreg16<def> = COPY %vreg19; VReg_64:%vreg16,%vreg19
DeadMachineInstructionElim: DELETING: %vreg15<def> = COPY %vreg18; VGPR_32:%vreg15,%vreg18
DeadMachineInstructionElim: DELETING: %vreg17<def> = COPY %vreg2; VGPR_32:%vreg17,%vreg2
# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
	%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
	%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

******** Pre-regalloc Machine LICM: Global1 ********
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
	%vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
	%vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

Entering: entry
Coalescing: %vreg20<def> = COPY %vreg18; VGPR_32:%vreg20,%vreg18
***     to: %vreg19<def> = REG_SEQUENCE %vreg20, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg20,%vreg21
Coalescing: %vreg21<def> = COPY %vreg22<kill>; VGPR_32:%vreg21,%vreg22
***     to: %vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg21<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg21
Exiting: entry
# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.


block-frequency: Global1
========================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: Global1
 - BB0[entry]: float = 1.0, int = 8

******** Machine Sinking ********
# *** IR Dump After Machine code sinking ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

********** PEEPHOLE OPTIMIZER **********
********** Function: Global1
# *** IR Dump After Peephole Optimizations ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18<kill>, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
128B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
144B		%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
160B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
176B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
192B		%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
208B		%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
224B		BUFFER_STORE_BYTE_ADDR64 %vreg18<kill>, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
240B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Slot index numbering ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
128B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
144B		%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
160B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
176B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
192B		%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
208B		%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
224B		BUFFER_STORE_BYTE_ADDR64 %vreg18<kill>, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
240B		S_ENDPGM

# End machine code for function Global1.

Computing live-in reg-units in ABI blocks.
0B	BB#0 SGPR0#0 SGPR1#0 VGPR0#0 SGPR4#0
Created 4 new intervals.
********** INTERVALS **********
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg0 [48r,80r:0)  0@48r
%vreg2 [32r,112r:0)  0@32r
%vreg3 [16r,96r:0)  0@16r
%vreg4 [64r,96r:0)  0@64r
%vreg5 [80r,208r:0)  0@80r
%vreg6 [96r,112r:0)  0@96r
%vreg11 [160r,192r:0)  0@160r
%vreg12 [176r,192r:0)  0@176r
%vreg13 [192r,208r:0)  0@192r
%vreg14 [208r,224r:0)  0@208r
%vreg18 [112r,224r:0)  0@112r
%vreg19 [144r,224r:0)  0@144r
%vreg22 [128r,144r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg18<def> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
128B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
144B		%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
160B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
176B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
192B		%vreg13<def> = REG_SEQUENCE %vreg12, sub0, %vreg11, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
208B		%vreg14<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg13, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
224B		BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
240B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg18<def> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
128B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
144B		%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
160B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
176B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
192B		%vreg13<def> = REG_SEQUENCE %vreg12, sub0, %vreg11, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
208B		%vreg14<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg13, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
224B		BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
240B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After SI Fix SGPR live ranges ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12, sub0, %vreg11, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg13, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

********** PROCESS IMPLICIT DEFS **********
********** Function: Global1
# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12, sub0, %vreg11, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg13, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12, sub0, %vreg11, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg13, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18<kill>, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
	%vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18<kill>, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

********** REWRITING TWO-ADDR INSTRS **********
********** Function: Global1
Inserted: %vreg19:sub0<def,read-undef> = COPY %vreg18; VReg_64:%vreg19 VGPR_32:%vreg18
Inserted: %vreg19:sub1<def> = COPY %vreg22<kill>; VReg_64:%vreg19 VGPR_32:%vreg22
Eliminated: %vreg19<def> = REG_SEQUENCE %vreg18, sub0, %vreg22<kill>, sub1; VReg_64:%vreg19 VGPR_32:%vreg18,%vreg22
Inserted: %vreg13:sub0<def,read-undef> = COPY %vreg12<kill>; SGPR_64:%vreg13 SReg_32:%vreg12
Inserted: %vreg13:sub1<def> = COPY %vreg11<kill>; SGPR_64:%vreg13 SReg_32:%vreg11
Eliminated: %vreg13<def> = REG_SEQUENCE %vreg12<kill>, sub0, %vreg11<kill>, sub1; SGPR_64:%vreg13 SReg_32:%vreg12,%vreg11
Inserted: %vreg14:sub0_sub1<def,read-undef> = COPY %vreg5<kill>; SReg_128:%vreg14 SReg_64:%vreg5
Inserted: %vreg14:sub2_sub3<def> = COPY %vreg13<kill>; SReg_128:%vreg14 SGPR_64:%vreg13
Eliminated: %vreg14<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg13<kill>, sub2_sub3; SReg_128:%vreg14 SReg_64:%vreg5 SGPR_64:%vreg13
# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
	%vreg19:sub0<def,read-undef> = COPY %vreg18; VReg_64:%vreg19 VGPR_32:%vreg18
	%vreg19:sub1<def> = COPY %vreg22<kill>; VReg_64:%vreg19 VGPR_32:%vreg22
	%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
	%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
	%vreg13:sub0<def,read-undef> = COPY %vreg12<kill>; SGPR_64:%vreg13 SReg_32:%vreg12
	%vreg13:sub1<def> = COPY %vreg11<kill>; SGPR_64:%vreg13 SReg_32:%vreg11
	%vreg14:sub0_sub1<def,read-undef> = COPY %vreg5<kill>; SReg_128:%vreg14 SReg_64:%vreg5
	%vreg14:sub2_sub3<def> = COPY %vreg13<kill>; SReg_128:%vreg14 SGPR_64:%vreg13
	BUFFER_STORE_BYTE_ADDR64 %vreg18<kill>, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
128B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
144B		%vreg19:sub0<def,read-undef> = COPY %vreg18; VReg_64:%vreg19 VGPR_32:%vreg18
160B		%vreg19:sub1<def> = COPY %vreg22<kill>; VReg_64:%vreg19 VGPR_32:%vreg22
176B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
192B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
208B		%vreg13:sub0<def,read-undef> = COPY %vreg12<kill>; SGPR_64:%vreg13 SReg_32:%vreg12
224B		%vreg13:sub1<def> = COPY %vreg11<kill>; SGPR_64:%vreg13 SReg_32:%vreg11
240B		%vreg14:sub0_sub1<def,read-undef> = COPY %vreg5<kill>; SReg_128:%vreg14 SReg_64:%vreg5
256B		%vreg14:sub2_sub3<def> = COPY %vreg13<kill>; SReg_128:%vreg14 SGPR_64:%vreg13
272B		BUFFER_STORE_BYTE_ADDR64 %vreg18<kill>, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Slot index numbering ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg18<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
128B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
144B		%vreg19:sub0<def,read-undef> = COPY %vreg18; VReg_64:%vreg19 VGPR_32:%vreg18
160B		%vreg19:sub1<def> = COPY %vreg22<kill>; VReg_64:%vreg19 VGPR_32:%vreg22
176B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
192B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
208B		%vreg13:sub0<def,read-undef> = COPY %vreg12<kill>; SGPR_64:%vreg13 SReg_32:%vreg12
224B		%vreg13:sub1<def> = COPY %vreg11<kill>; SGPR_64:%vreg13 SReg_32:%vreg11
240B		%vreg14:sub0_sub1<def,read-undef> = COPY %vreg5<kill>; SReg_128:%vreg14 SReg_64:%vreg5
256B		%vreg14:sub2_sub3<def> = COPY %vreg13<kill>; SReg_128:%vreg14 SGPR_64:%vreg13
272B		BUFFER_STORE_BYTE_ADDR64 %vreg18<kill>, %vreg19<kill>, %vreg14<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

Computing live-in reg-units in ABI blocks.
0B	BB#0 SGPR0#0 SGPR1#0 VGPR0#0 SGPR4#0
Created 4 new intervals.
********** INTERVALS **********
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg0 [48r,80r:0)  0@48r
%vreg2 [32r,112r:0)  0@32r
%vreg3 [16r,96r:0)  0@16r
%vreg4 [64r,96r:0)  0@64r
%vreg5 [80r,240r:0)  0@80r
%vreg6 [96r,112r:0)  0@96r
%vreg11 [176r,224r:0)  0@176r
%vreg12 [192r,208r:0)  0@192r
%vreg13 [208r,224r:0)[224r,256r:1)  0@208r 1@224r L0001 [208r,256r:0)  0@208r L0002 [224r,256r:0)  0@224r
%vreg14 [240r,256r:0)[256r,272r:1)  0@240r 1@256r L0003 [240r,272r:0)  0@240r L000C [256r,272r:0)  0@256r
%vreg18 [112r,272r:0)  0@112r
%vreg19 [144r,160r:0)[160r,272r:1)  0@144r 1@160r L0001 [144r,272r:0)  0@144r L0002 [160r,272r:0)  0@160r
%vreg22 [128r,160r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg18<def> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
128B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
144B		%vreg19:sub0<def,read-undef> = COPY %vreg18; VReg_64:%vreg19 VGPR_32:%vreg18
160B		%vreg19:sub1<def> = COPY %vreg22; VReg_64:%vreg19 VGPR_32:%vreg22
176B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
192B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
208B		%vreg13:sub0<def,read-undef> = COPY %vreg12; SGPR_64:%vreg13 SReg_32:%vreg12
224B		%vreg13:sub1<def> = COPY %vreg11; SGPR_64:%vreg13 SReg_32:%vreg11
240B		%vreg14:sub0_sub1<def,read-undef> = COPY %vreg5; SReg_128:%vreg14 SReg_64:%vreg5
256B		%vreg14:sub2_sub3<def> = COPY %vreg13; SReg_128:%vreg14 SGPR_64:%vreg13
272B		BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg18<def> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg18,%vreg2 SReg_32:%vreg6
128B		%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg18, %EXEC<imp-use>; VGPR_32:%vreg22,%vreg18
144B		%vreg19:sub0<def,read-undef> = COPY %vreg18; VReg_64:%vreg19 VGPR_32:%vreg18
160B		%vreg19:sub1<def> = COPY %vreg22; VReg_64:%vreg19 VGPR_32:%vreg22
176B		%vreg11<def> = S_MOV_B32 61440; SReg_32:%vreg11
192B		%vreg12<def> = S_MOV_B32 0; SReg_32:%vreg12
208B		%vreg13:sub0<def,read-undef> = COPY %vreg12; SGPR_64:%vreg13 SReg_32:%vreg12
224B		%vreg13:sub1<def> = COPY %vreg11; SGPR_64:%vreg13 SReg_32:%vreg11
240B		%vreg14:sub0_sub1<def,read-undef> = COPY %vreg5; SReg_128:%vreg14 SReg_64:%vreg5
256B		%vreg14:sub2_sub3<def> = COPY %vreg13; SReg_128:%vreg14 SGPR_64:%vreg13
272B		BUFFER_STORE_BYTE_ADDR64 %vreg18, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg18 VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

********** SIMPLE REGISTER COALESCING **********
********** Function: Global1
********** JOINING INTERVALS ***********
entry:
16B	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	Considering merging %vreg3 with %SGPR4
	Can only merge into reserved registers.
32B	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	Considering merging %vreg2 with %VGPR0
	Can only merge into reserved registers.
48B	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	Considering merging %vreg0 with %SGPR0_SGPR1
	Can only merge into reserved registers.
144B	%vreg19:sub0<def,read-undef> = COPY %vreg18; VReg_64:%vreg19 VGPR_32:%vreg18
	Considering merging to VReg_64 with %vreg18 in %vreg19:sub0
		RHS = %vreg18 [112r,272r:0)  0@112r
		LHS = %vreg19 [144r,160r:0)[160r,272r:1)  0@144r 1@160r L0001 [144r,272r:0)  0@144r L0002 [160r,272r:0)  0@160r
		merge %vreg19:0@144r into %vreg18:0@112r --> @112r
		LHST = %vreg19 %vreg19 [144r,160r:0)[160r,272r:1)  0@144r 1@160r L0001 [144r,272r:0)  0@144r L0002 [160r,272r:0)  0@160r
		Copy+Merge 0001 into 0001
		merge %vreg19:0@144r into %vreg18:0@112r --> @112r
		joined lanes: [112r,272r:0)  0@112r
	Joined SubRanges %vreg19 [144r,160r:0)[160r,272r:1)  0@144r 1@160r L0001 [112r,272r:0)  0@112r L0002 [160r,272r:0)  0@160r
		pruned all of %vreg19 at 144r: [160r,272r:1)  0@144r 1@160r
		pruned %vreg18 at 160r: [112r,160r:0)  0@112r
		erased:	144r	%vreg19:sub0<def,read-undef> = COPY %vreg18; VReg_64:%vreg19 VGPR_32:%vreg18
		restoring liveness to 3 points: %vreg19 [112r,160r:0)[160r,272r:1)  0@112r 1@160r L0001 [112r,272r:0)  0@112r L0002 [160r,272r:0)  0@160r
AllocationOrder(VReg_64) = [ %VGPR0_VGPR1 %VGPR1_VGPR2 %VGPR2_VGPR3 %VGPR3_VGPR4 %VGPR4_VGPR5 %VGPR5_VGPR6 %VGPR6_VGPR7 %VGPR7_VGPR8 %VGPR8_VGPR9 %VGPR9_VGPR10 %VGPR10_VGPR11 %VGPR11_VGPR12 %VGPR12_VGPR13 %VGPR13_VGPR14 %VGPR14_VGPR15 %VGPR15_VGPR16 %VGPR16_VGPR17 %VGPR17_VGPR18 %VGPR18_VGPR19 %VGPR19_VGPR20 %VGPR20_VGPR21 %VGPR21_VGPR22 %VGPR22_VGPR23 %VGPR23_VGPR24 %VGPR24_VGPR25 %VGPR25_VGPR26 %VGPR26_VGPR27 %VGPR27_VGPR28 %VGPR28_VGPR29 %VGPR29_VGPR30 %VGPR30_VGPR31 %VGPR31_VGPR32 %VGPR32_VGPR33 %VGPR33_VGPR34 %VGPR34_VGPR35 %VGPR35_VGPR36 %VGPR36_VGPR37 %VGPR37_VGPR38 %VGPR38_VGPR39 %VGPR39_VGPR40 %VGPR40_VGPR41 %VGPR41_VGPR42 %VGPR42_VGPR43 %VGPR43_VGPR44 %VGPR44_VGPR45 %VGPR45_VGPR46 %VGPR46_VGPR47 %VGPR47_VGPR48 %VGPR48_VGPR49 %VGPR49_VGPR50 %VGPR50_VGPR51 %VGPR51_VGPR52 %VGPR52_VGPR53 %VGPR53_VGPR54 %VGPR54_VGPR55 %VGPR55_VGPR56 %VGPR56_VGPR57 %VGPR57_VGPR58 %VGPR58_VGPR59 %VGPR59_VGPR60 %VGPR60_VGPR61 %VGPR61_VGPR62 %VGPR62_VGPR63 %VGPR63_VGPR64 %VGPR64_VGPR65 %VGPR65_VGPR66 %VGPR66_VGPR67 %VGPR67_VGPR68 %VGPR68_VGPR69 %VGPR69_VGPR70 %VGPR70_VGPR71 %VGPR71_VGPR72 %VGPR72_VGPR73 %VGPR73_VGPR74 %VGPR74_VGPR75 %VGPR75_VGPR76 %VGPR76_VGPR77 %VGPR77_VGPR78 %VGPR78_VGPR79 %VGPR79_VGPR80 %VGPR80_VGPR81 %VGPR81_VGPR82 %VGPR82_VGPR83 %VGPR83_VGPR84 %VGPR84_VGPR85 %VGPR85_VGPR86 %VGPR86_VGPR87 %VGPR87_VGPR88 %VGPR88_VGPR89 %VGPR89_VGPR90 %VGPR90_VGPR91 %VGPR91_VGPR92 %VGPR92_VGPR93 %VGPR93_VGPR94 %VGPR94_VGPR95 %VGPR95_VGPR96 %VGPR96_VGPR97 %VGPR97_VGPR98 %VGPR98_VGPR99 %VGPR99_VGPR100 %VGPR100_VGPR101 %VGPR101_VGPR102 %VGPR102_VGPR103 %VGPR103_VGPR104 %VGPR104_VGPR105 %VGPR105_VGPR106 %VGPR106_VGPR107 %VGPR107_VGPR108 %VGPR108_VGPR109 %VGPR109_VGPR110 %VGPR110_VGPR111 %VGPR111_VGPR112 %VGPR112_VGPR113 %VGPR113_VGPR114 %VGPR114_VGPR115 %VGPR115_VGPR116 %VGPR116_VGPR117 %VGPR117_VGPR118 %VGPR118_VGPR119 %VGPR119_VGPR120 %VGPR120_VGPR121 %VGPR121_VGPR122 %VGPR122_VGPR123 %VGPR123_VGPR124 %VGPR124_VGPR125 %VGPR125_VGPR126 %VGPR126_VGPR127 %VGPR127_VGPR128 %VGPR128_VGPR129 %VGPR129_VGPR130 %VGPR130_VGPR131 %VGPR131_VGPR132 %VGPR132_VGPR133 %VGPR133_VGPR134 %VGPR134_VGPR135 %VGPR135_VGPR136 %VGPR136_VGPR137 %VGPR137_VGPR138 %VGPR138_VGPR139 %VGPR139_VGPR140 %VGPR140_VGPR141 %VGPR141_VGPR142 %VGPR142_VGPR143 %VGPR143_VGPR144 %VGPR144_VGPR145 %VGPR145_VGPR146 %VGPR146_VGPR147 %VGPR147_VGPR148 %VGPR148_VGPR149 %VGPR149_VGPR150 %VGPR150_VGPR151 %VGPR151_VGPR152 %VGPR152_VGPR153 %VGPR153_VGPR154 %VGPR154_VGPR155 %VGPR155_VGPR156 %VGPR156_VGPR157 %VGPR157_VGPR158 %VGPR158_VGPR159 %VGPR159_VGPR160 %VGPR160_VGPR161 %VGPR161_VGPR162 %VGPR162_VGPR163 %VGPR163_VGPR164 %VGPR164_VGPR165 %VGPR165_VGPR166 %VGPR166_VGPR167 %VGPR167_VGPR168 %VGPR168_VGPR169 %VGPR169_VGPR170 %VGPR170_VGPR171 %VGPR171_VGPR172 %VGPR172_VGPR173 %VGPR173_VGPR174 %VGPR174_VGPR175 %VGPR175_VGPR176 %VGPR176_VGPR177 %VGPR177_VGPR178 %VGPR178_VGPR179 %VGPR179_VGPR180 %VGPR180_VGPR181 %VGPR181_VGPR182 %VGPR182_VGPR183 %VGPR183_VGPR184 %VGPR184_VGPR185 %VGPR185_VGPR186 %VGPR186_VGPR187 %VGPR187_VGPR188 %VGPR188_VGPR189 %VGPR189_VGPR190 %VGPR190_VGPR191 %VGPR191_VGPR192 %VGPR192_VGPR193 %VGPR193_VGPR194 %VGPR194_VGPR195 %VGPR195_VGPR196 %VGPR196_VGPR197 %VGPR197_VGPR198 %VGPR198_VGPR199 %VGPR199_VGPR200 %VGPR200_VGPR201 %VGPR201_VGPR202 %VGPR202_VGPR203 %VGPR203_VGPR204 %VGPR204_VGPR205 %VGPR205_VGPR206 %VGPR206_VGPR207 %VGPR207_VGPR208 %VGPR208_VGPR209 %VGPR209_VGPR210 %VGPR210_VGPR211 %VGPR211_VGPR212 %VGPR212_VGPR213 %VGPR213_VGPR214 %VGPR214_VGPR215 %VGPR215_VGPR216 %VGPR216_VGPR217 %VGPR217_VGPR218 %VGPR218_VGPR219 %VGPR219_VGPR220 %VGPR220_VGPR221 %VGPR221_VGPR222 %VGPR222_VGPR223 %VGPR223_VGPR224 %VGPR224_VGPR225 %VGPR225_VGPR226 %VGPR226_VGPR227 %VGPR227_VGPR228 %VGPR228_VGPR229 %VGPR229_VGPR230 %VGPR230_VGPR231 %VGPR231_VGPR232 %VGPR232_VGPR233 %VGPR233_VGPR234 %VGPR234_VGPR235 %VGPR235_VGPR236 %VGPR236_VGPR237 %VGPR237_VGPR238 %VGPR238_VGPR239 %VGPR239_VGPR240 %VGPR240_VGPR241 %VGPR241_VGPR242 %VGPR242_VGPR243 %VGPR243_VGPR244 %VGPR244_VGPR245 %VGPR245_VGPR246 %VGPR246_VGPR247 %VGPR247_VGPR248 %VGPR248_VGPR249 %VGPR249_VGPR250 %VGPR250_VGPR251 %VGPR251_VGPR252 %VGPR252_VGPR253 ]
		updated: 112B	%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
		updated: 128B	%vreg22<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VGPR_32:%vreg22 VReg_64:%vreg19
		updated: 272B	BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
	Success: %vreg18:sub0 -> %vreg19
	Result = %vreg19 [112r,160r:0)[160r,272r:1)  0@112r 1@160r L0001 [112r,272r:0)  0@112r L0002 [160r,272r:0)  0@160r
160B	%vreg19:sub1<def> = COPY %vreg22; VReg_64:%vreg19 VGPR_32:%vreg22
	Considering merging to VReg_64 with %vreg22 in %vreg19:sub1
		RHS = %vreg22 [128r,160r:0)  0@128r
		LHS = %vreg19 [112r,160r:0)[160r,272r:1)  0@112r 1@160r L0001 [112r,272r:0)  0@112r L0002 [160r,272r:0)  0@160r
		merge %vreg19:1@160r into %vreg22:0@128r --> @128r
		LHST = %vreg19 %vreg19 [112r,160r:0)[160r,272r:1)  0@112r 1@160r L0001 [112r,272r:0)  0@112r L0002 [160r,272r:0)  0@160r
		Copy+Merge 0002 into 0002
		merge %vreg19:0@160r into %vreg22:0@128r --> @128r
		joined lanes: [128r,272r:0)  0@128r
	Joined SubRanges %vreg19 [112r,160r:0)[160r,272r:1)  0@112r 1@160r L0001 [112r,272r:0)  0@112r L0002 [128r,272r:0)  0@128r
		pruned %vreg19 at 128r: [112r,128r:0)[160r,272r:1)  0@112r 1@160r
		erased:	160r	%vreg19:sub1<def> = COPY %vreg22; VReg_64:%vreg19 VGPR_32:%vreg22
		restoring liveness to 2 points: %vreg19 [112r,128r:0)[128r,272r:1)  0@112r 1@128r L0001 [112r,272r:0)  0@112r L0002 [128r,272r:0)  0@128r
		updated: 128B	%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
	Success: %vreg22:sub1 -> %vreg19
	Result = %vreg19 [112r,128r:0)[128r,272r:1)  0@112r 1@128r L0001 [112r,272r:0)  0@112r L0002 [128r,272r:0)  0@128r
208B	%vreg13:sub0<def,read-undef> = COPY %vreg12; SGPR_64:%vreg13 SReg_32:%vreg12
	Considering merging to SGPR_64 with %vreg12 in %vreg13:sub0
		RHS = %vreg12 [192r,208r:0)  0@192r
		LHS = %vreg13 [208r,224r:0)[224r,256r:1)  0@208r 1@224r L0001 [208r,256r:0)  0@208r L0002 [224r,256r:0)  0@224r
		merge %vreg13:0@208r into %vreg12:0@192r --> @192r
		LHST = %vreg13 %vreg13 [208r,224r:0)[224r,256r:1)  0@208r 1@224r L0001 [208r,256r:0)  0@208r L0002 [224r,256r:0)  0@224r
		Copy+Merge 0001 into 0001
		merge %vreg13:0@208r into %vreg12:0@192r --> @192r
		joined lanes: [192r,256r:0)  0@192r
	Joined SubRanges %vreg13 [208r,224r:0)[224r,256r:1)  0@208r 1@224r L0001 [192r,256r:0)  0@192r L0002 [224r,256r:0)  0@224r
		erased:	208r	%vreg13:sub0<def,read-undef> = COPY %vreg12; SGPR_64:%vreg13 SReg_32:%vreg12
AllocationOrder(SGPR_64) = [ %SGPR0_SGPR1 %SGPR2_SGPR3 %SGPR4_SGPR5 %SGPR6_SGPR7 %SGPR8_SGPR9 %SGPR10_SGPR11 %SGPR12_SGPR13 %SGPR14_SGPR15 %SGPR16_SGPR17 %SGPR18_SGPR19 %SGPR20_SGPR21 %SGPR22_SGPR23 %SGPR24_SGPR25 %SGPR26_SGPR27 %SGPR28_SGPR29 %SGPR30_SGPR31 %SGPR32_SGPR33 %SGPR34_SGPR35 %SGPR36_SGPR37 %SGPR38_SGPR39 %SGPR40_SGPR41 %SGPR42_SGPR43 %SGPR44_SGPR45 %SGPR46_SGPR47 %SGPR48_SGPR49 %SGPR50_SGPR51 %SGPR52_SGPR53 %SGPR54_SGPR55 %SGPR56_SGPR57 %SGPR58_SGPR59 %SGPR60_SGPR61 %SGPR62_SGPR63 %SGPR64_SGPR65 %SGPR66_SGPR67 %SGPR68_SGPR69 %SGPR70_SGPR71 %SGPR72_SGPR73 %SGPR74_SGPR75 %SGPR76_SGPR77 %SGPR78_SGPR79 %SGPR80_SGPR81 %SGPR82_SGPR83 %SGPR84_SGPR85 %SGPR86_SGPR87 %SGPR88_SGPR89 %SGPR90_SGPR91 %SGPR92_SGPR93 %SGPR94_SGPR95 %SGPR96_SGPR97 %SGPR98_SGPR99 %SGPR100_SGPR101 ]
		updated: 192B	%vreg13:sub0<def,read-undef> = S_MOV_B32 0; SGPR_64:%vreg13
	Success: %vreg12:sub0 -> %vreg13
	Result = %vreg13 [192r,224r:0)[224r,256r:1)  0@192r 1@224r L0001 [192r,256r:0)  0@192r L0002 [224r,256r:0)  0@224r
224B	%vreg13:sub1<def> = COPY %vreg11; SGPR_64:%vreg13 SReg_32:%vreg11
	Considering merging to SGPR_64 with %vreg11 in %vreg13:sub1
		RHS = %vreg11 [176r,224r:0)  0@176r
		LHS = %vreg13 [192r,224r:0)[224r,256r:1)  0@192r 1@224r L0001 [192r,256r:0)  0@192r L0002 [224r,256r:0)  0@224r
		merge %vreg13:1@224r into %vreg11:0@176r --> @176r
		LHST = %vreg13 %vreg13 [192r,224r:0)[224r,256r:1)  0@192r 1@224r L0001 [192r,256r:0)  0@192r L0002 [224r,256r:0)  0@224r
		Copy+Merge 0002 into 0002
		merge %vreg13:0@224r into %vreg11:0@176r --> @176r
		joined lanes: [176r,256r:0)  0@176r
	Joined SubRanges %vreg13 [192r,224r:0)[224r,256r:1)  0@192r 1@224r L0001 [192r,256r:0)  0@192r L0002 [176r,256r:0)  0@176r
		pruned %vreg11 at 192r: [176r,192r:0)  0@176r
		pruned all of %vreg13 at 224r: [192r,224r:0)  0@192r 1@224r
		erased:	224r	%vreg13:sub1<def> = COPY %vreg11; SGPR_64:%vreg13 SReg_32:%vreg11
		restoring liveness to 3 points: %vreg13 [176r,192r:0)[192r,224r:1)  0@176r 1@192r L0001 [192r,256r:0)  0@192r L0002 [176r,256r:0)  0@176r
		updated: 176B	%vreg13:sub1<def,read-undef> = S_MOV_B32 61440; SGPR_64:%vreg13
	Success: %vreg11:sub1 -> %vreg13
	Result = %vreg13 [176r,192r:0)[192r,256r:1)  0@176r 1@192r L0001 [192r,256r:0)  0@192r L0002 [176r,256r:0)  0@176r
240B	%vreg14:sub0_sub1<def,read-undef> = COPY %vreg5; SReg_128:%vreg14 SReg_64:%vreg5
	Considering merging to SReg_128 with %vreg5 in %vreg14:sub0_sub1
		RHS = %vreg5 [80r,240r:0)  0@80r
		LHS = %vreg14 [240r,256r:0)[256r,272r:1)  0@240r 1@256r L0003 [240r,272r:0)  0@240r L000C [256r,272r:0)  0@256r
		merge %vreg14:0@240r into %vreg5:0@80r --> @80r
		LHST = %vreg14 %vreg14 [240r,256r:0)[256r,272r:1)  0@240r 1@256r L0003 [240r,272r:0)  0@240r L000C [256r,272r:0)  0@256r
		Copy+Merge 0003 into 0003
		merge %vreg14:0@240r into %vreg5:0@80r --> @80r
		joined lanes: [80r,272r:0)  0@80r
	Joined SubRanges %vreg14 [240r,256r:0)[256r,272r:1)  0@240r 1@256r L0003 [80r,272r:0)  0@80r L000C [256r,272r:0)  0@256r
		erased:	240r	%vreg14:sub0_sub1<def,read-undef> = COPY %vreg5; SReg_128:%vreg14 SReg_64:%vreg5
AllocationOrder(SReg_128) = [ %SGPR0_SGPR1_SGPR2_SGPR3 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR12_SGPR13_SGPR14_SGPR15 %SGPR16_SGPR17_SGPR18_SGPR19 %SGPR20_SGPR21_SGPR22_SGPR23 %SGPR24_SGPR25_SGPR26_SGPR27 %SGPR28_SGPR29_SGPR30_SGPR31 %SGPR32_SGPR33_SGPR34_SGPR35 %SGPR36_SGPR37_SGPR38_SGPR39 %SGPR40_SGPR41_SGPR42_SGPR43 %SGPR44_SGPR45_SGPR46_SGPR47 %SGPR48_SGPR49_SGPR50_SGPR51 %SGPR52_SGPR53_SGPR54_SGPR55 %SGPR56_SGPR57_SGPR58_SGPR59 %SGPR60_SGPR61_SGPR62_SGPR63 %SGPR64_SGPR65_SGPR66_SGPR67 %SGPR68_SGPR69_SGPR70_SGPR71 %SGPR72_SGPR73_SGPR74_SGPR75 %SGPR76_SGPR77_SGPR78_SGPR79 %SGPR80_SGPR81_SGPR82_SGPR83 %SGPR84_SGPR85_SGPR86_SGPR87 %SGPR88_SGPR89_SGPR90_SGPR91 %SGPR92_SGPR93_SGPR94_SGPR95 %SGPR96_SGPR97_SGPR98_SGPR99 ]
		updated: 80B	%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
	Success: %vreg5:sub0_sub1 -> %vreg14
	Result = %vreg14 [80r,256r:0)[256r,272r:1)  0@80r 1@256r L0003 [80r,272r:0)  0@80r L000C [256r,272r:0)  0@256r
256B	%vreg14:sub2_sub3<def> = COPY %vreg13; SReg_128:%vreg14 SGPR_64:%vreg13
	Considering merging to SReg_128 with %vreg13 in %vreg14:sub2_sub3
		RHS = %vreg13 [176r,192r:0)[192r,256r:1)  0@176r 1@192r L0001 [192r,256r:0)  0@192r L0002 [176r,256r:0)  0@176r
		LHS = %vreg14 [80r,256r:0)[256r,272r:1)  0@80r 1@256r L0003 [80r,272r:0)  0@80r L000C [256r,272r:0)  0@256r
		merge %vreg14:1@256r into %vreg13:1@192r --> @192r
		LHST = %vreg14 %vreg14 [80r,256r:0)[256r,272r:1)  0@80r 1@256r L0003 [80r,272r:0)  0@80r L000C [256r,272r:0)  0@256r
		Copy+Merge 000C into 0004
		Reduce Lane to 0008
		merge %vreg14:0@256r into %vreg13:0@192r --> @192r
		joined lanes: [192r,272r:0)  0@192r
		Copy+Merge 0008 into 0008
		merge %vreg14:0@256r into %vreg13:0@176r --> @176r
		joined lanes: [176r,272r:0)  0@176r
	Joined SubRanges %vreg14 [80r,256r:0)[256r,272r:1)  0@80r 1@256r L0004 [192r,272r:0)  0@192r L0003 [80r,272r:0)  0@80r L0008 [176r,272r:0)  0@176r
		pruned %vreg14 at 176r: [80r,176r:0)[256r,272r:1)  0@80r 1@256r
		pruned %vreg14 at 192r: [80r,176r:0)[256r,272r:1)  0@80r 1@256r
		erased:	256r	%vreg14:sub2_sub3<def> = COPY %vreg13; SReg_128:%vreg14 SGPR_64:%vreg13
		restoring liveness to 3 points: %vreg14 [80r,176r:0)[176r,192r:1)[192r,272r:2)  0@80r 1@176r 2@192r L0004 [192r,272r:0)  0@192r L0003 [80r,272r:0)  0@80r L0008 [176r,272r:0)  0@176r
		updated: 176B	%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
		updated: 192B	%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
	Success: %vreg13:sub2_sub3 -> %vreg14
	Result = %vreg14 [80r,176r:0)[176r,192r:1)[192r,272r:2)  0@80r 1@176r 2@192r L0004 [192r,272r:0)  0@192r L0003 [80r,272r:0)  0@80r L0008 [176r,272r:0)  0@176r
Trying to inflate 0 regs.
********** INTERVALS **********
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg0 [48r,80r:0)  0@48r
%vreg2 [32r,112r:0)  0@32r
%vreg3 [16r,96r:0)  0@16r
%vreg4 [64r,96r:0)  0@64r
%vreg6 [96r,112r:0)  0@96r
%vreg14 [80r,176r:0)[176r,192r:1)[192r,272r:2)  0@80r 1@176r 2@192r L0004 [192r,272r:0)  0@192r L0003 [80r,272r:0)  0@80r L0008 [176r,272r:0)  0@176r
%vreg19 [112r,128r:0)[128r,272r:1)  0@112r 1@128r L0001 [112r,272r:0)  0@112r L0002 [128r,272r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
128B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
192B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
96B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
112B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
128B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
192B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

Before MISsched:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
	%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
	%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
	%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
	%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
	%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
	BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
	S_ENDPGM

# End machine code for function Global1.

AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
********** MI Scheduling **********
Global1:BB#0 entry
  From: %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
    To: S_ENDPGM
 RegionInstrs: 11 Remaining: 0
Max Pressure: SGPR_32=5
SReg_32=6
VGPR_32=2
VS_32=8
Live In: SGPR0 SGPR1 VGPR0 SGPR4 
Live Out: 
Live Thru: 
AllocationOrder(R600_Predicate_Bit) = [ %PREDICATE_BIT ]
AllocationOrder(R600_Predicate) = [ %PRED_SEL_OFF %PRED_SEL_ZERO %PRED_SEL_ONE ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_W) = [ %V01_W %V23_W ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_X) = [ %V01_X %V23_X ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y) = [ %V01_Y %V23_Y ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z) = [ %V01_Z %V23_Z ]
AllocationOrder(R600_Reg64Vertical) = [ %V01_X %V01_Y %V01_Z %V01_W %V23_X %V23_Y %V23_Z %V23_W ]
AllocationOrder(R600_ArrayBase) = [ %ArrayBase448 %ArrayBase449 %ArrayBase450 %ArrayBase451 %ArrayBase452 %ArrayBase453 %ArrayBase454 %ArrayBase455 %ArrayBase456 %ArrayBase457 %ArrayBase458 %ArrayBase459 %ArrayBase460 %ArrayBase461 %ArrayBase462 %ArrayBase463 %ArrayBase464 %ArrayBase465 %ArrayBase466 %ArrayBase467 %ArrayBase468 %ArrayBase469 %ArrayBase470 %ArrayBase471 %ArrayBase472 %ArrayBase473 %ArrayBase474 %ArrayBase475 %ArrayBase476 %ArrayBase477 %ArrayBase478 %ArrayBase479 %ArrayBase480 ]
AllocationOrder(SGPR_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 ]
AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
AllocationOrder(R600_TReg32_W) = [ %T0_W %T1_W %T2_W %T3_W %T4_W %T5_W %T6_W %T7_W %T8_W %T9_W %T10_W %T11_W %T12_W %T13_W %T14_W %T15_W %T16_W %T17_W %T18_W %T19_W %T20_W %T21_W %T22_W %T23_W %T24_W %T25_W %T26_W %T27_W %T28_W %T29_W %T30_W %T31_W %T32_W %T33_W %T34_W %T35_W %T36_W %T37_W %T38_W %T39_W %T40_W %T41_W %T42_W %T43_W %T44_W %T45_W %T46_W %T47_W %T48_W %T49_W %T50_W %T51_W %T52_W %T53_W %T54_W %T55_W %T56_W %T57_W %T58_W %T59_W %T60_W %T61_W %T62_W %T63_W %T64_W %T65_W %T66_W %T67_W %T68_W %T69_W %T70_W %T71_W %T72_W %T73_W %T74_W %T75_W %T76_W %T77_W %T78_W %T79_W %T80_W %T81_W %T82_W %T83_W %T84_W %T85_W %T86_W %T87_W %T88_W %T89_W %T90_W %T91_W %T92_W %T93_W %T94_W %T95_W %T96_W %T97_W %T98_W %T99_W %T100_W %T101_W %T102_W %T103_W %T104_W %T105_W %T106_W %T107_W %T108_W %T109_W %T110_W %T111_W %T112_W %T113_W %T114_W %T115_W %T116_W %T117_W %T118_W %T119_W %T120_W %T121_W %T122_W %T123_W %T124_W %T125_W %T126_W %T127_W ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_Z) = [ %T0_Z %T1_Z %T2_Z %T3_Z %T4_Z %T5_Z %T6_Z %T7_Z %T8_Z %T9_Z %T10_Z %T11_Z %T12_Z %T13_Z %T14_Z %T15_Z %T16_Z %T17_Z %T18_Z %T19_Z %T20_Z %T21_Z %T22_Z %T23_Z %T24_Z %T25_Z %T26_Z %T27_Z %T28_Z %T29_Z %T30_Z %T31_Z %T32_Z %T33_Z %T34_Z %T35_Z %T36_Z %T37_Z %T38_Z %T39_Z %T40_Z %T41_Z %T42_Z %T43_Z %T44_Z %T45_Z %T46_Z %T47_Z %T48_Z %T49_Z %T50_Z %T51_Z %T52_Z %T53_Z %T54_Z %T55_Z %T56_Z %T57_Z %T58_Z %T59_Z %T60_Z %T61_Z %T62_Z %T63_Z %T64_Z %T65_Z %T66_Z %T67_Z %T68_Z %T69_Z %T70_Z %T71_Z %T72_Z %T73_Z %T74_Z %T75_Z %T76_Z %T77_Z %T78_Z %T79_Z %T80_Z %T81_Z %T82_Z %T83_Z %T84_Z %T85_Z %T86_Z %T87_Z %T88_Z %T89_Z %T90_Z %T91_Z %T92_Z %T93_Z %T94_Z %T95_Z %T96_Z %T97_Z %T98_Z %T99_Z %T100_Z %T101_Z %T102_Z %T103_Z %T104_Z %T105_Z %T106_Z %T107_Z %T108_Z %T109_Z %T110_Z %T111_Z %T112_Z %T113_Z %T114_Z %T115_Z %T116_Z %T117_Z %T118_Z %T119_Z %T120_Z %T121_Z %T122_Z %T123_Z %T124_Z %T125_Z %T126_Z %T127_Z ]
AllocationOrder(R600_Reg64) = [ %T0_XY %T1_XY %T2_XY %T3_XY %T4_XY %T5_XY %T6_XY %T7_XY %T8_XY %T9_XY %T10_XY %T11_XY %T12_XY %T13_XY %T14_XY %T15_XY %T16_XY %T17_XY %T18_XY %T19_XY %T20_XY %T21_XY %T22_XY %T23_XY %T24_XY %T25_XY %T26_XY %T27_XY %T28_XY %T29_XY %T30_XY %T31_XY %T32_XY %T33_XY %T34_XY %T35_XY %T36_XY %T37_XY %T38_XY %T39_XY %T40_XY %T41_XY %T42_XY %T43_XY %T44_XY %T45_XY %T46_XY %T47_XY %T48_XY %T49_XY %T50_XY %T51_XY %T52_XY %T53_XY %T54_XY %T55_XY %T56_XY %T57_XY %T58_XY %T59_XY %T60_XY %T61_XY %T62_XY %T63_XY ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(R600_Reg64) = [ %T0_XY %T1_XY %T2_XY %T3_XY %T4_XY %T5_XY %T6_XY %T7_XY %T8_XY %T9_XY %T10_XY %T11_XY %T12_XY %T13_XY %T14_XY %T15_XY %T16_XY %T17_XY %T18_XY %T19_XY %T20_XY %T21_XY %T22_XY %T23_XY %T24_XY %T25_XY %T26_XY %T27_XY %T28_XY %T29_XY %T30_XY %T31_XY %T32_XY %T33_XY %T34_XY %T35_XY %T36_XY %T37_XY %T38_XY %T39_XY %T40_XY %T41_XY %T42_XY %T43_XY %T44_XY %T45_XY %T46_XY %T47_XY %T48_XY %T49_XY %T50_XY %T51_XY %T52_XY %T53_XY %T54_XY %T55_XY %T56_XY %T57_XY %T58_XY %T59_XY %T60_XY %T61_XY %T62_XY %T63_XY ]
AllocationOrder(R600_TReg32_W) = [ %T0_W %T1_W %T2_W %T3_W %T4_W %T5_W %T6_W %T7_W %T8_W %T9_W %T10_W %T11_W %T12_W %T13_W %T14_W %T15_W %T16_W %T17_W %T18_W %T19_W %T20_W %T21_W %T22_W %T23_W %T24_W %T25_W %T26_W %T27_W %T28_W %T29_W %T30_W %T31_W %T32_W %T33_W %T34_W %T35_W %T36_W %T37_W %T38_W %T39_W %T40_W %T41_W %T42_W %T43_W %T44_W %T45_W %T46_W %T47_W %T48_W %T49_W %T50_W %T51_W %T52_W %T53_W %T54_W %T55_W %T56_W %T57_W %T58_W %T59_W %T60_W %T61_W %T62_W %T63_W %T64_W %T65_W %T66_W %T67_W %T68_W %T69_W %T70_W %T71_W %T72_W %T73_W %T74_W %T75_W %T76_W %T77_W %T78_W %T79_W %T80_W %T81_W %T82_W %T83_W %T84_W %T85_W %T86_W %T87_W %T88_W %T89_W %T90_W %T91_W %T92_W %T93_W %T94_W %T95_W %T96_W %T97_W %T98_W %T99_W %T100_W %T101_W %T102_W %T103_W %T104_W %T105_W %T106_W %T107_W %T108_W %T109_W %T110_W %T111_W %T112_W %T113_W %T114_W %T115_W %T116_W %T117_W %T118_W %T119_W %T120_W %T121_W %T122_W %T123_W %T124_W %T125_W %T126_W %T127_W ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_Z) = [ %T0_Z %T1_Z %T2_Z %T3_Z %T4_Z %T5_Z %T6_Z %T7_Z %T8_Z %T9_Z %T10_Z %T11_Z %T12_Z %T13_Z %T14_Z %T15_Z %T16_Z %T17_Z %T18_Z %T19_Z %T20_Z %T21_Z %T22_Z %T23_Z %T24_Z %T25_Z %T26_Z %T27_Z %T28_Z %T29_Z %T30_Z %T31_Z %T32_Z %T33_Z %T34_Z %T35_Z %T36_Z %T37_Z %T38_Z %T39_Z %T40_Z %T41_Z %T42_Z %T43_Z %T44_Z %T45_Z %T46_Z %T47_Z %T48_Z %T49_Z %T50_Z %T51_Z %T52_Z %T53_Z %T54_Z %T55_Z %T56_Z %T57_Z %T58_Z %T59_Z %T60_Z %T61_Z %T62_Z %T63_Z %T64_Z %T65_Z %T66_Z %T67_Z %T68_Z %T69_Z %T70_Z %T71_Z %T72_Z %T73_Z %T74_Z %T75_Z %T76_Z %T77_Z %T78_Z %T79_Z %T80_Z %T81_Z %T82_Z %T83_Z %T84_Z %T85_Z %T86_Z %T87_Z %T88_Z %T89_Z %T90_Z %T91_Z %T92_Z %T93_Z %T94_Z %T95_Z %T96_Z %T97_Z %T98_Z %T99_Z %T100_Z %T101_Z %T102_Z %T103_Z %T104_Z %T105_Z %T106_Z %T107_Z %T108_Z %T109_Z %T110_Z %T111_Z %T112_Z %T113_Z %T114_Z %T115_Z %T116_Z %T117_Z %T118_Z %T119_Z %T120_Z %T121_Z %T122_Z %T123_Z %T124_Z %T125_Z %T126_Z %T127_Z ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(VGPR_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 ]
AllocationOrder(VS_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
AllocationOrder(R600_TReg32) = [ %T0_X %T0_Y %T0_Z %T0_W %T1_X %T1_Y %T1_Z %T1_W %T2_X %T2_Y %T2_Z %T2_W %T3_X %T3_Y %T3_Z %T3_W %T4_X %T4_Y %T4_Z %T4_W %T5_X %T5_Y %T5_Z %T5_W %T6_X %T6_Y %T6_Z %T6_W %T7_X %T7_Y %T7_Z %T7_W %T8_X %T8_Y %T8_Z %T8_W %T9_X %T9_Y %T9_Z %T9_W %T10_X %T10_Y %T10_Z %T10_W %T11_X %T11_Y %T11_Z %T11_W %T12_X %T12_Y %T12_Z %T12_W %T13_X %T13_Y %T13_Z %T13_W %T14_X %T14_Y %T14_Z %T14_W %T15_X %T15_Y %T15_Z %T15_W %T16_X %T16_Y %T16_Z %T16_W %T17_X %T17_Y %T17_Z %T17_W %T18_X %T18_Y %T18_Z %T18_W %T19_X %T19_Y %T19_Z %T19_W %T20_X %T20_Y %T20_Z %T20_W %T21_X %T21_Y %T21_Z %T21_W %T22_X %T22_Y %T22_Z %T22_W %T23_X %T23_Y %T23_Z %T23_W %T24_X %T24_Y %T24_Z %T24_W %T25_X %T25_Y %T25_Z %T25_W %T26_X %T26_Y %T26_Z %T26_W %T27_X %T27_Y %T27_Z %T27_W %T28_X %T28_Y %T28_Z %T28_W %T29_X %T29_Y %T29_Z %T29_W %T30_X %T30_Y %T30_Z %T30_W %T31_X %T31_Y %T31_Z %T31_W %T32_X %T32_Y %T32_Z %T32_W %T33_X %T33_Y %T33_Z %T33_W %T34_X %T34_Y %T34_Z %T34_W %T35_X %T35_Y %T35_Z %T35_W %T36_X %T36_Y %T36_Z %T36_W %T37_X %T37_Y %T37_Z %T37_W %T38_X %T38_Y %T38_Z %T38_W %T39_X %T39_Y %T39_Z %T39_W %T40_X %T40_Y %T40_Z %T40_W %T41_X %T41_Y %T41_Z %T41_W %T42_X %T42_Y %T42_Z %T42_W %T43_X %T43_Y %T43_Z %T43_W %T44_X %T44_Y %T44_Z %T44_W %T45_X %T45_Y %T45_Z %T45_W %T46_X %T46_Y %T46_Z %T46_W %T47_X %T47_Y %T47_Z %T47_W %T48_X %T48_Y %T48_Z %T48_W %T49_X %T49_Y %T49_Z %T49_W %T50_X %T50_Y %T50_Z %T50_W %T51_X %T51_Y %T51_Z %T51_W %T52_X %T52_Y %T52_Z %T52_W %T53_X %T53_Y %T53_Z %T53_W %T54_X %T54_Y %T54_Z %T54_W %T55_X %T55_Y %T55_Z %T55_W %T56_X %T56_Y %T56_Z %T56_W %T57_X %T57_Y %T57_Z %T57_W %T58_X %T58_Y %T58_Z %T58_W %T59_X %T59_Y %T59_Z %T59_W %T60_X %T60_Y %T60_Z %T60_W %T61_X %T61_Y %T61_Z %T61_W %T62_X %T62_Y %T62_Z %T62_W %T63_X %T63_Y %T63_Z %T63_W %T64_X %T64_Y %T64_Z %T64_W %T65_X %T65_Y %T65_Z %T65_W %T66_X %T66_Y %T66_Z %T66_W %T67_X %T67_Y %T67_Z %T67_W %T68_X %T68_Y %T68_Z %T68_W %T69_X %T69_Y %T69_Z %T69_W %T70_X %T70_Y %T70_Z %T70_W %T71_X %T71_Y %T71_Z %T71_W %T72_X %T72_Y %T72_Z %T72_W %T73_X %T73_Y %T73_Z %T73_W %T74_X %T74_Y %T74_Z %T74_W %T75_X %T75_Y %T75_Z %T75_W %T76_X %T76_Y %T76_Z %T76_W %T77_X %T77_Y %T77_Z %T77_W %T78_X %T78_Y %T78_Z %T78_W %T79_X %T79_Y %T79_Z %T79_W %T80_X %T80_Y %T80_Z %T80_W %T81_X %T81_Y %T81_Z %T81_W %T82_X %T82_Y %T82_Z %T82_W %T83_X %T83_Y %T83_Z %T83_W %T84_X %T84_Y %T84_Z %T84_W %T85_X %T85_Y %T85_Z %T85_W %T86_X %T86_Y %T86_Z %T86_W %T87_X %T87_Y %T87_Z %T87_W %T88_X %T88_Y %T88_Z %T88_W %T89_X %T89_Y %T89_Z %T89_W %T90_X %T90_Y %T90_Z %T90_W %T91_X %T91_Y %T91_Z %T91_W %T92_X %T92_Y %T92_Z %T92_W %T93_X %T93_Y %T93_Z %T93_W %T94_X %T94_Y %T94_Z %T94_W %T95_X %T95_Y %T95_Z %T95_W %T96_X %T96_Y %T96_Z %T96_W %T97_X %T97_Y %T97_Z %T97_W %T98_X %T98_Y %T98_Z %T98_W %T99_X %T99_Y %T99_Z %T99_W %T100_X %T100_Y %T100_Z %T100_W %T101_X %T101_Y %T101_Z %T101_W %T102_X %T102_Y %T102_Z %T102_W %T103_X %T103_Y %T103_Z %T103_W %T104_X %T104_Y %T104_Z %T104_W %T105_X %T105_Y %T105_Z %T105_W %T106_X %T106_Y %T106_Z %T106_W %T107_X %T107_Y %T107_Z %T107_W %T108_X %T108_Y %T108_Z %T108_W %T109_X %T109_Y %T109_Z %T109_W %T110_X %T110_Y %T110_Z %T110_W %T111_X %T111_Y %T111_Z %T111_W %T112_X %T112_Y %T112_Z %T112_W %T113_X %T113_Y %T113_Z %T113_W %T114_X %T114_Y %T114_Z %T114_W %T115_X %T115_Y %T115_Z %T115_W %T116_X %T116_Y %T116_Z %T116_W %T117_X %T117_Y %T117_Z %T117_W %T118_X %T118_Y %T118_Z %T118_W %T119_X %T119_Y %T119_Z %T119_W %T120_X %T120_Y %T120_Z %T120_W %T121_X %T121_Y %T121_Z %T121_W %T122_X %T122_Y %T122_Z %T122_W %T123_X %T123_Y %T123_Z %T123_W %T124_X %T124_Y %T124_Z %T124_W %T125_X %T125_Y %T125_Z %T125_W %T126_X %T126_Y %T126_Z %T126_W %T127_X %T127_Y %T127_Z %T127_W %AR_X ]
AllocationOrder(R600_Reg32) = [ %T0_X %T0_Y %T0_Z %T0_W %T1_X %T1_Y %T1_Z %T1_W %T2_X %T2_Y %T2_Z %T2_W %T3_X %T3_Y %T3_Z %T3_W %T4_X %T4_Y %T4_Z %T4_W %T5_X %T5_Y %T5_Z %T5_W %T6_X %T6_Y %T6_Z %T6_W %T7_X %T7_Y %T7_Z %T7_W %T8_X %T8_Y %T8_Z %T8_W %T9_X %T9_Y %T9_Z %T9_W %T10_X %T10_Y %T10_Z %T10_W %T11_X %T11_Y %T11_Z %T11_W %T12_X %T12_Y %T12_Z %T12_W %T13_X %T13_Y %T13_Z %T13_W %T14_X %T14_Y %T14_Z %T14_W %T15_X %T15_Y %T15_Z %T15_W %T16_X %T16_Y %T16_Z %T16_W %T17_X %T17_Y %T17_Z %T17_W %T18_X %T18_Y %T18_Z %T18_W %T19_X %T19_Y %T19_Z %T19_W %T20_X %T20_Y %T20_Z %T20_W %T21_X %T21_Y %T21_Z %T21_W %T22_X %T22_Y %T22_Z %T22_W %T23_X %T23_Y %T23_Z %T23_W %T24_X %T24_Y %T24_Z %T24_W %T25_X %T25_Y %T25_Z %T25_W %T26_X %T26_Y %T26_Z %T26_W %T27_X %T27_Y %T27_Z %T27_W %T28_X %T28_Y %T28_Z %T28_W %T29_X %T29_Y %T29_Z %T29_W %T30_X %T30_Y %T30_Z %T30_W %T31_X %T31_Y %T31_Z %T31_W %T32_X %T32_Y %T32_Z %T32_W %T33_X %T33_Y %T33_Z %T33_W %T34_X %T34_Y %T34_Z %T34_W %T35_X %T35_Y %T35_Z %T35_W %T36_X %T36_Y %T36_Z %T36_W %T37_X %T37_Y %T37_Z %T37_W %T38_X %T38_Y %T38_Z %T38_W %T39_X %T39_Y %T39_Z %T39_W %T40_X %T40_Y %T40_Z %T40_W %T41_X %T41_Y %T41_Z %T41_W %T42_X %T42_Y %T42_Z %T42_W %T43_X %T43_Y %T43_Z %T43_W %T44_X %T44_Y %T44_Z %T44_W %T45_X %T45_Y %T45_Z %T45_W %T46_X %T46_Y %T46_Z %T46_W %T47_X %T47_Y %T47_Z %T47_W %T48_X %T48_Y %T48_Z %T48_W %T49_X %T49_Y %T49_Z %T49_W %T50_X %T50_Y %T50_Z %T50_W %T51_X %T51_Y %T51_Z %T51_W %T52_X %T52_Y %T52_Z %T52_W %T53_X %T53_Y %T53_Z %T53_W %T54_X %T54_Y %T54_Z %T54_W %T55_X %T55_Y %T55_Z %T55_W %T56_X %T56_Y %T56_Z %T56_W %T57_X %T57_Y %T57_Z %T57_W %T58_X %T58_Y %T58_Z %T58_W %T59_X %T59_Y %T59_Z %T59_W %T60_X %T60_Y %T60_Z %T60_W %T61_X %T61_Y %T61_Z %T61_W %T62_X %T62_Y %T62_Z %T62_W %T63_X %T63_Y %T63_Z %T63_W %T64_X %T64_Y %T64_Z %T64_W %T65_X %T65_Y %T65_Z %T65_W %T66_X %T66_Y %T66_Z %T66_W %T67_X %T67_Y %T67_Z %T67_W %T68_X %T68_Y %T68_Z %T68_W %T69_X %T69_Y %T69_Z %T69_W %T70_X %T70_Y %T70_Z %T70_W %T71_X %T71_Y %T71_Z %T71_W %T72_X %T72_Y %T72_Z %T72_W %T73_X %T73_Y %T73_Z %T73_W %T74_X %T74_Y %T74_Z %T74_W %T75_X %T75_Y %T75_Z %T75_W %T76_X %T76_Y %T76_Z %T76_W %T77_X %T77_Y %T77_Z %T77_W %T78_X %T78_Y %T78_Z %T78_W %T79_X %T79_Y %T79_Z %T79_W %T80_X %T80_Y %T80_Z %T80_W %T81_X %T81_Y %T81_Z %T81_W %T82_X %T82_Y %T82_Z %T82_W %T83_X %T83_Y %T83_Z %T83_W %T84_X %T84_Y %T84_Z %T84_W %T85_X %T85_Y %T85_Z %T85_W %T86_X %T86_Y %T86_Z %T86_W %T87_X %T87_Y %T87_Z %T87_W %T88_X %T88_Y %T88_Z %T88_W %T89_X %T89_Y %T89_Z %T89_W %T90_X %T90_Y %T90_Z %T90_W %T91_X %T91_Y %T91_Z %T91_W %T92_X %T92_Y %T92_Z %T92_W %T93_X %T93_Y %T93_Z %T93_W %T94_X %T94_Y %T94_Z %T94_W %T95_X %T95_Y %T95_Z %T95_W %T96_X %T96_Y %T96_Z %T96_W %T97_X %T97_Y %T97_Z %T97_W %T98_X %T98_Y %T98_Z %T98_W %T99_X %T99_Y %T99_Z %T99_W %T100_X %T100_Y %T100_Z %T100_W %T101_X %T101_Y %T101_Z %T101_W %T102_X %T102_Y %T102_Z %T102_W %T103_X %T103_Y %T103_Z %T103_W %T104_X %T104_Y %T104_Z %T104_W %T105_X %T105_Y %T105_Z %T105_W %T106_X %T106_Y %T106_Z %T106_W %T107_X %T107_Y %T107_Z %T107_W %T108_X %T108_Y %T108_Z %T108_W %T109_X %T109_Y %T109_Z %T109_W %T110_X %T110_Y %T110_Z %T110_W %T111_X %T111_Y %T111_Z %T111_W %T112_X %T112_Y %T112_Z %T112_W %T113_X %T113_Y %T113_Z %T113_W %T114_X %T114_Y %T114_Z %T114_W %T115_X %T115_Y %T115_Z %T115_W %T116_X %T116_Y %T116_Z %T116_W %T117_X %T117_Y %T117_Z %T117_W %T118_X %T118_Y %T118_Z %T118_W %T119_X %T119_Y %T119_Z %T119_W %T120_X %T120_Y %T120_Z %T120_W %T121_X %T121_Y %T121_Z %T121_W %T122_X %T122_Y %T122_Z %T122_W %T123_X %T123_Y %T123_Z %T123_W %T124_X %T124_Y %T124_Z %T124_W %T125_X %T125_Y %T125_Z %T125_W %T126_X %T126_Y %T126_Z %T126_W %T127_X %T127_Y %T127_Z %T127_W %AR_X %ArrayBase448 %ArrayBase449 %ArrayBase450 %ArrayBase451 %ArrayBase452 %ArrayBase453 %ArrayBase454 %ArrayBase455 %ArrayBase456 %ArrayBase457 %ArrayBase458 %ArrayBase459 %ArrayBase460 %ArrayBase461 %ArrayBase462 %ArrayBase463 %ArrayBase464 %ArrayBase465 %ArrayBase466 %ArrayBase467 %ArrayBase468 %ArrayBase469 %ArrayBase470 %ArrayBase471 %ArrayBase472 %ArrayBase473 %ArrayBase474 %ArrayBase475 %ArrayBase476 %ArrayBase477 %ArrayBase478 %ArrayBase479 %ArrayBase480 %Addr0_X %Addr1_X %Addr2_X %Addr3_X %Addr4_X %Addr5_X %Addr6_X %Addr7_X %Addr8_X %Addr9_X %Addr10_X %Addr11_X %Addr12_X %Addr13_X %Addr14_X %Addr15_X %Addr16_X %Addr17_X %Addr18_X %Addr19_X %Addr20_X %Addr21_X %Addr22_X %Addr23_X %Addr24_X %Addr25_X %Addr26_X %Addr27_X %Addr28_X %Addr29_X %Addr30_X %Addr31_X %Addr32_X %Addr33_X %Addr34_X %Addr35_X %Addr36_X %Addr37_X %Addr38_X %Addr39_X %Addr40_X %Addr41_X %Addr42_X %Addr43_X %Addr44_X %Addr45_X %Addr46_X %Addr47_X %Addr48_X %Addr49_X %Addr50_X %Addr51_X %Addr52_X %Addr53_X %Addr54_X %Addr55_X %Addr56_X %Addr57_X %Addr58_X %Addr59_X %Addr60_X %Addr61_X %Addr62_X %Addr63_X %Addr64_X %Addr65_X %Addr66_X %Addr67_X %Addr68_X %Addr69_X %Addr70_X %Addr71_X %Addr72_X %Addr73_X %Addr74_X %Addr75_X %Addr76_X %Addr77_X %Addr78_X %Addr79_X %Addr80_X %Addr81_X %Addr82_X %Addr83_X %Addr84_X %Addr85_X %Addr86_X %Addr87_X %Addr88_X %Addr89_X %Addr90_X %Addr91_X %Addr92_X %Addr93_X %Addr94_X %Addr95_X %Addr96_X %Addr97_X %Addr98_X %Addr99_X %Addr100_X %Addr101_X %Addr102_X %Addr103_X %Addr104_X %Addr105_X %Addr106_X %Addr107_X %Addr108_X %Addr109_X %Addr110_X %Addr111_X %Addr112_X %Addr113_X %Addr114_X %Addr115_X %Addr116_X %Addr117_X %Addr118_X %Addr119_X %Addr120_X %Addr121_X %Addr122_X %Addr123_X %Addr124_X %Addr125_X %Addr126_X %Addr127_X %KC0_128_X %KC0_128_Y %KC0_128_Z %KC0_128_W %KC0_129_X %KC0_129_Y %KC0_129_Z %KC0_129_W %KC0_130_X %KC0_130_Y %KC0_130_Z %KC0_130_W %KC0_131_X %KC0_131_Y %KC0_131_Z %KC0_131_W %KC0_132_X %KC0_132_Y %KC0_132_Z %KC0_132_W %KC0_133_X %KC0_133_Y %KC0_133_Z %KC0_133_W %KC0_134_X %KC0_134_Y %KC0_134_Z %KC0_134_W %KC0_135_X %KC0_135_Y %KC0_135_Z %KC0_135_W %KC0_136_X %KC0_136_Y %KC0_136_Z %KC0_136_W %KC0_137_X %KC0_137_Y %KC0_137_Z %KC0_137_W %KC0_138_X %KC0_138_Y %KC0_138_Z %KC0_138_W %KC0_139_X %KC0_139_Y %KC0_139_Z %KC0_139_W %KC0_140_X %KC0_140_Y %KC0_140_Z %KC0_140_W %KC0_141_X %KC0_141_Y %KC0_141_Z %KC0_141_W %KC0_142_X %KC0_142_Y %KC0_142_Z %KC0_142_W %KC0_143_X %KC0_143_Y %KC0_143_Z %KC0_143_W %KC0_144_X %KC0_144_Y %KC0_144_Z %KC0_144_W %KC0_145_X %KC0_145_Y %KC0_145_Z %KC0_145_W %KC0_146_X %KC0_146_Y %KC0_146_Z %KC0_146_W %KC0_147_X %KC0_147_Y %KC0_147_Z %KC0_147_W %KC0_148_X %KC0_148_Y %KC0_148_Z %KC0_148_W %KC0_149_X %KC0_149_Y %KC0_149_Z %KC0_149_W %KC0_150_X %KC0_150_Y %KC0_150_Z %KC0_150_W %KC0_151_X %KC0_151_Y %KC0_151_Z %KC0_151_W %KC0_152_X %KC0_152_Y %KC0_152_Z %KC0_152_W %KC0_153_X %KC0_153_Y %KC0_153_Z %KC0_153_W %KC0_154_X %KC0_154_Y %KC0_154_Z %KC0_154_W %KC0_155_X %KC0_155_Y %KC0_155_Z %KC0_155_W %KC0_156_X %KC0_156_Y %KC0_156_Z %KC0_156_W %KC0_157_X %KC0_157_Y %KC0_157_Z %KC0_157_W %KC0_158_X %KC0_158_Y %KC0_158_Z %KC0_158_W %KC0_159_X %KC0_159_Y %KC0_159_Z %KC0_159_W %KC1_160_X %KC1_160_Y %KC1_160_Z %KC1_160_W %KC1_161_X %KC1_161_Y %KC1_161_Z %KC1_161_W %KC1_162_X %KC1_162_Y %KC1_162_Z %KC1_162_W %KC1_163_X %KC1_163_Y %KC1_163_Z %KC1_163_W %KC1_164_X %KC1_164_Y %KC1_164_Z %KC1_164_W %KC1_165_X %KC1_165_Y %KC1_165_Z %KC1_165_W %KC1_166_X %KC1_166_Y %KC1_166_Z %KC1_166_W %KC1_167_X %KC1_167_Y %KC1_167_Z %KC1_167_W %KC1_168_X %KC1_168_Y %KC1_168_Z %KC1_168_W %KC1_169_X %KC1_169_Y %KC1_169_Z %KC1_169_W %KC1_170_X %KC1_170_Y %KC1_170_Z %KC1_170_W %KC1_171_X %KC1_171_Y %KC1_171_Z %KC1_171_W %KC1_172_X %KC1_172_Y %KC1_172_Z %KC1_172_W %KC1_173_X %KC1_173_Y %KC1_173_Z %KC1_173_W %KC1_174_X %KC1_174_Y %KC1_174_Z %KC1_174_W %KC1_175_X %KC1_175_Y %KC1_175_Z %KC1_175_W %KC1_176_X %KC1_176_Y %KC1_176_Z %KC1_176_W %KC1_177_X %KC1_177_Y %KC1_177_Z %KC1_177_W %KC1_178_X %KC1_178_Y %KC1_178_Z %KC1_178_W %KC1_179_X %KC1_179_Y %KC1_179_Z %KC1_179_W %KC1_180_X %KC1_180_Y %KC1_180_Z %KC1_180_W %KC1_181_X %KC1_181_Y %KC1_181_Z %KC1_181_W %KC1_182_X %KC1_182_Y %KC1_182_Z %KC1_182_W %KC1_183_X %KC1_183_Y %KC1_183_Z %KC1_183_W %KC1_184_X %KC1_184_Y %KC1_184_Z %KC1_184_W %KC1_185_X %KC1_185_Y %KC1_185_Z %KC1_185_W %KC1_186_X %KC1_186_Y %KC1_186_Z %KC1_186_W %KC1_187_X %KC1_187_Y %KC1_187_Z %KC1_187_W %KC1_188_X %KC1_188_Y %KC1_188_Z %KC1_188_W %KC1_189_X %KC1_189_Y %KC1_189_Z %KC1_189_W %KC1_190_X %KC1_190_Y %KC1_190_Z %KC1_190_W %KC1_191_X %KC1_191_Y %KC1_191_Z %KC1_191_W %ZERO %HALF %ONE %ONE_INT %PV_X %ALU_LITERAL_X %NEG_ONE %NEG_HALF %ALU_CONST %ALU_PARAM %OQAP ]
Excess PSets: 
Cluster loads SU(3) - SU(4)
  Copy Succ SU(5)
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
   val SU(5): Latency=0 Reg=%vreg3

SU(1):   %vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
   val SU(6): Latency=0 Reg=%vreg2

SU(2):   %vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 13
  Successors:
   val SU(4): Latency=0 Reg=%vreg0
   val SU(3): Latency=0 Reg=%vreg0

SU(3):   %vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 13
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg0
  Successors:
   val SU(5): Latency=10 Reg=%vreg4
   ch  SU(4): Latency=0

SU(4):   %vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
  # preds left       : 1
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 9
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg0
   ch  SU(3): Latency=0
  Successors:
   out SU(8): Latency=1
   ch  SU(4294967295) *: Latency=9
   ch  SU(5) *: Latency=0

SU(5):   %vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 3
  Predecessors:
   val SU(3): Latency=10 Reg=%vreg4
   val SU(0): Latency=0 Reg=%vreg3
   ch  SU(4) *: Latency=0
  Successors:
   val SU(6): Latency=1 Reg=%vreg6

SU(6):   %vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
   val SU(5): Latency=1 Reg=%vreg6
   val SU(1): Latency=0 Reg=%vreg2
  Successors:
   val SU(7): Latency=1 Reg=%vreg19
   out SU(7): Latency=1

SU(7):   %vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
   val SU(6): Latency=1 Reg=%vreg19
   out SU(6): Latency=1
  Successors:
   val SU(10): Latency=1 Reg=%vreg19

SU(8):   %vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
   out SU(4): Latency=1
  Successors:
   out SU(9): Latency=1

SU(9):   %vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
   out SU(8): Latency=1
  Successors:
   val SU(10): Latency=1 Reg=%vreg14

SU(10):   BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 450
  Depth              : 13
  Height             : 0
  Predecessors:
   val SU(7): Latency=1 Reg=%vreg19
   val SU(9): Latency=1 Reg=%vreg14

Critical Path(GS-RR ): 13
Pick Bot NOCAND
Scheduling SU(10) BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
  LiveReg: %vreg19
  UpdateRegP: SU(10) BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
  UpdateRegP: SU(7) %vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
  LiveReg: %vreg14
  UpdateRegP: SU(10) BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
  Ready @0c
  HWVMEM +1x217u
  BotQ.A TopLatency SU(10) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
BotQ.A RemLatency SU(7) 12c
  TopQ.A + Remain MOps: 7
TopQ.A RemLatency SU(2) 13c
  BotQ.A + Remain MOps: 8
BotQ.A: 7 9 
  SU(7) ORDER                              
  SU(9) ORDER                              
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
  LiveReg: %vreg14
  UpdateRegP: SU(10) BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
  Ready @1c
  HWSALU +1x3255u
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
BotQ.A RemLatency SU(7) 12c
  TopQ.A + Remain MOps: 6
  BotQ.A RemainingLatency 12 + 2c > CritPath 13
TopQ.A RemLatency SU(2) 13c
  BotQ.A + Remain MOps: 8
BotQ.A: 7 8 
  SU(7) ORDER                              
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(7) %vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
handleMove 128B -> 184B: %vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
     %vreg19 L0002:	[128r,272r:0)  0@128r
        -->	[184r,272r:0)  0@184r
     %vreg19:	[112r,128r:0)[128r,272r:1)  0@112r 1@128r
        -->	[112r,184r:0)[184r,272r:1)  0@112r 1@184r
     %vreg19 L0001:	[112r,272r:0)  0@112r
        -->	[112r,272r:0)  0@112r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg19
  UpdateRegP: SU(10) BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
  UpdateRegP: SU(7) %vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
  Ready @2c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(7) 12c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
BotQ.A RemLatency SU(6) 11c
  TopQ.A + Remain MOps: 5
  BotQ.A RemainingLatency 11 + 3c > CritPath 13
TopQ.A RemLatency SU(2) 13c
  BotQ.A + Remain MOps: 8
BotQ.A: 8 6 
  SU(8) ORDER                              
  SU(6) BOT-PATH                  11 cycles 
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(6) %vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
handleMove 112B -> 180B: %vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
     %vreg19 L0001:	[112r,272r:0)  0@112r
        -->	[180r,272r:0)  0@180r
     %vreg19:	[112r,184r:0)[184r,272r:1)  0@112r 1@184r
        -->	[180r,184r:0)[184r,272r:1)  0@180r 1@184r
     %vreg6:	[96r,112r:0)  0@96r
        -->	[96r,180r:0)  0@96r
     %vreg2:	[32r,112r:0)  0@32r
        -->	[32r,180r:0)  0@32r
     VCC_LO:	[180r,180d:0)  0@180r
        -->	[180r,180d:0)  0@180r
     VCC_HI:	[180r,180d:0)  0@180r
        -->	[180r,180d:0)  0@180r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg6
  UpdateRegP: SU(6) %vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
  LiveReg: %vreg2
  UpdateRegP: SU(6) %vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
  Ready @3c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
BotQ.A RemLatency SU(5) 10c
  TopQ.A + Remain MOps: 4
  BotQ.A RemainingLatency 10 + 4c > CritPath 13
TopQ.A RemLatency SU(2) 13c
  BotQ.A + Remain MOps: 8
BotQ.A: 8 5 1 
  SU(8) ORDER                              
  SU(5) BOT-PATH                  10 cycles 
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(5) %vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4

*** Renumbered SlotIndexes 176-216 ***
handleMove 96B -> 184B: %vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
     %vreg6:	[96r,192r:0)  0@96r
        -->	[184r,192r:0)  0@184r
     %vreg4:	[64r,96r:0)  0@64r
        -->	[64r,184r:0)  0@64r
     %vreg3:	[16r,96r:0)  0@16r
        -->	[16r,184r:0)  0@16r
  LiveReg: %vreg4
  UpdateRegP: SU(5) %vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
  LiveReg: %vreg3
  UpdateRegP: SU(5) %vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
  Ready @4c
  HWSALU +1x3255u
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
BotQ.P: 3 
BotQ.A RemLatency SU(8) 1c
  TopQ.A + Remain MOps: 3
  BotQ.A RemainingLatency 9 + 5c > CritPath 13
TopQ.A RemLatency SU(2) 13c
  BotQ.A + Remain MOps: 8
BotQ.A: 8 1 0 
  SU(8) ORDER                              
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(8) %vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
  LiveReg: %vreg14
  UpdateRegP: SU(10) BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
  Ready @5c
  HWSALU +1x3255u
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
BotQ.P: 3 4 
  TopQ.A + Remain MOps: 2
  BotQ.A RemainingLatency 8 + 6c > CritPath 13
TopQ.A RemLatency SU(2) 13c
  BotQ.A + Remain MOps: 8
BotQ.A: 0 1 
  SU(0) ORDER                              
  SU(1) REG-MAX                            
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(1) %vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
handleMove 32B -> 88B: %vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
     %vreg2:	[32r,192r:0)  0@32r
        -->	[88r,192r:0)  0@88r
     VGPR0:	[0B,32r:0)  0@0B-phi
        -->	[0B,88r:0)  0@0B-phi
  LiveReg: VGPR0
  Ready @6c
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(0) %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
handleMove 16B -> 84B: %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
     %vreg3:	[16r,184r:0)  0@16r
        -->	[84r,184r:0)  0@84r
     SGPR4:	[0B,16r:0)  0@0B-phi
        -->	[0B,84r:0)  0@0B-phi
  LiveReg: SGPR4
  Ready @6c
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
Cycle: 7 BotQ.A
BotQ.P: 3 4 
Cycle: 9 BotQ.A
BotQ.P: 3 
Pick Bot NOCAND
Scheduling SU(4) %vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
  LiveReg: %vreg0
  UpdateRegP: SU(4) %vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
  UpdateRegP: SU(3) %vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
  Ready @9c
  HWLGKM +1x105u
  BotQ.A BotLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
BotQ.P: 3 
Cycle: 14 BotQ.A
Pick Bot NOCAND
Scheduling SU(3) %vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
  Ready @14c
  HWLGKM +1x105u
  BotQ.A BotLatency SU(3) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 8
  Executed: 15c
  Critical: 8c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(2) %vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
  LiveReg: SGPR0
  LiveReg: SGPR1
  Ready @15c
BotQ.A @15c
  Retired: 8
  Executed: 15c
  Critical: 8c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
*** Final schedule for BB#0 ***
SU(2):   %vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
SU(3):   %vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
SU(4):   %vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
SU(0):   %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
SU(1):   %vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
SU(8):   %vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
SU(5):   %vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
SU(6):   %vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
SU(7):   %vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
SU(9):   %vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
SU(10):   BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14

********** INTERVALS **********
EXEC_LO EMPTY
EXEC_HI EMPTY
VCC_LO [192r,192d:0)  0@192r
VCC_HI [192r,192d:0)  0@192r
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,84r:0)  0@0B-phi
VGPR0 [0B,88r:0)  0@0B-phi
%vreg0 [48r,80r:0)  0@48r
%vreg2 [88r,192r:0)  0@88r
%vreg3 [84r,184r:0)  0@84r
%vreg4 [64r,184r:0)  0@64r
%vreg6 [184r,192r:0)  0@184r
%vreg14 [80r,176r:0)[176r,208r:1)[208r,272r:2)  0@80r 1@176r 2@208r L0004 [208r,272r:0)  0@208r L0003 [80r,272r:0)  0@80r L0008 [176r,272r:0)  0@176r
%vreg19 [192r,200r:0)[200r,272r:1)  0@192r 1@200r L0001 [192r,272r:0)  0@192r L0002 [200r,272r:0)  0@200r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
84B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
88B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
184B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
192B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
200B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
208B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
84B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
88B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
184B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
192B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
200B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
208B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After SI Fix CF Live Intervals ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
84B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
88B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
184B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
192B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
200B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
208B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.


block-frequency: Global1
========================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: Global1
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
84B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
88B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
184B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
192B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
200B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
208B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
84B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
88B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
184B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
192B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
200B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
208B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
84B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
88B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
184B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
192B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
200B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
208B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
84B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
88B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
184B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
192B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
200B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
208B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.

********** GREEDY REGISTER ALLOCATION **********
********** Function: Global1
********** Compute Spill Weights **********
********** Function: Global1
********** INTERVALS **********
EXEC_LO EMPTY
EXEC_HI EMPTY
VCC_LO [192r,192d:0)  0@192r
VCC_HI [192r,192d:0)  0@192r
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,84r:0)  0@0B-phi
VGPR0 [0B,88r:0)  0@0B-phi
%vreg0 [48r,80r:0)  0@48r
%vreg2 [88r,192r:0)  0@88r
%vreg3 [84r,184r:0)  0@84r
%vreg4 [64r,184r:0)  0@64r
%vreg6 [184r,192r:0)  0@184r
%vreg14 [80r,176r:0)[176r,208r:1)[208r,272r:2)  0@80r 1@176r 2@208r L0004 [208r,272r:0)  0@208r L0003 [80r,272r:0)  0@80r L0008 [176r,272r:0)  0@176r
%vreg19 [192r,200r:0)[200r,272r:1)  0@192r 1@200r L0001 [192r,272r:0)  0@192r L0002 [200r,272r:0)  0@200r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
84B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
88B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
184B		%vreg6<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
192B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
200B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
208B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM

# End machine code for function Global1.


selectOrSplit SReg_64:%vreg0 [48r,80r:0)  0@48r w=7.013889e-03
AllocationOrder(SReg_64) = [ %SGPR0_SGPR1 %SGPR2_SGPR3 %SGPR4_SGPR5 %SGPR6_SGPR7 %SGPR8_SGPR9 %SGPR10_SGPR11 %SGPR12_SGPR13 %SGPR14_SGPR15 %SGPR16_SGPR17 %SGPR18_SGPR19 %SGPR20_SGPR21 %SGPR22_SGPR23 %SGPR24_SGPR25 %SGPR26_SGPR27 %SGPR28_SGPR29 %SGPR30_SGPR31 %SGPR32_SGPR33 %SGPR34_SGPR35 %SGPR36_SGPR37 %SGPR38_SGPR39 %SGPR40_SGPR41 %SGPR42_SGPR43 %SGPR44_SGPR45 %SGPR46_SGPR47 %SGPR48_SGPR49 %SGPR50_SGPR51 %SGPR52_SGPR53 %SGPR54_SGPR55 %SGPR56_SGPR57 %SGPR58_SGPR59 %SGPR60_SGPR61 %SGPR62_SGPR63 %SGPR64_SGPR65 %SGPR66_SGPR67 %SGPR68_SGPR69 %SGPR70_SGPR71 %SGPR72_SGPR73 %SGPR74_SGPR75 %SGPR76_SGPR77 %SGPR78_SGPR79 %SGPR80_SGPR81 %SGPR82_SGPR83 %SGPR84_SGPR85 %SGPR86_SGPR87 %SGPR88_SGPR89 %SGPR90_SGPR91 %SGPR92_SGPR93 %SGPR94_SGPR95 %SGPR96_SGPR97 %SGPR98_SGPR99 %SGPR100_SGPR101 %VCC ]
hints: %SGPR0_SGPR1
assigning %vreg0 to %SGPR0_SGPR1: SGPR0 [48r,80r:0)  0@48r SGPR1 [48r,80r:0)  0@48r

selectOrSplit SReg_32:%vreg3 [84r,184r:0)  0@84r w=4.040000e-03
AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
hints: %SGPR4
assigning %vreg3 to %SGPR4: SGPR4 [84r,184r:0)  0@84r

selectOrSplit VGPR_32:%vreg2 [88r,192r:0)  0@88r w=4.007936e-03
AllocationOrder(VGPR_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 ]
hints: %VGPR0
assigning %vreg2 to %VGPR0: VGPR0 [88r,192r:0)  0@88r

selectOrSplit SGPR_32:%vreg4 [64r,184r:0)  0@64r w=3.846154e-03
AllocationOrder(SGPR_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 ]
assigning %vreg4 to %SGPR2: SGPR2 [64r,184r:0)  0@64r

selectOrSplit SReg_128:%vreg14 [80r,176r:0)[176r,208r:1)[208r,272r:2)  0@80r 1@176r 2@208r L0004 [208r,272r:0)  0@208r L0003 [80r,272r:0)  0@80r L0008 [176r,272r:0)  0@176r w=1.013513e-02
AllocationOrder(SReg_128) = [ %SGPR0_SGPR1_SGPR2_SGPR3 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR12_SGPR13_SGPR14_SGPR15 %SGPR16_SGPR17_SGPR18_SGPR19 %SGPR20_SGPR21_SGPR22_SGPR23 %SGPR24_SGPR25_SGPR26_SGPR27 %SGPR28_SGPR29_SGPR30_SGPR31 %SGPR32_SGPR33_SGPR34_SGPR35 %SGPR36_SGPR37_SGPR38_SGPR39 %SGPR40_SGPR41_SGPR42_SGPR43 %SGPR44_SGPR45_SGPR46_SGPR47 %SGPR48_SGPR49_SGPR50_SGPR51 %SGPR52_SGPR53_SGPR54_SGPR55 %SGPR56_SGPR57_SGPR58_SGPR59 %SGPR60_SGPR61_SGPR62_SGPR63 %SGPR64_SGPR65_SGPR66_SGPR67 %SGPR68_SGPR69_SGPR70_SGPR71 %SGPR72_SGPR73_SGPR74_SGPR75 %SGPR76_SGPR77_SGPR78_SGPR79 %SGPR80_SGPR81_SGPR82_SGPR83 %SGPR84_SGPR85_SGPR86_SGPR87 %SGPR88_SGPR89_SGPR90_SGPR91 %SGPR92_SGPR93_SGPR94_SGPR95 %SGPR96_SGPR97_SGPR98_SGPR99 ]
assigning %vreg14 to %SGPR8_SGPR9_SGPR10_SGPR11: SGPR8 [80r,272r:0)  0@80r SGPR9 [80r,272r:0)  0@80r SGPR10 [208r,272r:0)  0@208r SGPR11 [176r,272r:0)  0@176r

selectOrSplit SReg_32:%vreg6 [184r,192r:0)  0@184r w=inf
assigning %vreg6 to %SGPR0: SGPR0 [184r,192r:0)  0@184r

selectOrSplit VReg_64:%vreg19 [192r,200r:0)[200r,272r:1)  0@192r 1@200r L0001 [192r,272r:0)  0@192r L0002 [200r,272r:0)  0@200r w=8.333334e-03
AllocationOrder(VReg_64) = [ %VGPR0_VGPR1 %VGPR1_VGPR2 %VGPR2_VGPR3 %VGPR3_VGPR4 %VGPR4_VGPR5 %VGPR5_VGPR6 %VGPR6_VGPR7 %VGPR7_VGPR8 %VGPR8_VGPR9 %VGPR9_VGPR10 %VGPR10_VGPR11 %VGPR11_VGPR12 %VGPR12_VGPR13 %VGPR13_VGPR14 %VGPR14_VGPR15 %VGPR15_VGPR16 %VGPR16_VGPR17 %VGPR17_VGPR18 %VGPR18_VGPR19 %VGPR19_VGPR20 %VGPR20_VGPR21 %VGPR21_VGPR22 %VGPR22_VGPR23 %VGPR23_VGPR24 %VGPR24_VGPR25 %VGPR25_VGPR26 %VGPR26_VGPR27 %VGPR27_VGPR28 %VGPR28_VGPR29 %VGPR29_VGPR30 %VGPR30_VGPR31 %VGPR31_VGPR32 %VGPR32_VGPR33 %VGPR33_VGPR34 %VGPR34_VGPR35 %VGPR35_VGPR36 %VGPR36_VGPR37 %VGPR37_VGPR38 %VGPR38_VGPR39 %VGPR39_VGPR40 %VGPR40_VGPR41 %VGPR41_VGPR42 %VGPR42_VGPR43 %VGPR43_VGPR44 %VGPR44_VGPR45 %VGPR45_VGPR46 %VGPR46_VGPR47 %VGPR47_VGPR48 %VGPR48_VGPR49 %VGPR49_VGPR50 %VGPR50_VGPR51 %VGPR51_VGPR52 %VGPR52_VGPR53 %VGPR53_VGPR54 %VGPR54_VGPR55 %VGPR55_VGPR56 %VGPR56_VGPR57 %VGPR57_VGPR58 %VGPR58_VGPR59 %VGPR59_VGPR60 %VGPR60_VGPR61 %VGPR61_VGPR62 %VGPR62_VGPR63 %VGPR63_VGPR64 %VGPR64_VGPR65 %VGPR65_VGPR66 %VGPR66_VGPR67 %VGPR67_VGPR68 %VGPR68_VGPR69 %VGPR69_VGPR70 %VGPR70_VGPR71 %VGPR71_VGPR72 %VGPR72_VGPR73 %VGPR73_VGPR74 %VGPR74_VGPR75 %VGPR75_VGPR76 %VGPR76_VGPR77 %VGPR77_VGPR78 %VGPR78_VGPR79 %VGPR79_VGPR80 %VGPR80_VGPR81 %VGPR81_VGPR82 %VGPR82_VGPR83 %VGPR83_VGPR84 %VGPR84_VGPR85 %VGPR85_VGPR86 %VGPR86_VGPR87 %VGPR87_VGPR88 %VGPR88_VGPR89 %VGPR89_VGPR90 %VGPR90_VGPR91 %VGPR91_VGPR92 %VGPR92_VGPR93 %VGPR93_VGPR94 %VGPR94_VGPR95 %VGPR95_VGPR96 %VGPR96_VGPR97 %VGPR97_VGPR98 %VGPR98_VGPR99 %VGPR99_VGPR100 %VGPR100_VGPR101 %VGPR101_VGPR102 %VGPR102_VGPR103 %VGPR103_VGPR104 %VGPR104_VGPR105 %VGPR105_VGPR106 %VGPR106_VGPR107 %VGPR107_VGPR108 %VGPR108_VGPR109 %VGPR109_VGPR110 %VGPR110_VGPR111 %VGPR111_VGPR112 %VGPR112_VGPR113 %VGPR113_VGPR114 %VGPR114_VGPR115 %VGPR115_VGPR116 %VGPR116_VGPR117 %VGPR117_VGPR118 %VGPR118_VGPR119 %VGPR119_VGPR120 %VGPR120_VGPR121 %VGPR121_VGPR122 %VGPR122_VGPR123 %VGPR123_VGPR124 %VGPR124_VGPR125 %VGPR125_VGPR126 %VGPR126_VGPR127 %VGPR127_VGPR128 %VGPR128_VGPR129 %VGPR129_VGPR130 %VGPR130_VGPR131 %VGPR131_VGPR132 %VGPR132_VGPR133 %VGPR133_VGPR134 %VGPR134_VGPR135 %VGPR135_VGPR136 %VGPR136_VGPR137 %VGPR137_VGPR138 %VGPR138_VGPR139 %VGPR139_VGPR140 %VGPR140_VGPR141 %VGPR141_VGPR142 %VGPR142_VGPR143 %VGPR143_VGPR144 %VGPR144_VGPR145 %VGPR145_VGPR146 %VGPR146_VGPR147 %VGPR147_VGPR148 %VGPR148_VGPR149 %VGPR149_VGPR150 %VGPR150_VGPR151 %VGPR151_VGPR152 %VGPR152_VGPR153 %VGPR153_VGPR154 %VGPR154_VGPR155 %VGPR155_VGPR156 %VGPR156_VGPR157 %VGPR157_VGPR158 %VGPR158_VGPR159 %VGPR159_VGPR160 %VGPR160_VGPR161 %VGPR161_VGPR162 %VGPR162_VGPR163 %VGPR163_VGPR164 %VGPR164_VGPR165 %VGPR165_VGPR166 %VGPR166_VGPR167 %VGPR167_VGPR168 %VGPR168_VGPR169 %VGPR169_VGPR170 %VGPR170_VGPR171 %VGPR171_VGPR172 %VGPR172_VGPR173 %VGPR173_VGPR174 %VGPR174_VGPR175 %VGPR175_VGPR176 %VGPR176_VGPR177 %VGPR177_VGPR178 %VGPR178_VGPR179 %VGPR179_VGPR180 %VGPR180_VGPR181 %VGPR181_VGPR182 %VGPR182_VGPR183 %VGPR183_VGPR184 %VGPR184_VGPR185 %VGPR185_VGPR186 %VGPR186_VGPR187 %VGPR187_VGPR188 %VGPR188_VGPR189 %VGPR189_VGPR190 %VGPR190_VGPR191 %VGPR191_VGPR192 %VGPR192_VGPR193 %VGPR193_VGPR194 %VGPR194_VGPR195 %VGPR195_VGPR196 %VGPR196_VGPR197 %VGPR197_VGPR198 %VGPR198_VGPR199 %VGPR199_VGPR200 %VGPR200_VGPR201 %VGPR201_VGPR202 %VGPR202_VGPR203 %VGPR203_VGPR204 %VGPR204_VGPR205 %VGPR205_VGPR206 %VGPR206_VGPR207 %VGPR207_VGPR208 %VGPR208_VGPR209 %VGPR209_VGPR210 %VGPR210_VGPR211 %VGPR211_VGPR212 %VGPR212_VGPR213 %VGPR213_VGPR214 %VGPR214_VGPR215 %VGPR215_VGPR216 %VGPR216_VGPR217 %VGPR217_VGPR218 %VGPR218_VGPR219 %VGPR219_VGPR220 %VGPR220_VGPR221 %VGPR221_VGPR222 %VGPR222_VGPR223 %VGPR223_VGPR224 %VGPR224_VGPR225 %VGPR225_VGPR226 %VGPR226_VGPR227 %VGPR227_VGPR228 %VGPR228_VGPR229 %VGPR229_VGPR230 %VGPR230_VGPR231 %VGPR231_VGPR232 %VGPR232_VGPR233 %VGPR233_VGPR234 %VGPR234_VGPR235 %VGPR235_VGPR236 %VGPR236_VGPR237 %VGPR237_VGPR238 %VGPR238_VGPR239 %VGPR239_VGPR240 %VGPR240_VGPR241 %VGPR241_VGPR242 %VGPR242_VGPR243 %VGPR243_VGPR244 %VGPR244_VGPR245 %VGPR245_VGPR246 %VGPR246_VGPR247 %VGPR247_VGPR248 %VGPR248_VGPR249 %VGPR249_VGPR250 %VGPR250_VGPR251 %VGPR251_VGPR252 %VGPR252_VGPR253 ]
assigning %vreg19 to %VGPR0_VGPR1: VGPR0 [192r,272r:0)  0@192r VGPR1 [200r,272r:0)  0@200r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: Global1
********** REGISTER MAP **********
[%vreg0 -> %SGPR0_SGPR1] SReg_64
[%vreg2 -> %VGPR0] VGPR_32
[%vreg3 -> %SGPR4] SReg_32
[%vreg4 -> %SGPR2] SGPR_32
[%vreg6 -> %SGPR0] SReg_32
[%vreg14 -> %SGPR8_SGPR9_SGPR10_SGPR11] SReg_128
[%vreg19 -> %VGPR0_VGPR1] VReg_64

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg14:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg14 SReg_64:%vreg0
84B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
88B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
176B		%vreg14:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg14
184B		%vreg6<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg6,%vreg3 SGPR_32:%vreg4
192B		%vreg19:sub0<def,read-undef> = V_ADD_I32_e32 %vreg6<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg19 SReg_32:%vreg6 VGPR_32:%vreg2
200B		%vreg19:sub1<def> = V_ASHRREV_I32_e32 31, %vreg19:sub0, %EXEC<imp-use>; VReg_64:%vreg19
208B		%vreg14:sub2<def> = S_MOV_B32 0; SReg_128:%vreg14
272B		BUFFER_STORE_BYTE_ADDR64 %vreg19:sub0, %vreg19, %vreg14, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9) VReg_64:%vreg19 SReg_128:%vreg14
288B		S_ENDPGM
> %SGPR0_SGPR1<def> = COPY %SGPR0_SGPR1
Deleting identity copy.
> %SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
> %SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
> %SGPR4<def> = COPY %SGPR4
Deleting identity copy.
> %VGPR0<def> = COPY %VGPR0
Deleting identity copy.
> %SGPR11<def> = S_MOV_B32 61440
> %SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
> %VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
> %SGPR10<def> = S_MOV_B32 0
> BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
> S_ENDPGM
# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
64B		%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
80B		%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
176B		%SGPR11<def> = S_MOV_B32 61440
184B		%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
192B		%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
200B		%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
208B		%SGPR10<def> = S_MOV_B32 0
272B		BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
288B		S_ENDPGM

# End machine code for function Global1.

********** Stack Slot Coloring **********
********** Function: Global1
# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.

******** Post-regalloc Machine LICM: Global1 ********
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.


block-frequency: Global1
========================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: Global1
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.

MCP: CopyPropagateBlock entry
# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.

Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: Global1
# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.


block-frequency: Global1
========================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: Global1
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.

********** COMPUTING STACKMAP LIVENESS: Global1 **********
# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR11<def> = S_MOV_B32 61440
	S_WAITCNT 127
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%SGPR10<def> = S_MOV_B32 0
	BUFFER_STORE_BYTE_ADDR64 %VGPR0, %VGPR0_VGPR1, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST1[%arrayidx(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function Global1.


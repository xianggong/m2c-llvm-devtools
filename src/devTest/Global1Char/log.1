Args: /home/xgong/Develop/llvm/build/bin/llc -march=amdgcn -mcpu=verde Global1Char.ll --print-after-all --debug 

Features:+promote-alloca,+fp64-denormals,
CPU:verde

Inliner visiting SCC: Global1: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
Inliner visiting SCC: llvm.r600.read.tgid.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1
Inliner visiting SCC: llvm.r600.read.local.size.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1
Inliner visiting SCC: llvm.r600.read.tidig.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1
Inliner visiting SCC: llvm.SI.m2s.get.uav.desc: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare <4 x i32> @llvm.SI.m2s.get.uav.desc(i32, i32)
Inliner visiting SCC: llvm.SI.if: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare { i1, i64 } @llvm.SI.if(i1)
Inliner visiting SCC: llvm.SI.else: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare { i1, i64 } @llvm.SI.else(i64)
Inliner visiting SCC: llvm.SI.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.break(i64)
Inliner visiting SCC: llvm.SI.if.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.if.break(i1, i64)
Inliner visiting SCC: llvm.SI.else.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.else.break(i64, i64)
Inliner visiting SCC: llvm.SI.loop: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i1 @llvm.SI.loop(i64)
Inliner visiting SCC: llvm.SI.end.cf: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare void @llvm.SI.end.cf(i64)
Inliner visiting SCC: INDIRECTNODE: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'Global1Char.ll'
target datalayout = "e-p:32:32-p1:32:32-p2:32:32-p3:32:32-p4:32:32-p5:32:32-p24:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64"
target triple = "amdgcn-unknown-m2s-unknown"

; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1

declare <4 x i32> @llvm.SI.m2s.get.uav.desc(i32, i32)

declare { i1, i64 } @llvm.SI.if(i1)

declare { i1, i64 } @llvm.SI.else(i64)

declare i64 @llvm.SI.break(i64)

declare i64 @llvm.SI.if.break(i1, i64)

declare i64 @llvm.SI.else.break(i64, i64)

declare i1 @llvm.SI.loop(i64)

declare void @llvm.SI.end.cf(i64)

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="verde" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "target-cpu"="verde" }
attributes #2 = { nounwind readnone }

!opencl.kernels = !{!0}
!llvm.ident = !{!6, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}

!0 = !{void (i8 addrspace(1)*)* @Global1, !1, !2, !3, !4, !5}
!1 = !{!"kernel_arg_addr_space", i32 1}
!2 = !{!"kernel_arg_access_qual", !"none"}
!3 = !{!"kernel_arg_type", !"char*"}
!4 = !{!"kernel_arg_base_type", !"char*"}
!5 = !{!"kernel_arg_type_qual", !""}
!6 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 73e976449b53bf91364bec5926194b37f7f08488) (https://github.com/llvm-mirror/llvm.git e48de91069450173c2d5abaad9da9b25920ef692)"}
!7 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 61690d9018c8da94a7812ae53d501af17f0cf265) (https://github.com/llvm-mirror/llvm.git 591adee23bf68ecae9fccd35c937dd03d15a054e)"}
!8 = !{!9, !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
********** Begin Constant Hoisting **********
********** Function: Global1
********** End Constant Hoisting **********
*** IR Dump After Constant Hoisting ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
32768bytes free in local memory.
SROA function: Global1
*** IR Dump After SROA ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
CGP: Found      local addrmode: [Base:%result + 1*%add.i]
*** IR Dump After CodeGen Prepare ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'Global1Char.ll'
target datalayout = "e-p:32:32-p1:32:32-p2:32:32-p3:32:32-p4:32:32-p5:32:32-p24:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64"
target triple = "amdgcn-unknown-m2s-unknown"

; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1

declare <4 x i32> @llvm.SI.m2s.get.uav.desc(i32, i32)

declare { i1, i64 } @llvm.SI.if(i1)

declare { i1, i64 } @llvm.SI.else(i64)

declare i64 @llvm.SI.break(i64)

declare i64 @llvm.SI.if.break(i1, i64)

declare i64 @llvm.SI.else.break(i64, i64)

declare i1 @llvm.SI.loop(i64)

declare void @llvm.SI.end.cf(i64)

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="verde" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "target-cpu"="verde" }
attributes #2 = { nounwind readnone }

!opencl.kernels = !{!0}
!llvm.ident = !{!6, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}

!0 = !{void (i8 addrspace(1)*)* @Global1, !1, !2, !3, !4, !5}
!1 = !{!"kernel_arg_addr_space", i32 1}
!2 = !{!"kernel_arg_access_qual", !"none"}
!3 = !{!"kernel_arg_type", !"char*"}
!4 = !{!"kernel_arg_base_type", !"char*"}
!5 = !{!"kernel_arg_type_qual", !""}
!6 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 73e976449b53bf91364bec5926194b37f7f08488) (https://github.com/llvm-mirror/llvm.git e48de91069450173c2d5abaad9da9b25920ef692)"}
!7 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 61690d9018c8da94a7812ae53d501af17f0cf265) (https://github.com/llvm-mirror/llvm.git 591adee23bf68ecae9fccd35c937dd03d15a054e)"}
!8 = !{!9, !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Lower invoke and unwind, for unwindless code generators ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Flatten the CFG ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Lower SwitchInst's to branches ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void
}
*** IR Dump After Structurize control flow ***
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  store i8 %conv, i8 addrspace(1)* %arrayidx, align 1, !tbaa !8
  ret void

Region tree of function Global1 after all region Pass:
Region tree:
[0] entry => <Function Return>
End region tree

Sinking iteration 0
*** IR Dump After Code sinking ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %uav.result = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 80)
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  %pac.arrayidx = call i8 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i8 addrspace(1)* %arrayidx, <4 x i32> %uav.result)
  store i8 %conv, i8 addrspace(1)* %pac.arrayidx
  ret void
}
[SafeStack] Function: Global1
[SafeStack]     safestack is not requested for this function
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %uav.result = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 80)
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  %pac.arrayidx = call i8 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i8 addrspace(1)* %arrayidx, <4 x i32> %uav.result)
  store i8 %conv, i8 addrspace(1)* %pac.arrayidx
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind
define void @Global1(i8 addrspace(1)* nocapture %result) #0 {
entry:
  %uav.result = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 80)
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %conv = trunc i32 %add.i to i8
  %arrayidx = getelementptr inbounds i8, i8 addrspace(1)* %result, i32 %add.i
  %pac.arrayidx = call i8 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i8 addrspace(1)* %arrayidx, <4 x i32> %uav.result)
  store i8 %conv, i8 addrspace(1)* %pac.arrayidx
  ret void
}
---- Branch Probability Info : Global1 ----

Computing probabilities for entry



=== Global1
Initial selection DAG: BB#0 'Global1:entry'
SelectionDAG has 24 nodes:
  0x2e9b8f0: ch = EntryToken

    0x2e9b8f0: <multiple use>
      0x2e9b8f0: <multiple use>
      0x2f026b0: v4i32 = Register %vreg2

    0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1]

    0x2f02900: i32 = Constant<0>

  0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1]

    0x2f02a28: <multiple use>
    0x2f02b50: i32 = TargetConstant<5355>

    0x2f02c78: i32 = Constant<1>

    0x2f02da0: i32 = Constant<80>

  0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2]

      0x2f04560: i32 = TargetConstant<3265>

    0x2f04688: i32 = llvm.r600.read.tidig.x 0x2f04560 [ORD=6]

        0x2f03240: i32 = TargetConstant<3256>

      0x2f03368: i32 = llvm.r600.read.local.size.x 0x2f03240 [ORD=4]

        0x2f02ff0: i32 = TargetConstant<3262>

      0x2f03118: i32 = llvm.r600.read.tgid.x 0x2f02ff0 [ORD=3]

    0x2f03490: i32 = mul 0x2f03368, 0x2f03118 [ORD=5]

  0x2f047b0: i32 = add 0x2f04688, 0x2f03490 [ORD=7]

    0x2f02ec8: <multiple use>
    0x2f04b28: i32 = TargetConstant<5357>

      0x2f02a28: <multiple use>
      0x2f047b0: <multiple use>
    0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9]

    0x2f02ec8: <multiple use>
  0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10]

      0x2f04c50: <multiple use>
        0x2f047b0: <multiple use>
      0x2f048d8: i8 = truncate 0x2f047b0 [ORD=8]

      0x2f04c50: <multiple use>
      0x2f04d78: i32 = undef

    0x2f04ea0: ch = store 0x2f04c50:1, 0x2f048d8, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)]> [ORD=11]

  0x2f04fc8: ch = RET_FLAG 0x2f04ea0 [ORD=12]



Combining: 0x2f04fc8: ch = RET_FLAG 0x2f04ea0 [ORD=12]

Combining: 0x2f04ea0: ch = store 0x2f04c50:1, 0x2f048d8, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)]> [ORD=11]
 ... into: 0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11]

Combining: 0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12]

Combining: 0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11]

Combining: 0x2f04d78: i32 = undef

Combining: 0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10]

Combining: 0x2f04b28: i32 = TargetConstant<5357>

Combining: 0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9]

Combining: 0x2f047b0: i32 = add 0x2f04688, 0x2f03490 [ORD=7]

Combining: 0x2f04688: i32 = llvm.r600.read.tidig.x 0x2f04560 [ORD=6]

Combining: 0x2f04560: i32 = TargetConstant<3265>

Combining: 0x2f03490: i32 = mul 0x2f03368, 0x2f03118 [ORD=5]

Combining: 0x2f03368: i32 = llvm.r600.read.local.size.x 0x2f03240 [ORD=4]

Combining: 0x2f03240: i32 = TargetConstant<3256>

Combining: 0x2f03118: i32 = llvm.r600.read.tgid.x 0x2f02ff0 [ORD=3]

Combining: 0x2f02ff0: i32 = TargetConstant<3262>

Combining: 0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2]

Combining: 0x2f02da0: i32 = Constant<80>

Combining: 0x2f02c78: i32 = Constant<1>

Combining: 0x2f02b50: i32 = TargetConstant<5355>

Combining: 0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1]

Combining: 0x2f02900: i32 = Constant<0>

Combining: 0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1]

Combining: 0x2f026b0: v4i32 = Register %vreg2

Combining: 0x2e9b8f0: ch = EntryToken
Optimized lowered selection DAG: BB#0 'Global1:entry'
SelectionDAG has 23 nodes:
  0x2e9b8f0: ch = EntryToken

    0x2e9b8f0: <multiple use>
      0x2e9b8f0: <multiple use>
      0x2f026b0: v4i32 = Register %vreg2

    0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1]

    0x2f02900: i32 = Constant<0>

  0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1]

    0x2f02a28: <multiple use>
    0x2f02b50: i32 = TargetConstant<5355>

    0x2f02c78: i32 = Constant<1>

    0x2f02da0: i32 = Constant<80>

  0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2]

      0x2f04560: i32 = TargetConstant<3265>

    0x2f04688: i32 = llvm.r600.read.tidig.x 0x2f04560 [ORD=6]

        0x2f03240: i32 = TargetConstant<3256>

      0x2f03368: i32 = llvm.r600.read.local.size.x 0x2f03240 [ORD=4]

        0x2f02ff0: i32 = TargetConstant<3262>

      0x2f03118: i32 = llvm.r600.read.tgid.x 0x2f02ff0 [ORD=3]

    0x2f03490: i32 = mul 0x2f03368, 0x2f03118 [ORD=5]

  0x2f047b0: i32 = add 0x2f04688, 0x2f03490 [ORD=7]

    0x2f02ec8: <multiple use>
    0x2f04b28: i32 = TargetConstant<5357>

      0x2f02a28: <multiple use>
      0x2f047b0: <multiple use>
    0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9]

    0x2f02ec8: <multiple use>
  0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10]

      0x2f04c50: <multiple use>
      0x2f047b0: <multiple use>
      0x2f04c50: <multiple use>
      0x2f04d78: i32 = undef

    0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11]

  0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12]


Legally typed node: 0x2f04d78: i32 = undef [ID=0]

Legally typed node: 0x2f04b28: i32 = TargetConstant<5357> [ID=0]

Legally typed node: 0x2f04560: i32 = TargetConstant<3265> [ID=0]

Legally typed node: 0x2f04688: i32 = llvm.r600.read.tidig.x 0x2f04560 [ORD=6] [ID=0]

Legally typed node: 0x2f03240: i32 = TargetConstant<3256> [ID=0]

Legally typed node: 0x2f03368: i32 = llvm.r600.read.local.size.x 0x2f03240 [ORD=4] [ID=0]

Legally typed node: 0x2f02ff0: i32 = TargetConstant<3262> [ID=0]

Legally typed node: 0x2f03118: i32 = llvm.r600.read.tgid.x 0x2f02ff0 [ORD=3] [ID=0]

Legally typed node: 0x2f03490: i32 = mul 0x2f03368, 0x2f03118 [ORD=5] [ID=0]

Legally typed node: 0x2f047b0: i32 = add 0x2f04688, 0x2f03490 [ORD=7] [ID=0]

Legally typed node: 0x2f02da0: i32 = Constant<80> [ID=0]

Legally typed node: 0x2f02c78: i32 = Constant<1> [ID=0]

Legally typed node: 0x2f02b50: i32 = TargetConstant<5355> [ID=0]

Legally typed node: 0x2f02900: i32 = Constant<0> [ID=0]

Legally typed node: 0x2f026b0: v4i32 = Register %vreg2 [ID=0]

Legally typed node: 0x2e9b8f0: ch = EntryToken [ID=0]

Legally typed node: 0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=0]

Legally typed node: 0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1] [ID=0]

Legally typed node: 0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2] [ID=0]

Legally typed node: 0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9] [ID=0]

Legally typed node: 0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10] [ID=0]

Legally typed node: 0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11] [ID=0]

Legally typed node: 0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12] [ID=0]

Legally typed node: 0x7ffd1d1c6a70: ch = handlenode 0x2f04fc8 [ID=0]

Type-legalized selection DAG: BB#0 'Global1:entry'
SelectionDAG has 23 nodes:
  0x2e9b8f0: ch = EntryToken [ID=-3]

    0x2e9b8f0: <multiple use>
      0x2e9b8f0: <multiple use>
      0x2f026b0: v4i32 = Register %vreg2 [ID=-3]

    0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=-3]

    0x2f02900: i32 = Constant<0> [ID=-3]

  0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1] [ID=-3]

    0x2f02a28: <multiple use>
    0x2f02b50: i32 = TargetConstant<5355> [ID=-3]

    0x2f02c78: i32 = Constant<1> [ID=-3]

    0x2f02da0: i32 = Constant<80> [ID=-3]

  0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2] [ID=-3]

      0x2f04560: i32 = TargetConstant<3265> [ID=-3]

    0x2f04688: i32 = llvm.r600.read.tidig.x 0x2f04560 [ORD=6] [ID=-3]

        0x2f03240: i32 = TargetConstant<3256> [ID=-3]

      0x2f03368: i32 = llvm.r600.read.local.size.x 0x2f03240 [ORD=4] [ID=-3]

        0x2f02ff0: i32 = TargetConstant<3262> [ID=-3]

      0x2f03118: i32 = llvm.r600.read.tgid.x 0x2f02ff0 [ORD=3] [ID=-3]

    0x2f03490: i32 = mul 0x2f03368, 0x2f03118 [ORD=5] [ID=-3]

  0x2f047b0: i32 = add 0x2f04688, 0x2f03490 [ORD=7] [ID=-3]

    0x2f02ec8: <multiple use>
    0x2f04b28: i32 = TargetConstant<5357> [ID=-3]

      0x2f02a28: <multiple use>
      0x2f047b0: <multiple use>
    0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9] [ID=-3]

    0x2f02ec8: <multiple use>
  0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10] [ID=-3]

      0x2f04c50: <multiple use>
      0x2f047b0: <multiple use>
      0x2f04c50: <multiple use>
      0x2f04d78: i32 = undef [ID=-3]

    0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11] [ID=-3]

  0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12] [ID=-3]



Legalizing: 0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12] [ID=22]

Legalizing: 0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11] [ID=21]

Legalizing: 0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10] [ID=20]

Legalizing: 0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9] [ID=19]

Legalizing: 0x2f047b0: i32 = add 0x2f04688, 0x2f03490 [ORD=7] [ID=18]

Legalizing: 0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2] [ID=17]

Legalizing: 0x2f03490: i32 = mul 0x2f03368, 0x2f03118 [ORD=5] [ID=16]

Legalizing: 0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1] [ID=15]

Legalizing: 0x2f04688: i32 = llvm.r600.read.tidig.x 0x2f04560 [ORD=6] [ID=14]
 ... replacing: 0x2f04688: i32 = llvm.r600.read.tidig.x 0x2f04560 [ORD=6] [ID=14]
     with:      0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8

Legalizing: 0x2f03368: i32 = llvm.r600.read.local.size.x 0x2f03240 [ORD=4] [ID=13]
 ... replacing: 0x2f03368: i32 = llvm.r600.read.local.size.x 0x2f03240 [ORD=4] [ID=13]
     with:      0x2f05d70: i32 = umin 0x2f05b20, 0x2f05c48 [ORD=4]

Legalizing: 0x2f03118: i32 = llvm.r600.read.tgid.x 0x2f02ff0 [ORD=3] [ID=12]
 ... replacing: 0x2f03118: i32 = llvm.r600.read.tgid.x 0x2f02ff0 [ORD=3] [ID=12]
     with:      0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368

Legalizing: 0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=11]

Legalizing: 0x2f04d78: i32 = undef [ID=10]

Legalizing: 0x2f04b28: i32 = TargetConstant<5357> [ID=9]

Legalizing: 0x2f02da0: i32 = Constant<80> [ID=5]

Legalizing: 0x2f02c78: i32 = Constant<1> [ID=4]

Legalizing: 0x2f02b50: i32 = TargetConstant<5355> [ID=3]

Legalizing: 0x2f02900: i32 = Constant<0> [ID=2]

Legalizing: 0x2f026b0: v4i32 = Register %vreg2 [ID=1]

Legalizing: 0x2e9b8f0: ch = EntryToken [ID=0]

Legalizing: 0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368

Legalizing: 0x2f03368: i32 = Register %vreg4

Legalizing: 0x2f05d70: i32 = umin 0x2f05b20, 0x2f05c48 [ORD=4]

Legalizing: 0x2f05c48: i32 = Constant<65535>

Legalizing: 0x2f05b20: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f05218, 0x2f05340<LD4[<unknown>](invariant)> [ORD=4]

Legalizing: 0x2f05340: i32 = Constant<4>

Legalizing: 0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4]

Legalizing: 0x2f04688: v4i32 = Register %vreg1

Legalizing: 0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8

Legalizing: 0x2f048d8: i32 = Register %vreg3
Legalized selection DAG: BB#0 'Global1:entry'
SelectionDAG has 27 nodes:
  0x2e9b8f0: ch = EntryToken [ID=0]

    0x2e9b8f0: <multiple use>
      0x2e9b8f0: <multiple use>
      0x2f026b0: v4i32 = Register %vreg2 [ID=1]

    0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=11]

    0x2f02900: i32 = Constant<0> [ID=2]

  0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1] [ID=15]

    0x2f02a28: <multiple use>
    0x2f02b50: i32 = TargetConstant<5355> [ID=3]

    0x2f02c78: i32 = Constant<1> [ID=4]

    0x2f02da0: i32 = Constant<80> [ID=5]

  0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2] [ID=17]

      0x2e9b8f0: <multiple use>
      0x2f048d8: i32 = Register %vreg3

    0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8

          0x2e9b8f0: <multiple use>
            0x2e9b8f0: <multiple use>
            0x2f04688: v4i32 = Register %vreg1

          0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4]

          0x2f05340: i32 = Constant<4>

        0x2f05b20: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f05218, 0x2f05340<LD4[<unknown>](invariant)> [ORD=4]

        0x2f05c48: i32 = Constant<65535>

      0x2f05d70: i32 = umin 0x2f05b20, 0x2f05c48 [ORD=4]

        0x2e9b8f0: <multiple use>
        0x2f03368: i32 = Register %vreg4

      0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368

    0x2f03490: i32 = mul 0x2f05d70, 0x2f05e98 [ORD=5] [ID=16]

  0x2f047b0: i32 = add 0x2f04ea0, 0x2f03490 [ORD=7] [ID=18]

    0x2f02ec8: <multiple use>
    0x2f04b28: i32 = TargetConstant<5357> [ID=9]

      0x2f02a28: <multiple use>
      0x2f047b0: <multiple use>
    0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9] [ID=19]

    0x2f02ec8: <multiple use>
  0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10] [ID=20]

      0x2f04c50: <multiple use>
      0x2f047b0: <multiple use>
      0x2f04c50: <multiple use>
      0x2f04d78: i32 = undef [ID=10]

    0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11] [ID=21]

  0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12] [ID=22]



Legalizing: 0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368

Combining: 0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368

Legalizing: 0x2f03368: i32 = Register %vreg4

Combining: 0x2f03368: i32 = Register %vreg4

Legalizing: 0x2f05d70: i32 = umin 0x2f05b20, 0x2f05c48 [ORD=4]

Combining: 0x2f05d70: i32 = umin 0x2f05b20, 0x2f05c48 [ORD=4]

Legalizing: 0x2f05c48: i32 = Constant<65535>

Combining: 0x2f05c48: i32 = Constant<65535>

Legalizing: 0x2f05b20: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f05218, 0x2f05340<LD4[<unknown>](invariant)> [ORD=4]

Combining: 0x2f05b20: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f05218, 0x2f05340<LD4[<unknown>](invariant)> [ORD=4]

Legalizing: 0x2f05340: i32 = Constant<4>

Combining: 0x2f05340: i32 = Constant<4>

Legalizing: 0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4]

Combining: 0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4]

Legalizing: 0x2f04688: v4i32 = Register %vreg1

Combining: 0x2f04688: v4i32 = Register %vreg1

Legalizing: 0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8

Combining: 0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8

Legalizing: 0x2f048d8: i32 = Register %vreg3

Combining: 0x2f048d8: i32 = Register %vreg3

Legalizing: 0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12] [ID=22]

Combining: 0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12] [ID=22]

Legalizing: 0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11] [ID=21]

Combining: 0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11] [ID=21]

Legalizing: 0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10] [ID=20]

Combining: 0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10] [ID=20]

Legalizing: 0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9] [ID=19]

Combining: 0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9] [ID=19]

Legalizing: 0x2f047b0: i32 = add 0x2f04ea0, 0x2f03490 [ORD=7] [ID=18]

Combining: 0x2f047b0: i32 = add 0x2f04ea0, 0x2f03490 [ORD=7] [ID=18]

Legalizing: 0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2] [ID=17]

Combining: 0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2] [ID=17]

Legalizing: 0x2f03490: i32 = mul 0x2f05d70, 0x2f05e98 [ORD=5] [ID=16]

Combining: 0x2f03490: i32 = mul 0x2f05d70, 0x2f05e98 [ORD=5] [ID=16]

Legalizing: 0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1] [ID=15]

Combining: 0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1] [ID=15]

Legalizing: 0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=11]

Combining: 0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=11]

Legalizing: 0x2f04d78: i32 = undef [ID=10]

Combining: 0x2f04d78: i32 = undef [ID=10]

Legalizing: 0x2f04b28: i32 = TargetConstant<5357> [ID=9]

Combining: 0x2f04b28: i32 = TargetConstant<5357> [ID=9]

Legalizing: 0x2f02da0: i32 = Constant<80> [ID=5]

Combining: 0x2f02da0: i32 = Constant<80> [ID=5]

Legalizing: 0x2f02c78: i32 = Constant<1> [ID=4]

Combining: 0x2f02c78: i32 = Constant<1> [ID=4]

Legalizing: 0x2f02b50: i32 = TargetConstant<5355> [ID=3]

Combining: 0x2f02b50: i32 = TargetConstant<5355> [ID=3]

Legalizing: 0x2f02900: i32 = Constant<0> [ID=2]

Combining: 0x2f02900: i32 = Constant<0> [ID=2]

Legalizing: 0x2f026b0: v4i32 = Register %vreg2 [ID=1]

Combining: 0x2f026b0: v4i32 = Register %vreg2 [ID=1]

Legalizing: 0x2e9b8f0: ch = EntryToken [ID=0]

Combining: 0x2e9b8f0: ch = EntryToken [ID=0]
Optimized legalized selection DAG: BB#0 'Global1:entry'
SelectionDAG has 27 nodes:
  0x2e9b8f0: ch = EntryToken [ID=0]

    0x2e9b8f0: <multiple use>
      0x2e9b8f0: <multiple use>
      0x2f026b0: v4i32 = Register %vreg2 [ID=1]

    0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=11]

    0x2f02900: i32 = Constant<0> [ID=2]

  0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1] [ID=15]

    0x2f02a28: <multiple use>
    0x2f02b50: i32 = TargetConstant<5355> [ID=3]

    0x2f02c78: i32 = Constant<1> [ID=4]

    0x2f02da0: i32 = Constant<80> [ID=5]

  0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2] [ID=17]

      0x2e9b8f0: <multiple use>
      0x2f048d8: i32 = Register %vreg3

    0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8

          0x2e9b8f0: <multiple use>
            0x2e9b8f0: <multiple use>
            0x2f04688: v4i32 = Register %vreg1

          0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4]

          0x2f05340: i32 = Constant<4>

        0x2f05b20: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f05218, 0x2f05340<LD4[<unknown>](invariant)> [ORD=4]

        0x2f05c48: i32 = Constant<65535>

      0x2f05d70: i32 = umin 0x2f05b20, 0x2f05c48 [ORD=4]

        0x2e9b8f0: <multiple use>
        0x2f03368: i32 = Register %vreg4

      0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368

    0x2f03490: i32 = mul 0x2f05d70, 0x2f05e98 [ORD=5] [ID=16]

  0x2f047b0: i32 = add 0x2f04ea0, 0x2f03490 [ORD=7] [ID=18]

    0x2f02ec8: <multiple use>
    0x2f04b28: i32 = TargetConstant<5357> [ID=9]

      0x2f02a28: <multiple use>
      0x2f047b0: <multiple use>
    0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9] [ID=19]

    0x2f02ec8: <multiple use>
  0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10] [ID=20]

      0x2f04c50: <multiple use>
      0x2f047b0: <multiple use>
      0x2f04c50: <multiple use>
      0x2f04d78: i32 = undef [ID=10]

    0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11] [ID=21]

  0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12] [ID=22]


===== Instruction selection begins: BB#0 'entry'
ISEL: Starting pattern match on root node: 0x2f04fc8: ch = RET_FLAG 0x2f050f0 [ORD=12] [ID=26]

  Morphed node: 0x2f04fc8: ch = S_ENDPGM 0x2f050f0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f050f0: ch = store 0x2f04c50:1, 0x2f047b0, 0x2f04c50, 0x2f04d78<ST1[%pac.arrayidx(addrspace=1)], trunc to i8> [ORD=11] [ID=25]

  Initial Opcode index to 2633
  Match failed at index 2648
  Continuing at 2675
  Morphed node: 0x2f050f0: ch = BUFFER_STORE_BYTE_OFFEN 0x2f047b0, 0x2f04a00, 0x2f02ec8, 0x2f02ff0, 0x2f02ff0, 0x2f03240, 0x2f04560, 0x2f04560, 0x2f04c50:1<Mem:ST1[%pac.arrayidx(addrspace=1)]> [ORD=11]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f04c50: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x2f02ec8:1, 0x2f04b28, 0x2f04a00, 0x2f02ec8 [ORD=10] [ID=24]

  Initial Opcode index to 4087
  Skipped scope entry (due to false predicate) at index 4091, continuing at 4818
  Skipped scope entry (due to false predicate) at index 4819, continuing at 4842
  Skipped scope entry (due to false predicate) at index 4843, continuing at 4866
  Skipped scope entry (due to false predicate) at index 4867, continuing at 4882
  Skipped scope entry (due to false predicate) at index 4883, continuing at 4900
  Skipped scope entry (due to false predicate) at index 4901, continuing at 4918
  Morphed node: 0x2f04c50: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x2f04a00, 0x2f02ec8, 0x2f02ec8:1 [ORD=10]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f04a00: i32 = add 0x2f02a28, 0x2f047b0 [ORD=9] [ID=23]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x2f04a00: i32 = S_ADD_I32 0x2f02a28, 0x2f047b0 [ORD=9]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f047b0: i32 = add 0x2f04ea0, 0x2f03490 [ORD=7] [ID=22]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x2f047b0: i32 = S_ADD_I32 0x2f04ea0, 0x2f03490 [ORD=7]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f03490: i32 = mul 0x2f05d70, 0x2f05e98 [ORD=5] [ID=21]

  Initial Opcode index to 42971
  Morphed node: 0x2f03490: i32 = S_MUL_I32 0x2f05d70, 0x2f05e98 [ORD=5]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f05d70: i32 = umin 0x2f05b20, 0x2f05c48 [ORD=4] [ID=20]

  Initial Opcode index to 44178
  Skipped scope entry (due to false predicate) at index 44184, continuing at 44285
  Morphed node: 0x2f05d70: i32 = S_MIN_U32 0x2f05b20, 0x2f05c48 [ORD=4]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f02ec8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x2f02a28:1, 0x2f02b50, 0x2f02c78, 0x2f02da0 [ORD=2] [ID=19]

  Initial Opcode index to 4087
  Skipped scope entry (due to false predicate) at index 4091, continuing at 4818
  Skipped scope entry (due to false predicate) at index 4819, continuing at 4842
  Skipped scope entry (due to false predicate) at index 4843, continuing at 4866
  Skipped scope entry (due to false predicate) at index 4867, continuing at 4882
  Skipped scope entry (due to false predicate) at index 4883, continuing at 4900
  Skipped scope entry (due to false predicate) at index 4901, continuing at 4918
  Skipped scope entry (due to false predicate) at index 4919, continuing at 4936
  Skipped scope entry (due to false predicate) at index 4937, continuing at 4954
  Skipped scope entry (due to false predicate) at index 4955, continuing at 4972
  Skipped scope entry (due to false predicate) at index 4973, continuing at 4990
  Morphed node: 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f05b20: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f05218, 0x2f05340<LD4[<unknown>](invariant)> [ORD=4] [ID=18]

  Initial Opcode index to 49410
  TypeSwitch[i32] from 49413 to 49416
  Morphed node: 0x2f05b20: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f05218, 0x2f02b50, 0x2e9b8f0 [ORD=4]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f02a28: i32,ch = M2S_LOAD_IMM_CONST 0x2e9b8f0, 0x2f027d8, 0x2f02900<LD4[<unknown>](invariant)> [ORD=1] [ID=17]

  Initial Opcode index to 49410
  TypeSwitch[i32] from 49413 to 49416
  Morphed node: 0x2f02a28: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f027d8, 0x2f05340, 0x2e9b8f0 [ORD=1]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f05c48: i32 = Constant<65535> [ID=11]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Morphed node: 0x2f05c48: i32 = S_MOV_B32 0x2f02900

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f02da0: i32 = Constant<80> [ID=5]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Skipped scope entry (due to false predicate) at index 43304, continuing at 43318
  Morphed node: 0x2f02da0: i32 = V_MOV_B32_e32 0x2f04b28

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x2f02c78: i32 = Constant<1> [ID=4]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Skipped scope entry (due to false predicate) at index 43304, continuing at 43318
  Morphed node: 0x2f02c78: i32 = V_MOV_B32_e32 0x2f04d78

ISEL: Match complete!
===== Instruction selection ends:
Selected selection DAG: BB#0 'Global1:entry'
SelectionDAG has 30 nodes:
  0x2e9b8f0: ch = EntryToken

      0x2e9b8f0: <multiple use>
      0x2f026b0: v4i32 = Register %vreg2

    0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1]

    0x2f05340: i32 = TargetConstant<0>

    0x2e9b8f0: <multiple use>
  0x2f02a28: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f027d8, 0x2f05340, 0x2e9b8f0 [ORD=1]

      0x2f04d78: i32 = TargetConstant<1>

    0x2f02c78: i32 = V_MOV_B32_e32 0x2f04d78

      0x2f04b28: i32 = TargetConstant<80>

    0x2f02da0: i32 = V_MOV_B32_e32 0x2f04b28

    0x2f02a28: <multiple use>
  0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2]

      0x2e9b8f0: <multiple use>
      0x2f048d8: i32 = Register %vreg3

    0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8

            0x2e9b8f0: <multiple use>
            0x2f04688: v4i32 = Register %vreg1

          0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4]

          0x2f02b50: i32 = TargetConstant<4>

          0x2e9b8f0: <multiple use>
        0x2f05b20: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f05218, 0x2f02b50, 0x2e9b8f0 [ORD=4]

          0x2f02900: i32 = TargetConstant<65535>

        0x2f05c48: i32 = S_MOV_B32 0x2f02900

      0x2f05d70: i32 = S_MIN_U32 0x2f05b20, 0x2f05c48 [ORD=4]

        0x2e9b8f0: <multiple use>
        0x2f03368: i32 = Register %vreg4

      0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368

    0x2f03490: i32 = S_MUL_I32 0x2f05d70, 0x2f05e98 [ORD=5]

  0x2f047b0: i32 = S_ADD_I32 0x2f04ea0, 0x2f03490 [ORD=7]

    0x2f02a28: <multiple use>
    0x2f047b0: <multiple use>
  0x2f04a00: i32 = S_ADD_I32 0x2f02a28, 0x2f047b0 [ORD=9]

  0x2f02ff0: i16 = TargetConstant<0>

  0x2f04560: i1 = TargetConstant<0>

      0x2f047b0: <multiple use>
      0x2f04a00: <multiple use>
      0x2f02ec8: <multiple use>
      0x2f02ff0: <multiple use>
      0x2f02ff0: <multiple use>
      0x2f03240: i1 = TargetConstant<-1>

      0x2f04560: <multiple use>
      0x2f04560: <multiple use>
        0x2f04a00: <multiple use>
        0x2f02ec8: <multiple use>
        0x2f02ec8: <multiple use>
      0x2f04c50: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x2f04a00, 0x2f02ec8, 0x2f02ec8:1 [ORD=10]

    0x2f050f0: ch = BUFFER_STORE_BYTE_OFFEN 0x2f047b0, 0x2f04a00, 0x2f02ec8, 0x2f02ff0, 0x2f02ff0, 0x2f03240, 0x2f04560, 0x2f04560, 0x2f04c50:1<Mem:ST1[%pac.arrayidx(addrspace=1)]> [ORD=11]

  0x2f04fc8: ch = S_ENDPGM 0x2f050f0 [ORD=12]


********** List Scheduling BB#0 'entry' **********
SU(0): 0x2f04fc8: ch = S_ENDPGM 0x2f050f0 [ORD=12] [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x2f050f0: ch = BUFFER_STORE_BYTE_OFFEN 0x2f047b0, 0x2f04a00, 0x2f02ec8, 0x2f02ff0, 0x2f02ff0, 0x2f03240, 0x2f04560, 0x2f04560, 0x2f04c50:1<Mem:ST1[%pac.arrayidx(addrspace=1)]> [ORD=11] [ID=1]

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
   val SU(9): Latency=1
   val SU(8): Latency=1
   val SU(3): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x2f04c50: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x2f04a00, 0x2f02ec8, 0x2f02ec8:1 [ORD=10] [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
   val SU(8): Latency=1
   val SU(3): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
   val SU(7): Latency=1
   val SU(6): Latency=1
   ch  SU(4): Latency=1
  Successors:
   val SU(1): Latency=1
   val SU(2): Latency=1
   ch  SU(2): Latency=1

SU(4): 0x2f02a28: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f027d8, 0x2f05340, 0x2e9b8f0 [ORD=1] [ID=4]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
   val SU(5): Latency=1
  Successors:
   ch  SU(3): Latency=1
   val SU(8): Latency=1

SU(5): 0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=5]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(4): Latency=1

SU(6): 0x2f02da0: i32 = V_MOV_B32_e32 0x2f04b28 [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(7): 0x2f02c78: i32 = V_MOV_B32_e32 0x2f04d78 [ID=7]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   val SU(3): Latency=1

SU(8): 0x2f04a00: i32 = S_ADD_I32 0x2f02a28, 0x2f047b0 [ORD=9] [ID=8]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
   val SU(4): Latency=1
   val SU(9): Latency=1
  Successors:
   val SU(1): Latency=1
   val SU(2): Latency=1

SU(9): 0x2f047b0: i32 = S_ADD_I32 0x2f04ea0, 0x2f03490 [ORD=7] [ID=9]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
   val SU(16): Latency=1
   val SU(10): Latency=1
  Successors:
   val SU(1): Latency=1
   val SU(8): Latency=1

SU(10): 0x2f03490: i32 = S_MUL_I32 0x2f05d70, 0x2f05e98 [ORD=5] [ID=10]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 5
  Predecessors:
   val SU(12): Latency=1
   val SU(11): Latency=1
  Successors:
   val SU(9): Latency=1

SU(11): 0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368 [ID=11]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
   val SU(10): Latency=1

SU(12): 0x2f05d70: i32 = S_MIN_U32 0x2f05b20, 0x2f05c48 [ORD=4] [ID=12]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
   val SU(14): Latency=1
   val SU(13): Latency=1
  Successors:
   val SU(10): Latency=1

SU(13): 0x2f05c48: i32 = S_MOV_B32 0x2f02900 [ID=13]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
   val SU(12): Latency=1

SU(14): 0x2f05b20: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f05218, 0x2f02b50, 0x2e9b8f0 [ORD=4] [ID=14]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
   val SU(15): Latency=1
  Successors:
   val SU(12): Latency=1

SU(15): 0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4] [ID=15]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
   val SU(14): Latency=1

SU(16): 0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8 [ID=16]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
   val SU(9): Latency=1


Examining Available:
Height 0: SU(0): 0x2f04fc8: ch = S_ENDPGM 0x2f050f0 [ORD=12] [ID=0]


*** Scheduling [0]: SU(0): 0x2f04fc8: ch = S_ENDPGM 0x2f050f0 [ORD=12] [ID=0]


Examining Available:
Height 1: SU(1): 0x2f050f0: ch = BUFFER_STORE_BYTE_OFFEN 0x2f047b0, 0x2f04a00, 0x2f02ec8, 0x2f02ff0, 0x2f02ff0, 0x2f03240, 0x2f04560, 0x2f04560, 0x2f04c50:1<Mem:ST1[%pac.arrayidx(addrspace=1)]> [ORD=11] [ID=1]


*** Scheduling [1]: SU(1): 0x2f050f0: ch = BUFFER_STORE_BYTE_OFFEN 0x2f047b0, 0x2f04a00, 0x2f02ec8, 0x2f02ff0, 0x2f02ff0, 0x2f03240, 0x2f04560, 0x2f04560, 0x2f04c50:1<Mem:ST1[%pac.arrayidx(addrspace=1)]> [ORD=11] [ID=1]


Examining Available:
Height 2: SU(2): 0x2f04c50: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x2f04a00, 0x2f02ec8, 0x2f02ec8:1 [ORD=10] [ID=2]


*** Scheduling [2]: SU(2): 0x2f04c50: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x2f04a00, 0x2f02ec8, 0x2f02ec8:1 [ORD=10] [ID=2]


Examining Available:
Height 3: SU(8): 0x2f04a00: i32 = S_ADD_I32 0x2f02a28, 0x2f047b0 [ORD=9] [ID=8]

Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [3]: SU(8): 0x2f04a00: i32 = S_ADD_I32 0x2f02a28, 0x2f047b0 [ORD=9] [ID=8]


Examining Available:
Height 4: SU(9): 0x2f047b0: i32 = S_ADD_I32 0x2f04ea0, 0x2f03490 [ORD=7] [ID=9]

Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [4]: SU(9): 0x2f047b0: i32 = S_ADD_I32 0x2f04ea0, 0x2f03490 [ORD=7] [ID=9]


Examining Available:
Height 5: SU(16): 0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8 [ID=16]

Height 5: SU(10): 0x2f03490: i32 = S_MUL_I32 0x2f05d70, 0x2f05e98 [ORD=5] [ID=10]

Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [5]: SU(16): 0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8 [ID=16]


Examining Available:
Height 5: SU(10): 0x2f03490: i32 = S_MUL_I32 0x2f05d70, 0x2f05e98 [ORD=5] [ID=10]

Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [6]: SU(10): 0x2f03490: i32 = S_MUL_I32 0x2f05d70, 0x2f05e98 [ORD=5] [ID=10]


Examining Available:
Height 7: SU(11): 0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368 [ID=11]

Height 7: SU(12): 0x2f05d70: i32 = S_MIN_U32 0x2f05b20, 0x2f05c48 [ORD=4] [ID=12]

Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [7]: SU(11): 0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368 [ID=11]


Examining Available:
Height 7: SU(12): 0x2f05d70: i32 = S_MIN_U32 0x2f05b20, 0x2f05c48 [ORD=4] [ID=12]

Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [8]: SU(12): 0x2f05d70: i32 = S_MIN_U32 0x2f05b20, 0x2f05c48 [ORD=4] [ID=12]


Examining Available:
Height 9: SU(13): 0x2f05c48: i32 = S_MOV_B32 0x2f02900 [ID=13]

Height 9: SU(14): 0x2f05b20: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f05218, 0x2f02b50, 0x2e9b8f0 [ORD=4] [ID=14]

Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [9]: SU(13): 0x2f05c48: i32 = S_MOV_B32 0x2f02900 [ID=13]


Examining Available:
Height 9: SU(14): 0x2f05b20: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f05218, 0x2f02b50, 0x2e9b8f0 [ORD=4] [ID=14]

Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [10]: SU(14): 0x2f05b20: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f05218, 0x2f02b50, 0x2e9b8f0 [ORD=4] [ID=14]


Examining Available:
Height 11: SU(15): 0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4] [ID=15]

Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [11]: SU(15): 0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4] [ID=15]


Examining Available:
Height 3: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


*** Scheduling [12]: SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]


Examining Available:
Height 13: SU(7): 0x2f02c78: i32 = V_MOV_B32_e32 0x2f04d78 [ID=7]

Height 13: SU(6): 0x2f02da0: i32 = V_MOV_B32_e32 0x2f04b28 [ID=6]

Height 13: SU(4): 0x2f02a28: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f027d8, 0x2f05340, 0x2e9b8f0 [ORD=1] [ID=4]


*** Scheduling [13]: SU(7): 0x2f02c78: i32 = V_MOV_B32_e32 0x2f04d78 [ID=7]


Examining Available:
Height 13: SU(6): 0x2f02da0: i32 = V_MOV_B32_e32 0x2f04b28 [ID=6]

Height 13: SU(4): 0x2f02a28: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f027d8, 0x2f05340, 0x2e9b8f0 [ORD=1] [ID=4]


*** Scheduling [14]: SU(6): 0x2f02da0: i32 = V_MOV_B32_e32 0x2f04b28 [ID=6]


Examining Available:
Height 13: SU(4): 0x2f02a28: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f027d8, 0x2f05340, 0x2e9b8f0 [ORD=1] [ID=4]


*** Scheduling [15]: SU(4): 0x2f02a28: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f027d8, 0x2f05340, 0x2e9b8f0 [ORD=1] [ID=4]


Examining Available:
Height 16: SU(5): 0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=5]


*** Scheduling [16]: SU(5): 0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=5]

*** Final schedule ***
SU(5): 0x2f027d8: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f026b0 [ORD=1] [ID=5]

SU(4): 0x2f02a28: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f027d8, 0x2f05340, 0x2e9b8f0 [ORD=1] [ID=4]

SU(6): 0x2f02da0: i32 = V_MOV_B32_e32 0x2f04b28 [ID=6]

SU(7): 0x2f02c78: i32 = V_MOV_B32_e32 0x2f04d78 [ID=7]

SU(3): 0x2f02ec8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x2f02c78, 0x2f02da0, 0x2f02a28:1 [ORD=2] [ID=3]

SU(15): 0x2f05218: v4i32,ch = CopyFromReg 0x2e9b8f0, 0x2f04688 [ORD=4] [ID=15]

SU(14): 0x2f05b20: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x2f05218, 0x2f02b50, 0x2e9b8f0 [ORD=4] [ID=14]

SU(13): 0x2f05c48: i32 = S_MOV_B32 0x2f02900 [ID=13]

SU(12): 0x2f05d70: i32 = S_MIN_U32 0x2f05b20, 0x2f05c48 [ORD=4] [ID=12]

SU(11): 0x2f05e98: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f03368 [ID=11]

SU(10): 0x2f03490: i32 = S_MUL_I32 0x2f05d70, 0x2f05e98 [ORD=5] [ID=10]

SU(16): 0x2f04ea0: i32,ch = CopyFromReg 0x2e9b8f0, 0x2f048d8 [ID=16]

SU(9): 0x2f047b0: i32 = S_ADD_I32 0x2f04ea0, 0x2f03490 [ORD=7] [ID=9]

SU(8): 0x2f04a00: i32 = S_ADD_I32 0x2f02a28, 0x2f047b0 [ORD=9] [ID=8]

SU(2): 0x2f04c50: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x2f04a00, 0x2f02ec8, 0x2f02ec8:1 [ORD=10] [ID=2]

SU(1): 0x2f050f0: ch = BUFFER_STORE_BYTE_OFFEN 0x2f047b0, 0x2f04a00, 0x2f02ec8, 0x2f02ff0, 0x2f02ff0, 0x2f03240, 0x2f04560, 0x2f04560, 0x2f04c50:1<Mem:ST1[%pac.arrayidx(addrspace=1)]> [ORD=11] [ID=1]

SU(0): 0x2f04fc8: ch = S_ENDPGM 0x2f050f0 [ORD=12] [ID=0]


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, %vreg10<kill>, %SCC<imp-def,dead>; SReg_32:%vreg11,%vreg10 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg14<def> = COPY %vreg3; SReg_32:%vreg14 VGPR_32:%vreg3
	%vreg13<def> = S_ADD_I32 %vreg14, %vreg12<kill>, %SCC<imp-def,dead>; SReg_32:%vreg13,%vreg14,%vreg12
	%vreg15<def> = S_ADD_I32 %vreg5<kill>, %vreg13, %SCC<imp-def,dead>; SReg_32:%vreg15,%vreg13 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg15, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16,%vreg15 SReg_128:%vreg8
	%vreg17<def> = COPY %vreg13; VGPR_32:%vreg17 SReg_32:%vreg13
	%vreg18<def> = COPY %vreg15; VGPR_32:%vreg18 SReg_32:%vreg15
	BUFFER_STORE_BYTE_OFFEN %vreg17, %vreg18, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg17,%vreg18 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After SI Lower i1 Copies ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, %vreg10<kill>, %SCC<imp-def,dead>; SReg_32:%vreg11,%vreg10 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg14<def> = COPY %vreg3; SReg_32:%vreg14 VGPR_32:%vreg3
	%vreg13<def> = S_ADD_I32 %vreg14, %vreg12<kill>, %SCC<imp-def,dead>; SReg_32:%vreg13,%vreg14,%vreg12
	%vreg15<def> = S_ADD_I32 %vreg5<kill>, %vreg13, %SCC<imp-def,dead>; SReg_32:%vreg15,%vreg13 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg15, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16,%vreg15 SReg_128:%vreg8
	%vreg17<def> = COPY %vreg13; VGPR_32:%vreg17 SReg_32:%vreg13
	%vreg18<def> = COPY %vreg15; VGPR_32:%vreg18 SReg_32:%vreg15
	BUFFER_STORE_BYTE_OFFEN %vreg17, %vreg18, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg17,%vreg18 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

Fixing VGPR -> SGPR copy: %vreg14<def> = COPY %vreg3; SReg_32:%vreg14 VGPR_32:%vreg3
Folded source from %vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
 into OpNo 2 of %vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9

Folded source from %vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
 into OpNo 2 of %vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12

Folded source from %vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
 into OpNo 0 of BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg18, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg18 SReg_128:%vreg8

Folded source from %vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
 into OpNo 1 of BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8

# *** IR Dump After SI Fold Operands ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	%vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
	%vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	%vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
	%vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Tail Duplication ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	%vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
	%vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	%vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
	%vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
112B		%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
128B		%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
144B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
160B		%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
176B		%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
192B		%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
208B		%vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
224B		%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
240B		%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
256B		%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
272B		%vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
288B		%vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
304B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
320B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Slot index numbering ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
112B		%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
128B		%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
144B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
160B		%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
176B		%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
192B		%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
208B		%vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
224B		%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
240B		%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
256B		%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
272B		%vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
288B		%vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
304B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
320B		S_ENDPGM

# End machine code for function Global1.

********** Stack Coloring **********
********** Function: Global1
# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	%vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
	%vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	%vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
	%vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

DeadMachineInstructionElim: DELETING: %vreg18<def> = COPY %vreg21; VGPR_32:%vreg18,%vreg21
DeadMachineInstructionElim: DELETING: %vreg17<def> = COPY %vreg20; VGPR_32:%vreg17,%vreg20
DeadMachineInstructionElim: DELETING: %vreg19<def> = COPY %vreg3; VGPR_32:%vreg19,%vreg3
DeadMachineInstructionElim: DELETING: %vreg10<def> = S_MOV_B32 65535; SReg_32:%vreg10
# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

******** Pre-regalloc Machine LICM: Global1 ********
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

Entering: entry
Exiting: entry
# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.


block-frequency: Global1
========================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: Global1
 - BB0[entry]: float = 1.0, int = 8

******** Machine Sinking ********
# *** IR Dump After Machine code sinking ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

********** PEEPHOLE OPTIMIZER **********
********** Function: Global1
# *** IR Dump After Peephole Optimizations ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg6
	%vreg7<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg7
	%vreg8<def> = SI_M2S_GET_UAV_DESC %vreg7<kill>, %vreg6<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg8 VGPR_32:%vreg7,%vreg6
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	%vreg16<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg21, %vreg8, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg16 VGPR_32:%vreg21 SReg_128:%vreg8
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
	%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg22<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg22
	%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22<kill>, 80; SReg_128:%vreg8 SReg_64:%vreg22
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4<kill>; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	BUFFER_STORE_BYTE_OFFEN %vreg20<kill>, %vreg21<kill>, %vreg8<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22<kill>, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4<kill>; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20<kill>, %vreg21<kill>, %vreg8<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Slot index numbering ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22<kill>, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4<kill>; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20<kill>, %vreg21<kill>, %vreg8<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

Computing live-in reg-units in ABI blocks.
0B	BB#0 SGPR4#0 SGPR5#0 SGPR6#0 SGPR7#0 SGPR8#0 SGPR9#0 SGPR10#0 SGPR11#0 VGPR0#0 SGPR12#0 SGPR2#0 SGPR3#0
Created 12 new intervals.
********** INTERVALS **********
SGPR2 [0B,96r:0)  0@0B-phi
SGPR3 [0B,96r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg1 [64r,128r:0)  0@64r
%vreg2 [48r,80r:0)  0@48r
%vreg3 [32r,176r:0)  0@32r
%vreg4 [16r,160r:0)  0@16r
%vreg5 [80r,192r:0)  0@80r
%vreg8 [112r,208r:0)  0@112r
%vreg9 [128r,144r:0)  0@128r
%vreg11 [144r,160r:0)  0@144r
%vreg12 [160r,176r:0)  0@160r
%vreg20 [176r,208r:0)  0@176r
%vreg21 [192r,208r:0)  0@192r
%vreg22 [96r,112r:0)  0@96r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After SI Fix SGPR live ranges ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
	%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

********** PROCESS IMPLICIT DEFS **********
********** Function: Global1
# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
	%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
	%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function Global1: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg22<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg22
	%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22<kill>, 80; SReg_128:%vreg8 SReg_64:%vreg22
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4<kill>; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	BUFFER_STORE_BYTE_OFFEN %vreg20<kill>, %vreg21<kill>, %vreg8<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg22<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg22
	%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22<kill>, 80; SReg_128:%vreg8 SReg_64:%vreg22
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4<kill>; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	BUFFER_STORE_BYTE_OFFEN %vreg20<kill>, %vreg21<kill>, %vreg8<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

********** REWRITING TWO-ADDR INSTRS **********
********** Function: Global1
# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg22<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg22
	%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22<kill>, 80; SReg_128:%vreg8 SReg_64:%vreg22
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4<kill>; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	BUFFER_STORE_BYTE_OFFEN %vreg20<kill>, %vreg21<kill>, %vreg8<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22<kill>, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4<kill>; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20<kill>, %vreg21<kill>, %vreg8<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Slot index numbering ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22<kill>, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4<kill>; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20<kill>, %vreg21<kill>, %vreg8<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

Computing live-in reg-units in ABI blocks.
0B	BB#0 SGPR4#0 SGPR5#0 SGPR6#0 SGPR7#0 SGPR8#0 SGPR9#0 SGPR10#0 SGPR11#0 VGPR0#0 SGPR12#0 SGPR2#0 SGPR3#0
Created 12 new intervals.
********** INTERVALS **********
SGPR2 [0B,96r:0)  0@0B-phi
SGPR3 [0B,96r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg1 [64r,128r:0)  0@64r
%vreg2 [48r,80r:0)  0@48r
%vreg3 [32r,176r:0)  0@32r
%vreg4 [16r,160r:0)  0@16r
%vreg5 [80r,192r:0)  0@80r
%vreg8 [112r,208r:0)  0@112r
%vreg9 [128r,144r:0)  0@128r
%vreg11 [144r,160r:0)  0@144r
%vreg12 [160r,176r:0)  0@160r
%vreg20 [176r,208r:0)  0@176r
%vreg21 [192r,208r:0)  0@192r
%vreg22 [96r,112r:0)  0@96r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

********** SIMPLE REGISTER COALESCING **********
********** Function: Global1
********** JOINING INTERVALS ***********
entry:
16B	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	Considering merging %vreg4 with %SGPR12
	Can only merge into reserved registers.
32B	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	Considering merging %vreg3 with %VGPR0
	Can only merge into reserved registers.
48B	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	Considering merging %vreg2 with %SGPR8_SGPR9_SGPR10_SGPR11
	Can only merge into reserved registers.
64B	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	Considering merging %vreg1 with %SGPR4_SGPR5_SGPR6_SGPR7
	Can only merge into reserved registers.
96B	%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
	Considering merging %vreg22 with %SGPR2_SGPR3
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
SGPR2 [0B,96r:0)  0@0B-phi
SGPR3 [0B,96r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg1 [64r,128r:0)  0@64r
%vreg2 [48r,80r:0)  0@48r
%vreg3 [32r,176r:0)  0@32r
%vreg4 [16r,160r:0)  0@16r
%vreg5 [80r,192r:0)  0@80r
%vreg8 [112r,208r:0)  0@112r
%vreg9 [128r,144r:0)  0@128r
%vreg11 [144r,160r:0)  0@144r
%vreg12 [160r,176r:0)  0@160r
%vreg20 [176r,208r:0)  0@176r
%vreg21 [192r,208r:0)  0@192r
%vreg22 [96r,112r:0)  0@96r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

Before MISsched:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
	%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
	%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
	%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
	%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
	%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
	%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
	BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
	S_ENDPGM

# End machine code for function Global1.

AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
********** MI Scheduling **********
Global1:BB#0 entry
  From: %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
    To: S_ENDPGM
 RegionInstrs: 13 Remaining: 0
Max Pressure: SGPR_32=11
SReg_32=11
VGPR_32=2
VS_32=12
Live In: SGPR2 SGPR3 SGPR4 SGPR5 SGPR6 SGPR7 SGPR8 SGPR9 SGPR10 SGPR11 VGPR0 SGPR12 
Live Out: 
Live Thru: 
AllocationOrder(R600_Predicate_Bit) = [ %PREDICATE_BIT ]
AllocationOrder(R600_Predicate) = [ %PRED_SEL_OFF %PRED_SEL_ZERO %PRED_SEL_ONE ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_W) = [ %V01_W %V23_W ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_X) = [ %V01_X %V23_X ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y) = [ %V01_Y %V23_Y ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z) = [ %V01_Z %V23_Z ]
AllocationOrder(R600_Reg64Vertical) = [ %V01_X %V01_Y %V01_Z %V01_W %V23_X %V23_Y %V23_Z %V23_W ]
AllocationOrder(R600_ArrayBase) = [ %ArrayBase448 %ArrayBase449 %ArrayBase450 %ArrayBase451 %ArrayBase452 %ArrayBase453 %ArrayBase454 %ArrayBase455 %ArrayBase456 %ArrayBase457 %ArrayBase458 %ArrayBase459 %ArrayBase460 %ArrayBase461 %ArrayBase462 %ArrayBase463 %ArrayBase464 %ArrayBase465 %ArrayBase466 %ArrayBase467 %ArrayBase468 %ArrayBase469 %ArrayBase470 %ArrayBase471 %ArrayBase472 %ArrayBase473 %ArrayBase474 %ArrayBase475 %ArrayBase476 %ArrayBase477 %ArrayBase478 %ArrayBase479 %ArrayBase480 ]
AllocationOrder(SGPR_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 ]
AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
AllocationOrder(R600_TReg32_W) = [ %T0_W %T1_W %T2_W %T3_W %T4_W %T5_W %T6_W %T7_W %T8_W %T9_W %T10_W %T11_W %T12_W %T13_W %T14_W %T15_W %T16_W %T17_W %T18_W %T19_W %T20_W %T21_W %T22_W %T23_W %T24_W %T25_W %T26_W %T27_W %T28_W %T29_W %T30_W %T31_W %T32_W %T33_W %T34_W %T35_W %T36_W %T37_W %T38_W %T39_W %T40_W %T41_W %T42_W %T43_W %T44_W %T45_W %T46_W %T47_W %T48_W %T49_W %T50_W %T51_W %T52_W %T53_W %T54_W %T55_W %T56_W %T57_W %T58_W %T59_W %T60_W %T61_W %T62_W %T63_W %T64_W %T65_W %T66_W %T67_W %T68_W %T69_W %T70_W %T71_W %T72_W %T73_W %T74_W %T75_W %T76_W %T77_W %T78_W %T79_W %T80_W %T81_W %T82_W %T83_W %T84_W %T85_W %T86_W %T87_W %T88_W %T89_W %T90_W %T91_W %T92_W %T93_W %T94_W %T95_W %T96_W %T97_W %T98_W %T99_W %T100_W %T101_W %T102_W %T103_W %T104_W %T105_W %T106_W %T107_W %T108_W %T109_W %T110_W %T111_W %T112_W %T113_W %T114_W %T115_W %T116_W %T117_W %T118_W %T119_W %T120_W %T121_W %T122_W %T123_W %T124_W %T125_W %T126_W %T127_W ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_Z) = [ %T0_Z %T1_Z %T2_Z %T3_Z %T4_Z %T5_Z %T6_Z %T7_Z %T8_Z %T9_Z %T10_Z %T11_Z %T12_Z %T13_Z %T14_Z %T15_Z %T16_Z %T17_Z %T18_Z %T19_Z %T20_Z %T21_Z %T22_Z %T23_Z %T24_Z %T25_Z %T26_Z %T27_Z %T28_Z %T29_Z %T30_Z %T31_Z %T32_Z %T33_Z %T34_Z %T35_Z %T36_Z %T37_Z %T38_Z %T39_Z %T40_Z %T41_Z %T42_Z %T43_Z %T44_Z %T45_Z %T46_Z %T47_Z %T48_Z %T49_Z %T50_Z %T51_Z %T52_Z %T53_Z %T54_Z %T55_Z %T56_Z %T57_Z %T58_Z %T59_Z %T60_Z %T61_Z %T62_Z %T63_Z %T64_Z %T65_Z %T66_Z %T67_Z %T68_Z %T69_Z %T70_Z %T71_Z %T72_Z %T73_Z %T74_Z %T75_Z %T76_Z %T77_Z %T78_Z %T79_Z %T80_Z %T81_Z %T82_Z %T83_Z %T84_Z %T85_Z %T86_Z %T87_Z %T88_Z %T89_Z %T90_Z %T91_Z %T92_Z %T93_Z %T94_Z %T95_Z %T96_Z %T97_Z %T98_Z %T99_Z %T100_Z %T101_Z %T102_Z %T103_Z %T104_Z %T105_Z %T106_Z %T107_Z %T108_Z %T109_Z %T110_Z %T111_Z %T112_Z %T113_Z %T114_Z %T115_Z %T116_Z %T117_Z %T118_Z %T119_Z %T120_Z %T121_Z %T122_Z %T123_Z %T124_Z %T125_Z %T126_Z %T127_Z ]
AllocationOrder(R600_Reg64) = [ %T0_XY %T1_XY %T2_XY %T3_XY %T4_XY %T5_XY %T6_XY %T7_XY %T8_XY %T9_XY %T10_XY %T11_XY %T12_XY %T13_XY %T14_XY %T15_XY %T16_XY %T17_XY %T18_XY %T19_XY %T20_XY %T21_XY %T22_XY %T23_XY %T24_XY %T25_XY %T26_XY %T27_XY %T28_XY %T29_XY %T30_XY %T31_XY %T32_XY %T33_XY %T34_XY %T35_XY %T36_XY %T37_XY %T38_XY %T39_XY %T40_XY %T41_XY %T42_XY %T43_XY %T44_XY %T45_XY %T46_XY %T47_XY %T48_XY %T49_XY %T50_XY %T51_XY %T52_XY %T53_XY %T54_XY %T55_XY %T56_XY %T57_XY %T58_XY %T59_XY %T60_XY %T61_XY %T62_XY %T63_XY ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(R600_Reg64) = [ %T0_XY %T1_XY %T2_XY %T3_XY %T4_XY %T5_XY %T6_XY %T7_XY %T8_XY %T9_XY %T10_XY %T11_XY %T12_XY %T13_XY %T14_XY %T15_XY %T16_XY %T17_XY %T18_XY %T19_XY %T20_XY %T21_XY %T22_XY %T23_XY %T24_XY %T25_XY %T26_XY %T27_XY %T28_XY %T29_XY %T30_XY %T31_XY %T32_XY %T33_XY %T34_XY %T35_XY %T36_XY %T37_XY %T38_XY %T39_XY %T40_XY %T41_XY %T42_XY %T43_XY %T44_XY %T45_XY %T46_XY %T47_XY %T48_XY %T49_XY %T50_XY %T51_XY %T52_XY %T53_XY %T54_XY %T55_XY %T56_XY %T57_XY %T58_XY %T59_XY %T60_XY %T61_XY %T62_XY %T63_XY ]
AllocationOrder(R600_TReg32_W) = [ %T0_W %T1_W %T2_W %T3_W %T4_W %T5_W %T6_W %T7_W %T8_W %T9_W %T10_W %T11_W %T12_W %T13_W %T14_W %T15_W %T16_W %T17_W %T18_W %T19_W %T20_W %T21_W %T22_W %T23_W %T24_W %T25_W %T26_W %T27_W %T28_W %T29_W %T30_W %T31_W %T32_W %T33_W %T34_W %T35_W %T36_W %T37_W %T38_W %T39_W %T40_W %T41_W %T42_W %T43_W %T44_W %T45_W %T46_W %T47_W %T48_W %T49_W %T50_W %T51_W %T52_W %T53_W %T54_W %T55_W %T56_W %T57_W %T58_W %T59_W %T60_W %T61_W %T62_W %T63_W %T64_W %T65_W %T66_W %T67_W %T68_W %T69_W %T70_W %T71_W %T72_W %T73_W %T74_W %T75_W %T76_W %T77_W %T78_W %T79_W %T80_W %T81_W %T82_W %T83_W %T84_W %T85_W %T86_W %T87_W %T88_W %T89_W %T90_W %T91_W %T92_W %T93_W %T94_W %T95_W %T96_W %T97_W %T98_W %T99_W %T100_W %T101_W %T102_W %T103_W %T104_W %T105_W %T106_W %T107_W %T108_W %T109_W %T110_W %T111_W %T112_W %T113_W %T114_W %T115_W %T116_W %T117_W %T118_W %T119_W %T120_W %T121_W %T122_W %T123_W %T124_W %T125_W %T126_W %T127_W ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_Z) = [ %T0_Z %T1_Z %T2_Z %T3_Z %T4_Z %T5_Z %T6_Z %T7_Z %T8_Z %T9_Z %T10_Z %T11_Z %T12_Z %T13_Z %T14_Z %T15_Z %T16_Z %T17_Z %T18_Z %T19_Z %T20_Z %T21_Z %T22_Z %T23_Z %T24_Z %T25_Z %T26_Z %T27_Z %T28_Z %T29_Z %T30_Z %T31_Z %T32_Z %T33_Z %T34_Z %T35_Z %T36_Z %T37_Z %T38_Z %T39_Z %T40_Z %T41_Z %T42_Z %T43_Z %T44_Z %T45_Z %T46_Z %T47_Z %T48_Z %T49_Z %T50_Z %T51_Z %T52_Z %T53_Z %T54_Z %T55_Z %T56_Z %T57_Z %T58_Z %T59_Z %T60_Z %T61_Z %T62_Z %T63_Z %T64_Z %T65_Z %T66_Z %T67_Z %T68_Z %T69_Z %T70_Z %T71_Z %T72_Z %T73_Z %T74_Z %T75_Z %T76_Z %T77_Z %T78_Z %T79_Z %T80_Z %T81_Z %T82_Z %T83_Z %T84_Z %T85_Z %T86_Z %T87_Z %T88_Z %T89_Z %T90_Z %T91_Z %T92_Z %T93_Z %T94_Z %T95_Z %T96_Z %T97_Z %T98_Z %T99_Z %T100_Z %T101_Z %T102_Z %T103_Z %T104_Z %T105_Z %T106_Z %T107_Z %T108_Z %T109_Z %T110_Z %T111_Z %T112_Z %T113_Z %T114_Z %T115_Z %T116_Z %T117_Z %T118_Z %T119_Z %T120_Z %T121_Z %T122_Z %T123_Z %T124_Z %T125_Z %T126_Z %T127_Z ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(VGPR_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 ]
AllocationOrder(VS_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
AllocationOrder(R600_TReg32) = [ %T0_X %T0_Y %T0_Z %T0_W %T1_X %T1_Y %T1_Z %T1_W %T2_X %T2_Y %T2_Z %T2_W %T3_X %T3_Y %T3_Z %T3_W %T4_X %T4_Y %T4_Z %T4_W %T5_X %T5_Y %T5_Z %T5_W %T6_X %T6_Y %T6_Z %T6_W %T7_X %T7_Y %T7_Z %T7_W %T8_X %T8_Y %T8_Z %T8_W %T9_X %T9_Y %T9_Z %T9_W %T10_X %T10_Y %T10_Z %T10_W %T11_X %T11_Y %T11_Z %T11_W %T12_X %T12_Y %T12_Z %T12_W %T13_X %T13_Y %T13_Z %T13_W %T14_X %T14_Y %T14_Z %T14_W %T15_X %T15_Y %T15_Z %T15_W %T16_X %T16_Y %T16_Z %T16_W %T17_X %T17_Y %T17_Z %T17_W %T18_X %T18_Y %T18_Z %T18_W %T19_X %T19_Y %T19_Z %T19_W %T20_X %T20_Y %T20_Z %T20_W %T21_X %T21_Y %T21_Z %T21_W %T22_X %T22_Y %T22_Z %T22_W %T23_X %T23_Y %T23_Z %T23_W %T24_X %T24_Y %T24_Z %T24_W %T25_X %T25_Y %T25_Z %T25_W %T26_X %T26_Y %T26_Z %T26_W %T27_X %T27_Y %T27_Z %T27_W %T28_X %T28_Y %T28_Z %T28_W %T29_X %T29_Y %T29_Z %T29_W %T30_X %T30_Y %T30_Z %T30_W %T31_X %T31_Y %T31_Z %T31_W %T32_X %T32_Y %T32_Z %T32_W %T33_X %T33_Y %T33_Z %T33_W %T34_X %T34_Y %T34_Z %T34_W %T35_X %T35_Y %T35_Z %T35_W %T36_X %T36_Y %T36_Z %T36_W %T37_X %T37_Y %T37_Z %T37_W %T38_X %T38_Y %T38_Z %T38_W %T39_X %T39_Y %T39_Z %T39_W %T40_X %T40_Y %T40_Z %T40_W %T41_X %T41_Y %T41_Z %T41_W %T42_X %T42_Y %T42_Z %T42_W %T43_X %T43_Y %T43_Z %T43_W %T44_X %T44_Y %T44_Z %T44_W %T45_X %T45_Y %T45_Z %T45_W %T46_X %T46_Y %T46_Z %T46_W %T47_X %T47_Y %T47_Z %T47_W %T48_X %T48_Y %T48_Z %T48_W %T49_X %T49_Y %T49_Z %T49_W %T50_X %T50_Y %T50_Z %T50_W %T51_X %T51_Y %T51_Z %T51_W %T52_X %T52_Y %T52_Z %T52_W %T53_X %T53_Y %T53_Z %T53_W %T54_X %T54_Y %T54_Z %T54_W %T55_X %T55_Y %T55_Z %T55_W %T56_X %T56_Y %T56_Z %T56_W %T57_X %T57_Y %T57_Z %T57_W %T58_X %T58_Y %T58_Z %T58_W %T59_X %T59_Y %T59_Z %T59_W %T60_X %T60_Y %T60_Z %T60_W %T61_X %T61_Y %T61_Z %T61_W %T62_X %T62_Y %T62_Z %T62_W %T63_X %T63_Y %T63_Z %T63_W %T64_X %T64_Y %T64_Z %T64_W %T65_X %T65_Y %T65_Z %T65_W %T66_X %T66_Y %T66_Z %T66_W %T67_X %T67_Y %T67_Z %T67_W %T68_X %T68_Y %T68_Z %T68_W %T69_X %T69_Y %T69_Z %T69_W %T70_X %T70_Y %T70_Z %T70_W %T71_X %T71_Y %T71_Z %T71_W %T72_X %T72_Y %T72_Z %T72_W %T73_X %T73_Y %T73_Z %T73_W %T74_X %T74_Y %T74_Z %T74_W %T75_X %T75_Y %T75_Z %T75_W %T76_X %T76_Y %T76_Z %T76_W %T77_X %T77_Y %T77_Z %T77_W %T78_X %T78_Y %T78_Z %T78_W %T79_X %T79_Y %T79_Z %T79_W %T80_X %T80_Y %T80_Z %T80_W %T81_X %T81_Y %T81_Z %T81_W %T82_X %T82_Y %T82_Z %T82_W %T83_X %T83_Y %T83_Z %T83_W %T84_X %T84_Y %T84_Z %T84_W %T85_X %T85_Y %T85_Z %T85_W %T86_X %T86_Y %T86_Z %T86_W %T87_X %T87_Y %T87_Z %T87_W %T88_X %T88_Y %T88_Z %T88_W %T89_X %T89_Y %T89_Z %T89_W %T90_X %T90_Y %T90_Z %T90_W %T91_X %T91_Y %T91_Z %T91_W %T92_X %T92_Y %T92_Z %T92_W %T93_X %T93_Y %T93_Z %T93_W %T94_X %T94_Y %T94_Z %T94_W %T95_X %T95_Y %T95_Z %T95_W %T96_X %T96_Y %T96_Z %T96_W %T97_X %T97_Y %T97_Z %T97_W %T98_X %T98_Y %T98_Z %T98_W %T99_X %T99_Y %T99_Z %T99_W %T100_X %T100_Y %T100_Z %T100_W %T101_X %T101_Y %T101_Z %T101_W %T102_X %T102_Y %T102_Z %T102_W %T103_X %T103_Y %T103_Z %T103_W %T104_X %T104_Y %T104_Z %T104_W %T105_X %T105_Y %T105_Z %T105_W %T106_X %T106_Y %T106_Z %T106_W %T107_X %T107_Y %T107_Z %T107_W %T108_X %T108_Y %T108_Z %T108_W %T109_X %T109_Y %T109_Z %T109_W %T110_X %T110_Y %T110_Z %T110_W %T111_X %T111_Y %T111_Z %T111_W %T112_X %T112_Y %T112_Z %T112_W %T113_X %T113_Y %T113_Z %T113_W %T114_X %T114_Y %T114_Z %T114_W %T115_X %T115_Y %T115_Z %T115_W %T116_X %T116_Y %T116_Z %T116_W %T117_X %T117_Y %T117_Z %T117_W %T118_X %T118_Y %T118_Z %T118_W %T119_X %T119_Y %T119_Z %T119_W %T120_X %T120_Y %T120_Z %T120_W %T121_X %T121_Y %T121_Z %T121_W %T122_X %T122_Y %T122_Z %T122_W %T123_X %T123_Y %T123_Z %T123_W %T124_X %T124_Y %T124_Z %T124_W %T125_X %T125_Y %T125_Z %T125_W %T126_X %T126_Y %T126_Z %T126_W %T127_X %T127_Y %T127_Z %T127_W %AR_X ]
AllocationOrder(R600_Reg32) = [ %T0_X %T0_Y %T0_Z %T0_W %T1_X %T1_Y %T1_Z %T1_W %T2_X %T2_Y %T2_Z %T2_W %T3_X %T3_Y %T3_Z %T3_W %T4_X %T4_Y %T4_Z %T4_W %T5_X %T5_Y %T5_Z %T5_W %T6_X %T6_Y %T6_Z %T6_W %T7_X %T7_Y %T7_Z %T7_W %T8_X %T8_Y %T8_Z %T8_W %T9_X %T9_Y %T9_Z %T9_W %T10_X %T10_Y %T10_Z %T10_W %T11_X %T11_Y %T11_Z %T11_W %T12_X %T12_Y %T12_Z %T12_W %T13_X %T13_Y %T13_Z %T13_W %T14_X %T14_Y %T14_Z %T14_W %T15_X %T15_Y %T15_Z %T15_W %T16_X %T16_Y %T16_Z %T16_W %T17_X %T17_Y %T17_Z %T17_W %T18_X %T18_Y %T18_Z %T18_W %T19_X %T19_Y %T19_Z %T19_W %T20_X %T20_Y %T20_Z %T20_W %T21_X %T21_Y %T21_Z %T21_W %T22_X %T22_Y %T22_Z %T22_W %T23_X %T23_Y %T23_Z %T23_W %T24_X %T24_Y %T24_Z %T24_W %T25_X %T25_Y %T25_Z %T25_W %T26_X %T26_Y %T26_Z %T26_W %T27_X %T27_Y %T27_Z %T27_W %T28_X %T28_Y %T28_Z %T28_W %T29_X %T29_Y %T29_Z %T29_W %T30_X %T30_Y %T30_Z %T30_W %T31_X %T31_Y %T31_Z %T31_W %T32_X %T32_Y %T32_Z %T32_W %T33_X %T33_Y %T33_Z %T33_W %T34_X %T34_Y %T34_Z %T34_W %T35_X %T35_Y %T35_Z %T35_W %T36_X %T36_Y %T36_Z %T36_W %T37_X %T37_Y %T37_Z %T37_W %T38_X %T38_Y %T38_Z %T38_W %T39_X %T39_Y %T39_Z %T39_W %T40_X %T40_Y %T40_Z %T40_W %T41_X %T41_Y %T41_Z %T41_W %T42_X %T42_Y %T42_Z %T42_W %T43_X %T43_Y %T43_Z %T43_W %T44_X %T44_Y %T44_Z %T44_W %T45_X %T45_Y %T45_Z %T45_W %T46_X %T46_Y %T46_Z %T46_W %T47_X %T47_Y %T47_Z %T47_W %T48_X %T48_Y %T48_Z %T48_W %T49_X %T49_Y %T49_Z %T49_W %T50_X %T50_Y %T50_Z %T50_W %T51_X %T51_Y %T51_Z %T51_W %T52_X %T52_Y %T52_Z %T52_W %T53_X %T53_Y %T53_Z %T53_W %T54_X %T54_Y %T54_Z %T54_W %T55_X %T55_Y %T55_Z %T55_W %T56_X %T56_Y %T56_Z %T56_W %T57_X %T57_Y %T57_Z %T57_W %T58_X %T58_Y %T58_Z %T58_W %T59_X %T59_Y %T59_Z %T59_W %T60_X %T60_Y %T60_Z %T60_W %T61_X %T61_Y %T61_Z %T61_W %T62_X %T62_Y %T62_Z %T62_W %T63_X %T63_Y %T63_Z %T63_W %T64_X %T64_Y %T64_Z %T64_W %T65_X %T65_Y %T65_Z %T65_W %T66_X %T66_Y %T66_Z %T66_W %T67_X %T67_Y %T67_Z %T67_W %T68_X %T68_Y %T68_Z %T68_W %T69_X %T69_Y %T69_Z %T69_W %T70_X %T70_Y %T70_Z %T70_W %T71_X %T71_Y %T71_Z %T71_W %T72_X %T72_Y %T72_Z %T72_W %T73_X %T73_Y %T73_Z %T73_W %T74_X %T74_Y %T74_Z %T74_W %T75_X %T75_Y %T75_Z %T75_W %T76_X %T76_Y %T76_Z %T76_W %T77_X %T77_Y %T77_Z %T77_W %T78_X %T78_Y %T78_Z %T78_W %T79_X %T79_Y %T79_Z %T79_W %T80_X %T80_Y %T80_Z %T80_W %T81_X %T81_Y %T81_Z %T81_W %T82_X %T82_Y %T82_Z %T82_W %T83_X %T83_Y %T83_Z %T83_W %T84_X %T84_Y %T84_Z %T84_W %T85_X %T85_Y %T85_Z %T85_W %T86_X %T86_Y %T86_Z %T86_W %T87_X %T87_Y %T87_Z %T87_W %T88_X %T88_Y %T88_Z %T88_W %T89_X %T89_Y %T89_Z %T89_W %T90_X %T90_Y %T90_Z %T90_W %T91_X %T91_Y %T91_Z %T91_W %T92_X %T92_Y %T92_Z %T92_W %T93_X %T93_Y %T93_Z %T93_W %T94_X %T94_Y %T94_Z %T94_W %T95_X %T95_Y %T95_Z %T95_W %T96_X %T96_Y %T96_Z %T96_W %T97_X %T97_Y %T97_Z %T97_W %T98_X %T98_Y %T98_Z %T98_W %T99_X %T99_Y %T99_Z %T99_W %T100_X %T100_Y %T100_Z %T100_W %T101_X %T101_Y %T101_Z %T101_W %T102_X %T102_Y %T102_Z %T102_W %T103_X %T103_Y %T103_Z %T103_W %T104_X %T104_Y %T104_Z %T104_W %T105_X %T105_Y %T105_Z %T105_W %T106_X %T106_Y %T106_Z %T106_W %T107_X %T107_Y %T107_Z %T107_W %T108_X %T108_Y %T108_Z %T108_W %T109_X %T109_Y %T109_Z %T109_W %T110_X %T110_Y %T110_Z %T110_W %T111_X %T111_Y %T111_Z %T111_W %T112_X %T112_Y %T112_Z %T112_W %T113_X %T113_Y %T113_Z %T113_W %T114_X %T114_Y %T114_Z %T114_W %T115_X %T115_Y %T115_Z %T115_W %T116_X %T116_Y %T116_Z %T116_W %T117_X %T117_Y %T117_Z %T117_W %T118_X %T118_Y %T118_Z %T118_W %T119_X %T119_Y %T119_Z %T119_W %T120_X %T120_Y %T120_Z %T120_W %T121_X %T121_Y %T121_Z %T121_W %T122_X %T122_Y %T122_Z %T122_W %T123_X %T123_Y %T123_Z %T123_W %T124_X %T124_Y %T124_Z %T124_W %T125_X %T125_Y %T125_Z %T125_W %T126_X %T126_Y %T126_Z %T126_W %T127_X %T127_Y %T127_Z %T127_W %AR_X %ArrayBase448 %ArrayBase449 %ArrayBase450 %ArrayBase451 %ArrayBase452 %ArrayBase453 %ArrayBase454 %ArrayBase455 %ArrayBase456 %ArrayBase457 %ArrayBase458 %ArrayBase459 %ArrayBase460 %ArrayBase461 %ArrayBase462 %ArrayBase463 %ArrayBase464 %ArrayBase465 %ArrayBase466 %ArrayBase467 %ArrayBase468 %ArrayBase469 %ArrayBase470 %ArrayBase471 %ArrayBase472 %ArrayBase473 %ArrayBase474 %ArrayBase475 %ArrayBase476 %ArrayBase477 %ArrayBase478 %ArrayBase479 %ArrayBase480 %Addr0_X %Addr1_X %Addr2_X %Addr3_X %Addr4_X %Addr5_X %Addr6_X %Addr7_X %Addr8_X %Addr9_X %Addr10_X %Addr11_X %Addr12_X %Addr13_X %Addr14_X %Addr15_X %Addr16_X %Addr17_X %Addr18_X %Addr19_X %Addr20_X %Addr21_X %Addr22_X %Addr23_X %Addr24_X %Addr25_X %Addr26_X %Addr27_X %Addr28_X %Addr29_X %Addr30_X %Addr31_X %Addr32_X %Addr33_X %Addr34_X %Addr35_X %Addr36_X %Addr37_X %Addr38_X %Addr39_X %Addr40_X %Addr41_X %Addr42_X %Addr43_X %Addr44_X %Addr45_X %Addr46_X %Addr47_X %Addr48_X %Addr49_X %Addr50_X %Addr51_X %Addr52_X %Addr53_X %Addr54_X %Addr55_X %Addr56_X %Addr57_X %Addr58_X %Addr59_X %Addr60_X %Addr61_X %Addr62_X %Addr63_X %Addr64_X %Addr65_X %Addr66_X %Addr67_X %Addr68_X %Addr69_X %Addr70_X %Addr71_X %Addr72_X %Addr73_X %Addr74_X %Addr75_X %Addr76_X %Addr77_X %Addr78_X %Addr79_X %Addr80_X %Addr81_X %Addr82_X %Addr83_X %Addr84_X %Addr85_X %Addr86_X %Addr87_X %Addr88_X %Addr89_X %Addr90_X %Addr91_X %Addr92_X %Addr93_X %Addr94_X %Addr95_X %Addr96_X %Addr97_X %Addr98_X %Addr99_X %Addr100_X %Addr101_X %Addr102_X %Addr103_X %Addr104_X %Addr105_X %Addr106_X %Addr107_X %Addr108_X %Addr109_X %Addr110_X %Addr111_X %Addr112_X %Addr113_X %Addr114_X %Addr115_X %Addr116_X %Addr117_X %Addr118_X %Addr119_X %Addr120_X %Addr121_X %Addr122_X %Addr123_X %Addr124_X %Addr125_X %Addr126_X %Addr127_X %KC0_128_X %KC0_128_Y %KC0_128_Z %KC0_128_W %KC0_129_X %KC0_129_Y %KC0_129_Z %KC0_129_W %KC0_130_X %KC0_130_Y %KC0_130_Z %KC0_130_W %KC0_131_X %KC0_131_Y %KC0_131_Z %KC0_131_W %KC0_132_X %KC0_132_Y %KC0_132_Z %KC0_132_W %KC0_133_X %KC0_133_Y %KC0_133_Z %KC0_133_W %KC0_134_X %KC0_134_Y %KC0_134_Z %KC0_134_W %KC0_135_X %KC0_135_Y %KC0_135_Z %KC0_135_W %KC0_136_X %KC0_136_Y %KC0_136_Z %KC0_136_W %KC0_137_X %KC0_137_Y %KC0_137_Z %KC0_137_W %KC0_138_X %KC0_138_Y %KC0_138_Z %KC0_138_W %KC0_139_X %KC0_139_Y %KC0_139_Z %KC0_139_W %KC0_140_X %KC0_140_Y %KC0_140_Z %KC0_140_W %KC0_141_X %KC0_141_Y %KC0_141_Z %KC0_141_W %KC0_142_X %KC0_142_Y %KC0_142_Z %KC0_142_W %KC0_143_X %KC0_143_Y %KC0_143_Z %KC0_143_W %KC0_144_X %KC0_144_Y %KC0_144_Z %KC0_144_W %KC0_145_X %KC0_145_Y %KC0_145_Z %KC0_145_W %KC0_146_X %KC0_146_Y %KC0_146_Z %KC0_146_W %KC0_147_X %KC0_147_Y %KC0_147_Z %KC0_147_W %KC0_148_X %KC0_148_Y %KC0_148_Z %KC0_148_W %KC0_149_X %KC0_149_Y %KC0_149_Z %KC0_149_W %KC0_150_X %KC0_150_Y %KC0_150_Z %KC0_150_W %KC0_151_X %KC0_151_Y %KC0_151_Z %KC0_151_W %KC0_152_X %KC0_152_Y %KC0_152_Z %KC0_152_W %KC0_153_X %KC0_153_Y %KC0_153_Z %KC0_153_W %KC0_154_X %KC0_154_Y %KC0_154_Z %KC0_154_W %KC0_155_X %KC0_155_Y %KC0_155_Z %KC0_155_W %KC0_156_X %KC0_156_Y %KC0_156_Z %KC0_156_W %KC0_157_X %KC0_157_Y %KC0_157_Z %KC0_157_W %KC0_158_X %KC0_158_Y %KC0_158_Z %KC0_158_W %KC0_159_X %KC0_159_Y %KC0_159_Z %KC0_159_W %KC1_160_X %KC1_160_Y %KC1_160_Z %KC1_160_W %KC1_161_X %KC1_161_Y %KC1_161_Z %KC1_161_W %KC1_162_X %KC1_162_Y %KC1_162_Z %KC1_162_W %KC1_163_X %KC1_163_Y %KC1_163_Z %KC1_163_W %KC1_164_X %KC1_164_Y %KC1_164_Z %KC1_164_W %KC1_165_X %KC1_165_Y %KC1_165_Z %KC1_165_W %KC1_166_X %KC1_166_Y %KC1_166_Z %KC1_166_W %KC1_167_X %KC1_167_Y %KC1_167_Z %KC1_167_W %KC1_168_X %KC1_168_Y %KC1_168_Z %KC1_168_W %KC1_169_X %KC1_169_Y %KC1_169_Z %KC1_169_W %KC1_170_X %KC1_170_Y %KC1_170_Z %KC1_170_W %KC1_171_X %KC1_171_Y %KC1_171_Z %KC1_171_W %KC1_172_X %KC1_172_Y %KC1_172_Z %KC1_172_W %KC1_173_X %KC1_173_Y %KC1_173_Z %KC1_173_W %KC1_174_X %KC1_174_Y %KC1_174_Z %KC1_174_W %KC1_175_X %KC1_175_Y %KC1_175_Z %KC1_175_W %KC1_176_X %KC1_176_Y %KC1_176_Z %KC1_176_W %KC1_177_X %KC1_177_Y %KC1_177_Z %KC1_177_W %KC1_178_X %KC1_178_Y %KC1_178_Z %KC1_178_W %KC1_179_X %KC1_179_Y %KC1_179_Z %KC1_179_W %KC1_180_X %KC1_180_Y %KC1_180_Z %KC1_180_W %KC1_181_X %KC1_181_Y %KC1_181_Z %KC1_181_W %KC1_182_X %KC1_182_Y %KC1_182_Z %KC1_182_W %KC1_183_X %KC1_183_Y %KC1_183_Z %KC1_183_W %KC1_184_X %KC1_184_Y %KC1_184_Z %KC1_184_W %KC1_185_X %KC1_185_Y %KC1_185_Z %KC1_185_W %KC1_186_X %KC1_186_Y %KC1_186_Z %KC1_186_W %KC1_187_X %KC1_187_Y %KC1_187_Z %KC1_187_W %KC1_188_X %KC1_188_Y %KC1_188_Z %KC1_188_W %KC1_189_X %KC1_189_Y %KC1_189_Z %KC1_189_W %KC1_190_X %KC1_190_Y %KC1_190_Z %KC1_190_W %KC1_191_X %KC1_191_Y %KC1_191_Z %KC1_191_W %ZERO %HALF %ONE %ONE_INT %PV_X %ALU_LITERAL_X %NEG_ONE %NEG_HALF %ALU_CONST %ALU_PARAM %OQAP ]
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
   val SU(9): Latency=0 Reg=%vreg4

SU(1):   %vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
   val SU(10): Latency=0 Reg=%vreg3

SU(2):   %vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 14
  Successors:
   val SU(4): Latency=0 Reg=%vreg2

SU(3):   %vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 14
  Successors:
   val SU(7): Latency=0 Reg=%vreg1

SU(4):   %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 14
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg2
  Successors:
   val SU(11): Latency=10 Reg=%vreg5
   ch  SU(6): Latency=0

SU(5):   %vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 14
  Successors:
   val SU(6): Latency=0 Reg=%vreg22

SU(6):   %vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 14
  Predecessors:
   val SU(5): Latency=0 Reg=%vreg22
   ch  SU(4): Latency=0
  Successors:
   val SU(12): Latency=10 Reg=%vreg8
   ch  SU(7): Latency=0

SU(7):   %vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 14
  Predecessors:
   val SU(3): Latency=0 Reg=%vreg1
   ch  SU(6): Latency=0
  Successors:
   val SU(8): Latency=10 Reg=%vreg9
   ch  SU(12): Latency=0

SU(8):   %vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
   val SU(7): Latency=10 Reg=%vreg9
  Successors:
   val SU(9): Latency=1 Reg=%vreg11

SU(9):   %vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
   val SU(8): Latency=1 Reg=%vreg11
   val SU(0): Latency=0 Reg=%vreg4
  Successors:
   val SU(10): Latency=1 Reg=%vreg12

SU(10):   %vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
   val SU(9): Latency=1 Reg=%vreg12
   val SU(1): Latency=0 Reg=%vreg3
  Successors:
   val SU(12): Latency=1 Reg=%vreg20
   val SU(11): Latency=1 Reg=%vreg20

SU(11):   %vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
   val SU(10): Latency=1 Reg=%vreg20
   val SU(4): Latency=10 Reg=%vreg5
  Successors:
   val SU(12): Latency=1 Reg=%vreg21

SU(12):   BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 450
  Depth              : 14
  Height             : 0
  Predecessors:
   val SU(11): Latency=1 Reg=%vreg21
   val SU(10): Latency=1 Reg=%vreg20
   val SU(6): Latency=10 Reg=%vreg8
   ch  SU(7): Latency=0

Critical Path(GS-RR ): 14
Pick Bot NOCAND
Scheduling SU(12) BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
  LiveReg: %vreg20
  UpdateRegP: SU(12) BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
  UpdateRegP: SU(11) %vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
  LiveReg: %vreg21
  UpdateRegP: SU(12) BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
  LiveReg: %vreg8
  UpdateRegP: SU(12) BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
  Ready @0c
  HWVMEM +1x217u
  BotQ.A TopLatency SU(12) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(11) %vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
  LiveReg: %vreg5
  UpdateRegP: SU(11) %vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
  Ready @1c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(10) %vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
  LiveReg: %vreg12
  UpdateRegP: SU(10) %vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
  LiveReg: %vreg3
  UpdateRegP: SU(10) %vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
  Ready @2c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
BotQ.A RemLatency SU(9) 11c
  TopQ.A + Remain MOps: 5
TopQ.A RemLatency SU(2) 14c
  BotQ.A + Remain MOps: 8
BotQ.A: 9 1 
  SU(9) ORDER                              
TopQ.A: 0 1 2 3 5 
  SU(0) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(9) %vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
  LiveReg: %vreg11
  UpdateRegP: SU(9) %vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
  LiveReg: %vreg4
  UpdateRegP: SU(9) %vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
  Ready @3c
  HWSALU +1x3255u
  BotQ.A BotLatency SU(9) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
BotQ.A RemLatency SU(8) 10c
  TopQ.A + Remain MOps: 4
TopQ.A RemLatency SU(2) 14c
  BotQ.A + Remain MOps: 8
BotQ.A: 1 8 0 
  SU(1) ORDER                              
  SU(8) PREG-COPY                         
TopQ.A: 0 1 2 3 5 
  SU(0) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(8) %vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
  LiveReg: %vreg9
  UpdateRegP: SU(8) %vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
  Ready @4c
  HWSALU +1x3255u
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.P: 7 
  TopQ.A + Remain MOps: 3
TopQ.A RemLatency SU(2) 14c
  BotQ.A + Remain MOps: 8
BotQ.A: 1 0 
  SU(1) ORDER                              
TopQ.A: 0 1 2 3 5 
  SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
handleMove 32B -> 136B: %vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
     %vreg3:	[32r,176r:0)  0@32r
        -->	[136r,176r:0)  0@136r
     VGPR0:	[0B,32r:0)  0@0B-phi
        -->	[0B,136r:0)  0@0B-phi
  LiveReg: VGPR0
  Ready @5c
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(0) %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
handleMove 16B -> 132B: %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
     %vreg4:	[16r,160r:0)  0@16r
        -->	[132r,160r:0)  0@132r
     SGPR12:	[0B,16r:0)  0@0B-phi
        -->	[0B,132r:0)  0@0B-phi
  LiveReg: SGPR12
  Ready @5c
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
Cycle: 6 BotQ.A
BotQ.P: 7 
Cycle: 14 BotQ.A
Pick Bot NOCAND
Scheduling SU(7) %vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
  LiveReg: %vreg1
  UpdateRegP: SU(7) %vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
  Ready @14c
  HWLGKM +1x105u
  BotQ.A BotLatency SU(7) 14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 6
  Executed: 15c
  Critical: 6c, 6 MOps
  ExpectedLatency: 14c
  - Latency limited.
  TopQ.A + Remain MOps: 2
TopQ.A RemLatency SU(3) 14c
  BotQ.A + Remain MOps: 8
BotQ.A: 3 6 
  SU(3) ORDER                              
  SU(6) PREG-COPY                         
TopQ.A: 3 5 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(6) %vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
  LiveReg: %vreg22
  UpdateRegP: SU(6) %vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
  Ready @15c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 7
  Executed: 16c
  Critical: 7c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
  TopQ.A + Remain MOps: 1
  BotQ.A RemainingLatency 0 + 16c > CritPath 14
TopQ.A RemLatency SU(3) 14c
  BotQ.A + Remain MOps: 8
BotQ.A: 3 5 4 
  SU(3) ORDER                              
  SU(5) ORDER                              
  SU(4) PREG-COPY                         
TopQ.A: 3 5 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(4) %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
handleMove 80B -> 104B: %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
     %vreg5:	[80r,192r:0)  0@80r
        -->	[104r,192r:0)  0@104r
     %vreg2:	[48r,80r:0)  0@48r
        -->	[48r,104r:0)  0@48r
  LiveReg: %vreg2
  UpdateRegP: SU(4) %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
  Ready @16c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
  TopQ.A + Remain MOps: 0
  BotQ.A RemainingLatency 0 + 17c > CritPath 14
TopQ.A RemLatency SU(3) 14c
  BotQ.A + Remain MOps: 8
BotQ.A: 3 5 2 
  SU(3) ORDER                              
  SU(5) ORDER                              
TopQ.A: 3 5 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
  LiveReg: SGPR2
  LiveReg: SGPR3
  Ready @17c
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
  TopQ.A + Remain MOps: 0
  BotQ.A RemainingLatency 0 + 17c > CritPath 14
TopQ.A RemLatency SU(3) 14c
  BotQ.A + Remain MOps: 8
BotQ.A: 3 2 
  SU(3) ORDER                              
TopQ.A: 3 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
  LiveReg: SGPR4
  LiveReg: SGPR5
  LiveReg: SGPR6
  LiveReg: SGPR7
  Ready @17c
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(2) %vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
  LiveReg: SGPR8
  LiveReg: SGPR9
  LiveReg: SGPR10
  LiveReg: SGPR11
  Ready @17c
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
*** Final schedule for BB#0 ***
SU(2):   %vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
SU(3):   %vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
SU(5):   %vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
SU(4):   %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
SU(6):   %vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
SU(7):   %vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
SU(0):   %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
SU(1):   %vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
SU(8):   %vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
SU(9):   %vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
SU(10):   %vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
SU(11):   %vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
SU(12):   BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8

********** INTERVALS **********
SGPR2 [0B,96r:0)  0@0B-phi
SGPR3 [0B,96r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,132r:0)  0@0B-phi
VGPR0 [0B,136r:0)  0@0B-phi
%vreg1 [64r,128r:0)  0@64r
%vreg2 [48r,104r:0)  0@48r
%vreg3 [136r,176r:0)  0@136r
%vreg4 [132r,160r:0)  0@132r
%vreg5 [104r,192r:0)  0@104r
%vreg8 [112r,208r:0)  0@112r
%vreg9 [128r,144r:0)  0@128r
%vreg11 [144r,160r:0)  0@144r
%vreg12 [160r,176r:0)  0@160r
%vreg20 [176r,208r:0)  0@176r
%vreg21 [192r,208r:0)  0@192r
%vreg22 [96r,112r:0)  0@96r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
104B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
132B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
136B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
104B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
132B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
136B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After SI Fix CF Live Intervals ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
104B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
132B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
136B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.


block-frequency: Global1
========================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: Global1
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
104B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
132B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
136B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
104B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
132B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
136B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
104B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
132B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
136B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
104B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
132B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
136B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.

********** GREEDY REGISTER ALLOCATION **********
********** Function: Global1
********** Compute Spill Weights **********
********** Function: Global1
********** INTERVALS **********
SGPR2 [0B,96r:0)  0@0B-phi
SGPR3 [0B,96r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,132r:0)  0@0B-phi
VGPR0 [0B,136r:0)  0@0B-phi
%vreg1 [64r,128r:0)  0@64r
%vreg2 [48r,104r:0)  0@48r
%vreg3 [136r,176r:0)  0@136r
%vreg4 [132r,160r:0)  0@132r
%vreg5 [104r,192r:0)  0@104r
%vreg8 [112r,208r:0)  0@112r
%vreg9 [128r,144r:0)  0@128r
%vreg11 [144r,160r:0)  0@144r
%vreg12 [160r,176r:0)  0@160r
%vreg20 [176r,208r:0)  0@176r
%vreg21 [192r,208r:0)  0@192r
%vreg22 [96r,112r:0)  0@96r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg22

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
104B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg9 SReg_128:%vreg1
132B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
136B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
144B		%vreg11<def> = S_MIN_U32 %vreg9, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11, %vreg4; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20, %vreg21, %vreg8, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM

# End machine code for function Global1.


selectOrSplit SReg_128:%vreg2 [48r,104r:0)  0@48r w=4.429825e-03
AllocationOrder(SReg_128) = [ %SGPR0_SGPR1_SGPR2_SGPR3 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR12_SGPR13_SGPR14_SGPR15 %SGPR16_SGPR17_SGPR18_SGPR19 %SGPR20_SGPR21_SGPR22_SGPR23 %SGPR24_SGPR25_SGPR26_SGPR27 %SGPR28_SGPR29_SGPR30_SGPR31 %SGPR32_SGPR33_SGPR34_SGPR35 %SGPR36_SGPR37_SGPR38_SGPR39 %SGPR40_SGPR41_SGPR42_SGPR43 %SGPR44_SGPR45_SGPR46_SGPR47 %SGPR48_SGPR49_SGPR50_SGPR51 %SGPR52_SGPR53_SGPR54_SGPR55 %SGPR56_SGPR57_SGPR58_SGPR59 %SGPR60_SGPR61_SGPR62_SGPR63 %SGPR64_SGPR65_SGPR66_SGPR67 %SGPR68_SGPR69_SGPR70_SGPR71 %SGPR72_SGPR73_SGPR74_SGPR75 %SGPR76_SGPR77_SGPR78_SGPR79 %SGPR80_SGPR81_SGPR82_SGPR83 %SGPR84_SGPR85_SGPR86_SGPR87 %SGPR88_SGPR89_SGPR90_SGPR91 %SGPR92_SGPR93_SGPR94_SGPR95 %SGPR96_SGPR97_SGPR98_SGPR99 ]
hints: %SGPR8_SGPR9_SGPR10_SGPR11
assigning %vreg2 to %SGPR8_SGPR9_SGPR10_SGPR11: SGPR8 [48r,104r:0)  0@48r SGPR9 [48r,104r:0)  0@48r SGPR10 [48r,104r:0)  0@48r SGPR11 [48r,104r:0)  0@48r

selectOrSplit SReg_128:%vreg1 [64r,128r:0)  0@64r w=4.353448e-03
hints: %SGPR4_SGPR5_SGPR6_SGPR7
assigning %vreg1 to %SGPR4_SGPR5_SGPR6_SGPR7: SGPR4 [64r,128r:0)  0@64r SGPR5 [64r,128r:0)  0@64r SGPR6 [64r,128r:0)  0@64r SGPR7 [64r,128r:0)  0@64r

selectOrSplit SReg_64:%vreg22 [96r,112r:0)  0@96r w=4.855769e-03
AllocationOrder(SReg_64) = [ %SGPR0_SGPR1 %SGPR2_SGPR3 %SGPR4_SGPR5 %SGPR6_SGPR7 %SGPR8_SGPR9 %SGPR10_SGPR11 %SGPR12_SGPR13 %SGPR14_SGPR15 %SGPR16_SGPR17 %SGPR18_SGPR19 %SGPR20_SGPR21 %SGPR22_SGPR23 %SGPR24_SGPR25 %SGPR26_SGPR27 %SGPR28_SGPR29 %SGPR30_SGPR31 %SGPR32_SGPR33 %SGPR34_SGPR35 %SGPR36_SGPR37 %SGPR38_SGPR39 %SGPR40_SGPR41 %SGPR42_SGPR43 %SGPR44_SGPR45 %SGPR46_SGPR47 %SGPR48_SGPR49 %SGPR50_SGPR51 %SGPR52_SGPR53 %SGPR54_SGPR55 %SGPR56_SGPR57 %SGPR58_SGPR59 %SGPR60_SGPR61 %SGPR62_SGPR63 %SGPR64_SGPR65 %SGPR66_SGPR67 %SGPR68_SGPR69 %SGPR70_SGPR71 %SGPR72_SGPR73 %SGPR74_SGPR75 %SGPR76_SGPR77 %SGPR78_SGPR79 %SGPR80_SGPR81 %SGPR82_SGPR83 %SGPR84_SGPR85 %SGPR86_SGPR87 %SGPR88_SGPR89 %SGPR90_SGPR91 %SGPR92_SGPR93 %SGPR94_SGPR95 %SGPR96_SGPR97 %SGPR98_SGPR99 %SGPR100_SGPR101 %VCC ]
hints: %SGPR2_SGPR3
assigning %vreg22 to %SGPR2_SGPR3: SGPR2 [96r,112r:0)  0@96r SGPR3 [96r,112r:0)  0@96r

selectOrSplit SReg_32:%vreg4 [132r,160r:0)  0@132r w=4.719626e-03
AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
hints: %SGPR12
assigning %vreg4 to %SGPR12: SGPR12 [132r,160r:0)  0@132r

selectOrSplit VGPR_32:%vreg3 [136r,176r:0)  0@136r w=4.590909e-03
AllocationOrder(VGPR_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 ]
hints: %VGPR0
assigning %vreg3 to %VGPR0: VGPR0 [136r,176r:0)  0@136r

selectOrSplit SGPR_32:%vreg5 [104r,192r:0)  0@104r w=4.098360e-03
AllocationOrder(SGPR_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 ]
assigning %vreg5 to %SGPR0: SGPR0 [104r,192r:0)  0@104r

selectOrSplit SReg_128:%vreg8 [112r,208r:0)  0@112r w=4.032258e-03
assigning %vreg8 to %SGPR8_SGPR9_SGPR10_SGPR11: SGPR8 [112r,208r:0)  0@112r SGPR9 [112r,208r:0)  0@112r SGPR10 [112r,208r:0)  0@112r SGPR11 [112r,208r:0)  0@112r

selectOrSplit SGPR_32:%vreg9 [128r,144r:0)  0@128r w=4.807692e-03
assigning %vreg9 to %SGPR1: SGPR1 [128r,144r:0)  0@128r

selectOrSplit SReg_32:%vreg11 [144r,160r:0)  0@144r w=inf
assigning %vreg11 to %SGPR1: SGPR1 [144r,160r:0)  0@144r

selectOrSplit SReg_32:%vreg12 [160r,176r:0)  0@160r w=inf
assigning %vreg12 to %SGPR1: SGPR1 [160r,176r:0)  0@160r

selectOrSplit VGPR_32:%vreg20 [176r,208r:0)  0@176r w=6.944444e-03
assigning %vreg20 to %VGPR0: VGPR0 [176r,208r:0)  0@176r

selectOrSplit VGPR_32:%vreg21 [192r,208r:0)  0@192r w=inf
assigning %vreg21 to %VGPR1: VGPR1 [192r,208r:0)  0@192r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: Global1
********** REGISTER MAP **********
[%vreg1 -> %SGPR4_SGPR5_SGPR6_SGPR7] SReg_128
[%vreg2 -> %SGPR8_SGPR9_SGPR10_SGPR11] SReg_128
[%vreg3 -> %VGPR0] VGPR_32
[%vreg4 -> %SGPR12] SReg_32
[%vreg5 -> %SGPR0] SGPR_32
[%vreg8 -> %SGPR8_SGPR9_SGPR10_SGPR11] SReg_128
[%vreg9 -> %SGPR1] SGPR_32
[%vreg11 -> %SGPR1] SReg_32
[%vreg12 -> %SGPR1] SReg_32
[%vreg20 -> %VGPR0] VGPR_32
[%vreg21 -> %VGPR1] VGPR_32
[%vreg22 -> %SGPR2_SGPR3] SReg_64

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
96B		%vreg22<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg22
104B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 0; SGPR_32:%vreg5 SReg_128:%vreg2
112B		%vreg8<def> = S_LOAD_DWORDX4_IMM %vreg22<kill>, 80; SReg_128:%vreg8 SReg_64:%vreg22
128B		%vreg9<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg9 SReg_128:%vreg1
132B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
136B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
144B		%vreg11<def> = S_MIN_U32 %vreg9<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg11 SGPR_32:%vreg9
160B		%vreg12<def> = S_MUL_I32 %vreg11<kill>, %vreg4<kill>; SReg_32:%vreg12,%vreg11,%vreg4
176B		%vreg20<def> = V_ADD_I32_e32 %vreg12<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg20,%vreg3 SReg_32:%vreg12
192B		%vreg21<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg20, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg21,%vreg20 SGPR_32:%vreg5
208B		BUFFER_STORE_BYTE_OFFEN %vreg20<kill>, %vreg21<kill>, %vreg8<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg20,%vreg21 SReg_128:%vreg8
224B		S_ENDPGM
> %SGPR8_SGPR9_SGPR10_SGPR11<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11
Deleting identity copy.
> %SGPR4_SGPR5_SGPR6_SGPR7<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7
Deleting identity copy.
> %SGPR2_SGPR3<def> = COPY %SGPR2_SGPR3
Deleting identity copy.
> %SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
> %SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
> %SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
> %SGPR12<def> = COPY %SGPR12
Deleting identity copy.
> %VGPR0<def> = COPY %VGPR0
Deleting identity copy.
> %SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
> %SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
> %VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
> BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
> S_ENDPGM
# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
104B		%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
112B		%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
128B		%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
144B		%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
160B		%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
176B		%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
192B		%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
208B		BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
224B		S_ENDPGM

# End machine code for function Global1.

********** Stack Slot Coloring **********
********** Function: Global1
# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.

******** Post-regalloc Machine LICM: Global1 ********
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.


block-frequency: Global1
========================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: Global1
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function Global1: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.

MCP: CopyPropagateBlock entry
# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.

Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: Global1
# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.


block-frequency: Global1
========================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: Global1
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.

********** COMPUTING STACKMAP LIVENESS: Global1 **********
# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function Global1: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0
	%SGPR8_SGPR9_SGPR10_SGPR11<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	S_WAITCNT 127
	%SGPR1<def> = S_MIN_U32 %SGPR1<kill>, 65535, %SCC<imp-def,dead>
	%SGPR1<def> = S_MUL_I32 %SGPR1<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_BYTE_OFFEN %VGPR0<kill>, %VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 0, 0, -1, 0, 0, %EXEC<imp-use>; mem:ST1[%pac.arrayidx(addrspace=1)]
	S_ENDPGM

# End machine code for function Global1.


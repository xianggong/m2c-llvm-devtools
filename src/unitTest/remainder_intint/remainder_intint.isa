ShaderType = IL_SHADER_COMPUTE
TargetChip = t
; ------------- SC_SRCSHADER Dump ------------------
SC_SHADERSTATE: u32NumIntVSConst = 0
SC_SHADERSTATE: u32NumIntPSConst = 0
SC_SHADERSTATE: u32NumIntGSConst = 0
SC_SHADERSTATE: u32NumBoolVSConst = 0
SC_SHADERSTATE: u32NumBoolPSConst = 0
SC_SHADERSTATE: u32NumBoolGSConst = 0
SC_SHADERSTATE: u32NumFloatVSConst = 0
SC_SHADERSTATE: u32NumFloatPSConst = 0
SC_SHADERSTATE: u32NumFloatGSConst = 0
u32SCOptions[0] = 0x00680000 SCOption_IGNORE_SAMPLE_L_BUG SCOption_FLOAT_DO_NOT_DIST SCOption_FLOAT_DO_NOT_REASSOC
u32SCOptions[1] = 0x40000000 SCOption_R800_UAV_NONARRAY_FIXUP
u32SCOptions[2] = 0x08200000 SCOption_R1000_BYTE_SHORT_WRITE_WORKAROUND_BUG317611 SCOption_R1000_READLANE_SMRD_WORKAROUND_BUG343479
u32SCOptions[3] = 0x00800204 SCOption_R1000_BARRIER_WORKAROUND_BUG405404 SCOption_R1000R1100_VCCZ_CLOBBER_WORKAROUND_BUG457939 SCOption_SELECTIVE_INLINE
u32SCOptions[4] = 0x00004000 SCOption_R1000_ENABLE_CALL_STACK
; -------- Disassembly --------------------
shader main
  asic(SI)
  type(CS)

  s_movk_i32    s14, 0x0000                                 // 00000000: B00E0000
  s_sub_u32     s14, s14, 0                                 // 00000004: 808E800E
  s_sub_u32     s25, s14, 0                                 // 00000008: 8099800E
  s_buffer_load_dword  s0, s[4:7], 0x04                     // 0000000C: C2000504
  s_buffer_load_dword  s1, s[4:7], 0x18                     // 00000010: C2008518
  s_buffer_load_dword  s4, s[8:11], 0x04                    // 00000014: C2020904
  s_waitcnt     lgkmcnt(0)                                  // 00000018: BF8C007F
  s_min_u32     s0, s0, 0x0000ffff                          // 0000001C: 8380FF00 0000FFFF
  s_mul_i32     s0, s12, s0                                 // 00000024: 9300000C
  s_add_u32     s0, s0, s1                                  // 00000028: 80000100
  v_add_i32     v0, vcc, s0, v0                             // 0000002C: 4A000000
  s_load_dwordx4  s[12:15], s[2:3], 0x68                    // 00000030: C0860368
  v_lshlrev_b32  v0, 2, v0                                  // 00000034: 34000082
  v_add_i32     v1, vcc, s4, v0                             // 00000038: 4A020004
  s_waitcnt     lgkmcnt(0)                                  // 0000003C: BF8C007F
  tbuffer_load_format_x  v1, v1, s[12:15], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000040: EBA01000 80030101
  s_buffer_load_dword  s0, s[8:11], 0x00                    // 00000048: C2000900
  s_load_dwordx4  s[4:7], s[2:3], 0x60                      // 0000004C: C0820360
  s_waitcnt     lgkmcnt(0)                                  // 00000050: BF8C007F
  v_add_i32     v2, vcc, s0, v0                             // 00000054: 4A040000
  tbuffer_load_format_x  v2, v2, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000058: EBA01000 80010202
  s_waitcnt     vmcnt(1)                                    // 00000060: BF8C0F71
  v_sub_i32     v3, vcc, 0, v1                              // 00000064: 4C060280
  v_max_i32     v3, v1, v3                                  // 00000068: 24060701
  v_cvt_f32_u32  v4, v3                                     // 0000006C: 7E080D03
  v_rcp_f32     v4, v4                                      // 00000070: 7E085504
  v_mul_f32     v4, 0x4f800000, v4                          // 00000074: 100808FF 4F800000
  v_cvt_u32_f32  v4, v4                                     // 0000007C: 7E080F04
  v_mul_lo_u32  v5, v3, v4                                  // 00000080: D2D20005 00020903
  v_mul_hi_u32  v6, v3, v4                                  // 00000088: D2D40006 00020903
  v_sub_i32     v7, vcc, 0, v5                              // 00000090: 4C0E0A80
  v_cmp_ne_i32  s[0:1], 0, v6                               // 00000094: D10A0000 00020C80
  v_cndmask_b32  v5, v7, v5, s[0:1]                         // 0000009C: D2000005 00020B07
  v_mul_hi_u32  v5, v5, v4                                  // 000000A4: D2D40005 00020905
  s_waitcnt     vmcnt(0)                                    // 000000AC: BF8C0F70
  v_sub_i32     v6, vcc, 0, v2                              // 000000B0: 4C0C0480
  v_sub_i32     v7, vcc, v4, v5                             // 000000B4: 4C0E0B04
  v_add_i32     v4, vcc, v4, v5                             // 000000B8: 4A080B04
  v_max_i32     v5, v2, v6                                  // 000000BC: 240A0D02
  v_cndmask_b32  v4, v4, v7, s[0:1]                         // 000000C0: D2000004 00020F04
  v_mul_hi_u32  v4, v4, v5                                  // 000000C8: D2D40004 00020B04
  v_mul_lo_u32  v6, v4, v3                                  // 000000D0: D2D20006 00020704
  v_sub_i32     v7, vcc, v5, v6                             // 000000D8: 4C0E0D05
  v_cmp_ge_u32  s[0:1], v5, v6                              // 000000DC: D18C0000 00020D05
  v_cmp_ge_u32  s[4:5], v7, v3                              // 000000E4: D18C0004 00020707
  v_cmp_lt_i32  s[6:7], v1, 0                               // 000000EC: D1020006 00010101
  v_cmp_lt_i32  s[12:13], v2, 0                             // 000000F4: D102000C 00010102
  v_add_i32     v5, vcc, 1, v4                              // 000000FC: 4A0A0881
  s_and_b64     s[4:5], s[0:1], s[4:5]                      // 00000100: 87840400
  v_add_i32     v6, vcc, -1, v4                             // 00000104: 4A0C08C1
  v_cndmask_b32  v4, v4, v5, s[4:5]                         // 00000108: D2000004 00120B04
  s_buffer_load_dword  s4, s[8:11], 0x08                    // 00000110: C2020908
  v_cndmask_b32  v4, v6, v4, s[0:1]                         // 00000114: D2000004 00020906
  v_cmp_ne_i32  vcc, 0, v3                                  // 0000011C: 7D0A0680
  v_cndmask_b32  v3, -1, v4, vcc                            // 00000120: 000608C1
  s_xor_b64     s[0:1], s[6:7], s[12:13]                    // 00000124: 89800C06
  v_sub_i32     v4, vcc, 0, v3                              // 00000128: 4C080680
  v_cndmask_b32  v3, v3, v4, s[0:1]                         // 0000012C: D2000003 00020903
  s_load_dwordx4  s[0:3], s[2:3], 0x70                      // 00000134: C0800370
  v_mul_lo_i32  v1, v3, v1                                  // 00000138: D2D60001 00020303
  v_sub_i32     v1, vcc, v2, v1                             // 00000140: 4C020302
  s_waitcnt     lgkmcnt(0)                                  // 00000144: BF8C007F
  v_add_i32     v0, vcc, s4, v0                             // 00000148: 4A000004
  tbuffer_store_format_x  v1, v0, s[0:3], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 0000014C: EBA41000 80000100
  s_endpgm                                                  // 00000154: BF810000
end
; ----------------- CS Data ------------------------

codeLenInByte        = 344 bytes;

; launchModeFlags    = 0x00000003
immediateSupport     = TRUE
srdTableSupport      = TRUE

userElementCount     = 3;
;  userElements[0]      = PTR_UAV_TABLE, Element=1 dwords, s[2:3]
;  userElements[1]      = IMM_CONST_BUFFER 0, s[4:7]
;  userElements[2]      = IMM_CONST_BUFFER 1, s[8:11]
extUserElementCount  = 0;
NumVgprs             = 8;
NumSgprs             = 26;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s24;
; uavResourceUsage[0]  = 0x00007000
; uavReadOnlyUsage[0]  = 0x00003000
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000003

;COMPUTE_PGM_RSRC2       = 0x00000098
COMPUTE_PGM_RSRC2:USER_SGPR      = 12
COMPUTE_PGM_RSRC2:TGID_X_EN      = 1
NumThreadX                       = 256
; Register allocation strategy = 0

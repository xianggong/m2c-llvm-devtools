Args: /home/xgong/Develop/llvm/build/bin/llc -march=amdgcn -mcpu=verde remainder_intint.ll --print-after-all --debug 

Features:+promote-alloca,+fp64-denormals,
CPU:verde

Inliner visiting SCC: remainder_intint: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
Inliner visiting SCC: llvm.r600.read.tgid.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1
Inliner visiting SCC: llvm.r600.read.local.size.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1
Inliner visiting SCC: llvm.r600.read.tidig.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1
Inliner visiting SCC: llvm.SI.m2s.get.uav.desc: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare <4 x i32> @llvm.SI.m2s.get.uav.desc(i32, i32)
Inliner visiting SCC: llvm.SI.if: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare { i1, i64 } @llvm.SI.if(i1)
Inliner visiting SCC: llvm.SI.else: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare { i1, i64 } @llvm.SI.else(i64)
Inliner visiting SCC: llvm.SI.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.break(i64)
Inliner visiting SCC: llvm.SI.if.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.if.break(i1, i64)
Inliner visiting SCC: llvm.SI.else.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.else.break(i64, i64)
Inliner visiting SCC: llvm.SI.loop: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i1 @llvm.SI.loop(i64)
Inliner visiting SCC: llvm.SI.end.cf: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare void @llvm.SI.end.cf(i64)
Inliner visiting SCC: INDIRECTNODE: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'remainder_intint.ll'
target datalayout = "e-p:32:32-p1:32:32-p2:32:32-p3:32:32-p4:32:32-p5:32:32-p24:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64"
target triple = "amdgcn-unknown-m2s-unknown"

; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1

declare <4 x i32> @llvm.SI.m2s.get.uav.desc(i32, i32)

declare { i1, i64 } @llvm.SI.if(i1)

declare { i1, i64 } @llvm.SI.else(i64)

declare i64 @llvm.SI.break(i64)

declare i64 @llvm.SI.if.break(i1, i64)

declare i64 @llvm.SI.else.break(i64, i64)

declare i1 @llvm.SI.loop(i64)

declare void @llvm.SI.end.cf(i64)

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="verde" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "target-cpu"="verde" }
attributes #2 = { nounwind readnone }

!opencl.kernels = !{!0}
!llvm.ident = !{!6, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}

!0 = !{void (i32 addrspace(1)*, i32 addrspace(1)*, i32 addrspace(1)*)* @remainder_intint, !1, !2, !3, !4, !5}
!1 = !{!"kernel_arg_addr_space", i32 1, i32 1, i32 1}
!2 = !{!"kernel_arg_access_qual", !"none", !"none", !"none"}
!3 = !{!"kernel_arg_type", !"int*", !"int*", !"int*"}
!4 = !{!"kernel_arg_base_type", !"int*", !"int*", !"int*"}
!5 = !{!"kernel_arg_type_qual", !"", !"", !""}
!6 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 73e976449b53bf91364bec5926194b37f7f08488) (https://github.com/llvm-mirror/llvm.git e48de91069450173c2d5abaad9da9b25920ef692)"}
!7 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 61690d9018c8da94a7812ae53d501af17f0cf265) (https://github.com/llvm-mirror/llvm.git 591adee23bf68ecae9fccd35c937dd03d15a054e)"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
********** Begin Constant Hoisting **********
********** Function: remainder_intint
********** End Constant Hoisting **********
*** IR Dump After Constant Hoisting ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
32768bytes free in local memory.
SROA function: remainder_intint
*** IR Dump After SROA ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
CGP: Found      local addrmode: [Base:%arrayidx]
CGP: Found      local addrmode: [Base:%arrayidx1]
CGP: Found      local addrmode: [Base:%arrayidx2]
*** IR Dump After CodeGen Prepare ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'remainder_intint.ll'
target datalayout = "e-p:32:32-p1:32:32-p2:32:32-p3:32:32-p4:32:32-p5:32:32-p24:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64"
target triple = "amdgcn-unknown-m2s-unknown"

; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1

declare <4 x i32> @llvm.SI.m2s.get.uav.desc(i32, i32)

declare { i1, i64 } @llvm.SI.if(i1)

declare { i1, i64 } @llvm.SI.else(i64)

declare i64 @llvm.SI.break(i64)

declare i64 @llvm.SI.if.break(i1, i64)

declare i64 @llvm.SI.else.break(i64, i64)

declare i1 @llvm.SI.loop(i64)

declare void @llvm.SI.end.cf(i64)

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="verde" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "target-cpu"="verde" }
attributes #2 = { nounwind readnone }

!opencl.kernels = !{!0}
!llvm.ident = !{!6, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}

!0 = !{void (i32 addrspace(1)*, i32 addrspace(1)*, i32 addrspace(1)*)* @remainder_intint, !1, !2, !3, !4, !5}
!1 = !{!"kernel_arg_addr_space", i32 1, i32 1, i32 1}
!2 = !{!"kernel_arg_access_qual", !"none", !"none", !"none"}
!3 = !{!"kernel_arg_type", !"int*", !"int*", !"int*"}
!4 = !{!"kernel_arg_base_type", !"int*", !"int*", !"int*"}
!5 = !{!"kernel_arg_type_qual", !"", !"", !""}
!6 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 73e976449b53bf91364bec5926194b37f7f08488) (https://github.com/llvm-mirror/llvm.git e48de91069450173c2d5abaad9da9b25920ef692)"}
!7 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 61690d9018c8da94a7812ae53d501af17f0cf265) (https://github.com/llvm-mirror/llvm.git 591adee23bf68ecae9fccd35c937dd03d15a054e)"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Lower invoke and unwind, for unwindless code generators ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Flatten the CFG ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Lower SwitchInst's to branches ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Structurize control flow ***
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %0 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %1 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void

Region tree of function remainder_intint after all region Pass:
Region tree:
[0] entry => <Function Return>
End region tree

Sinking iteration 0
*** IR Dump After Code sinking ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %uav.dst = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 96)
  %uav.src_1 = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 88)
  %uav.src_0 = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 80)
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %pac.arrayidx = call i32 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i32 addrspace(1)* %arrayidx, <4 x i32> %uav.src_0)
  %0 = load i32, i32 addrspace(1)* %pac.arrayidx
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %pac.arrayidx1 = call i32 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i32 addrspace(1)* %arrayidx1, <4 x i32> %uav.src_1)
  %1 = load i32, i32 addrspace(1)* %pac.arrayidx1
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  %pac.arrayidx2 = call i32 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i32 addrspace(1)* %arrayidx2, <4 x i32> %uav.dst)
  store i32 %rem, i32 addrspace(1)* %pac.arrayidx2
  ret void
}
[SafeStack] Function: remainder_intint
[SafeStack]     safestack is not requested for this function
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %uav.dst = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 96)
  %uav.src_1 = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 88)
  %uav.src_0 = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 80)
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %pac.arrayidx = call i32 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i32 addrspace(1)* %arrayidx, <4 x i32> %uav.src_0)
  %0 = load i32, i32 addrspace(1)* %pac.arrayidx
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %pac.arrayidx1 = call i32 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i32 addrspace(1)* %arrayidx1, <4 x i32> %uav.src_1)
  %1 = load i32, i32 addrspace(1)* %pac.arrayidx1
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  %pac.arrayidx2 = call i32 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i32 addrspace(1)* %arrayidx2, <4 x i32> %uav.dst)
  store i32 %rem, i32 addrspace(1)* %pac.arrayidx2
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %uav.dst = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 96)
  %uav.src_1 = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 88)
  %uav.src_0 = call <4 x i32> @llvm.SI.m2s.get.uav.desc(i32 1, i32 80)
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i32 %add.i
  %pac.arrayidx = call i32 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i32 addrspace(1)* %arrayidx, <4 x i32> %uav.src_0)
  %0 = load i32, i32 addrspace(1)* %pac.arrayidx
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i32 %add.i
  %pac.arrayidx1 = call i32 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i32 addrspace(1)* %arrayidx1, <4 x i32> %uav.src_1)
  %1 = load i32, i32 addrspace(1)* %pac.arrayidx1
  %rem = srem i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i32 %add.i
  %pac.arrayidx2 = call i32 addrspace(1)* @llvm.SI.m2s.pac.uav.desc.i32.global(i32 addrspace(1)* %arrayidx2, <4 x i32> %uav.dst)
  store i32 %rem, i32 addrspace(1)* %pac.arrayidx2
  ret void
}
---- Branch Probability Info : remainder_intint ----

Computing probabilities for entry



=== remainder_intint
Initial selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 41 nodes:
  0x3072c40: ch = EntryToken

    0x3072c40: <multiple use>
    0x30d9fd0: v4i32 = Register %vreg2

  0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da220: i32 = Constant<0>

  0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da470: i32 = Constant<4>

  0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da6c0: i32 = Constant<8>

  0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1]

  0x30daa38: i32 = TargetConstant<5355>

  0x30dab60: i32 = Constant<1>

      0x30da348: <multiple use>
      0x30da598: <multiple use>
      0x30da7e8: <multiple use>
    0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1]

    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dac88: i32 = Constant<96>

  0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2]

    0x30dadb0: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dbfc0: i32 = Constant<88>

  0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3]

    0x30dc0e8: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dc210: i32 = Constant<80>

  0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4]

        0x30dca28: i32 = TargetConstant<3265>

      0x30dcb50: i32 = llvm.r600.read.tidig.x 0x30dca28 [ORD=8]

          0x30dc6b0: i32 = TargetConstant<3256>

        0x30dc7d8: i32 = llvm.r600.read.local.size.x 0x30dc6b0 [ORD=6]

          0x30dc460: i32 = TargetConstant<3262>

        0x30dc588: i32 = llvm.r600.read.tgid.x 0x30dc460 [ORD=5]

      0x30dc900: i32 = mul 0x30dc7d8, 0x30dc588 [ORD=7]

    0x30dcc78: i32 = add 0x30dcb50, 0x30dc900 [ORD=9]

    0x30dcda0: i32 = Constant<2>

  0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10]

  0x30dd3d0: i32 = TargetConstant<5357>

    0x30dc338: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da348: <multiple use>
      0x30dd180: <multiple use>
    0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10]

    0x30dc338: <multiple use>
  0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11]

  0x30dd620: i32 = undef

    0x30dd4f8: <multiple use>
    0x30dd4f8: <multiple use>
    0x30dd620: <multiple use>
  0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12]

    0x30dd748: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da598: <multiple use>
      0x30dd180: <multiple use>
    0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13]

    0x30dc0e8: <multiple use>
  0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14]

    0x30dd998: <multiple use>
    0x30dd998: <multiple use>
    0x30dd620: <multiple use>
  0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15]

    0x30ddac0: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da7e8: <multiple use>
      0x30dd180: <multiple use>
    0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17]

    0x30dadb0: <multiple use>
  0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18]

      0x30dde38: <multiple use>
        0x30dd748: <multiple use>
        0x30ddac0: <multiple use>
      0x30ddbe8: i32 = srem 0x30dd748, 0x30ddac0 [ORD=16]

      0x30dde38: <multiple use>
      0x30dd620: <multiple use>
    0x30ddf60: ch = store 0x30dde38:1, 0x30ddbe8, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19]

  0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20]



Combining: 0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20]

Combining: 0x30ddf60: ch = store 0x30dde38:1, 0x30ddbe8, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19]

Combining: 0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18]

Combining: 0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17]

Combining: 0x30ddbe8: i32 = srem 0x30dd748, 0x30ddac0 [ORD=16]

Combining: 0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15]

Combining: 0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14]

Combining: 0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13]

Combining: 0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12]

Combining: 0x30dd620: i32 = undef

Combining: 0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11]

Combining: 0x30dd3d0: i32 = TargetConstant<5357>

Combining: 0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10]

Combining: 0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10]

Combining: 0x30dcda0: i32 = Constant<2>

Combining: 0x30dcc78: i32 = add 0x30dcb50, 0x30dc900 [ORD=9]

Combining: 0x30dcb50: i32 = llvm.r600.read.tidig.x 0x30dca28 [ORD=8]

Combining: 0x30dca28: i32 = TargetConstant<3265>

Combining: 0x30dc900: i32 = mul 0x30dc7d8, 0x30dc588 [ORD=7]

Combining: 0x30dc7d8: i32 = llvm.r600.read.local.size.x 0x30dc6b0 [ORD=6]

Combining: 0x30dc6b0: i32 = TargetConstant<3256>

Combining: 0x30dc588: i32 = llvm.r600.read.tgid.x 0x30dc460 [ORD=5]

Combining: 0x30dc460: i32 = TargetConstant<3262>

Combining: 0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4]

Combining: 0x30dc210: i32 = Constant<80>

Combining: 0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3]

Combining: 0x30dbfc0: i32 = Constant<88>

Combining: 0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2]

Combining: 0x30dac88: i32 = Constant<96>

Combining: 0x30dab60: i32 = Constant<1>

Combining: 0x30daa38: i32 = TargetConstant<5355>

Combining: 0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1]

Combining: 0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1]

Combining: 0x30da6c0: i32 = Constant<8>

Combining: 0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1]

Combining: 0x30da470: i32 = Constant<4>

Combining: 0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1]

Combining: 0x30da220: i32 = Constant<0>

Combining: 0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1]

Combining: 0x30d9fd0: v4i32 = Register %vreg2

Combining: 0x3072c40: ch = EntryToken
Optimized lowered selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 41 nodes:
  0x3072c40: ch = EntryToken

    0x3072c40: <multiple use>
    0x30d9fd0: v4i32 = Register %vreg2

  0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da220: i32 = Constant<0>

  0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da470: i32 = Constant<4>

  0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da6c0: i32 = Constant<8>

  0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1]

  0x30daa38: i32 = TargetConstant<5355>

  0x30dab60: i32 = Constant<1>

      0x30da348: <multiple use>
      0x30da598: <multiple use>
      0x30da7e8: <multiple use>
    0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1]

    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dac88: i32 = Constant<96>

  0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2]

    0x30dadb0: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dbfc0: i32 = Constant<88>

  0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3]

    0x30dc0e8: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dc210: i32 = Constant<80>

  0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4]

        0x30dca28: i32 = TargetConstant<3265>

      0x30dcb50: i32 = llvm.r600.read.tidig.x 0x30dca28 [ORD=8]

          0x30dc6b0: i32 = TargetConstant<3256>

        0x30dc7d8: i32 = llvm.r600.read.local.size.x 0x30dc6b0 [ORD=6]

          0x30dc460: i32 = TargetConstant<3262>

        0x30dc588: i32 = llvm.r600.read.tgid.x 0x30dc460 [ORD=5]

      0x30dc900: i32 = mul 0x30dc7d8, 0x30dc588 [ORD=7]

    0x30dcc78: i32 = add 0x30dcb50, 0x30dc900 [ORD=9]

    0x30dcda0: i32 = Constant<2>

  0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10]

  0x30dd3d0: i32 = TargetConstant<5357>

    0x30dc338: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da348: <multiple use>
      0x30dd180: <multiple use>
    0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10]

    0x30dc338: <multiple use>
  0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11]

  0x30dd620: i32 = undef

    0x30dd4f8: <multiple use>
    0x30dd4f8: <multiple use>
    0x30dd620: <multiple use>
  0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12]

    0x30dd748: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da598: <multiple use>
      0x30dd180: <multiple use>
    0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13]

    0x30dc0e8: <multiple use>
  0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14]

    0x30dd998: <multiple use>
    0x30dd998: <multiple use>
    0x30dd620: <multiple use>
  0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15]

    0x30ddac0: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da7e8: <multiple use>
      0x30dd180: <multiple use>
    0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17]

    0x30dadb0: <multiple use>
  0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18]

      0x30dde38: <multiple use>
        0x30dd748: <multiple use>
        0x30ddac0: <multiple use>
      0x30ddbe8: i32 = srem 0x30dd748, 0x30ddac0 [ORD=16]

      0x30dde38: <multiple use>
      0x30dd620: <multiple use>
    0x30ddf60: ch = store 0x30dde38:1, 0x30ddbe8, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19]

  0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20]


Legally typed node: 0x30dd620: i32 = undef [ID=0]

Legally typed node: 0x30dd3d0: i32 = TargetConstant<5357> [ID=0]

Legally typed node: 0x30dcda0: i32 = Constant<2> [ID=0]

Legally typed node: 0x30dca28: i32 = TargetConstant<3265> [ID=0]

Legally typed node: 0x30dcb50: i32 = llvm.r600.read.tidig.x 0x30dca28 [ORD=8] [ID=0]

Legally typed node: 0x30dc6b0: i32 = TargetConstant<3256> [ID=0]

Legally typed node: 0x30dc7d8: i32 = llvm.r600.read.local.size.x 0x30dc6b0 [ORD=6] [ID=0]

Legally typed node: 0x30dc460: i32 = TargetConstant<3262> [ID=0]

Legally typed node: 0x30dc588: i32 = llvm.r600.read.tgid.x 0x30dc460 [ORD=5] [ID=0]

Legally typed node: 0x30dc900: i32 = mul 0x30dc7d8, 0x30dc588 [ORD=7] [ID=0]

Legally typed node: 0x30dcc78: i32 = add 0x30dcb50, 0x30dc900 [ORD=9] [ID=0]

Legally typed node: 0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10] [ID=0]

Legally typed node: 0x30dc210: i32 = Constant<80> [ID=0]

Legally typed node: 0x30dbfc0: i32 = Constant<88> [ID=0]

Legally typed node: 0x30dac88: i32 = Constant<96> [ID=0]

Legally typed node: 0x30dab60: i32 = Constant<1> [ID=0]

Legally typed node: 0x30daa38: i32 = TargetConstant<5355> [ID=0]

Legally typed node: 0x30da6c0: i32 = Constant<8> [ID=0]

Legally typed node: 0x30da470: i32 = Constant<4> [ID=0]

Legally typed node: 0x30da220: i32 = Constant<0> [ID=0]

Legally typed node: 0x30d9fd0: v4i32 = Register %vreg2 [ID=0]

Legally typed node: 0x3072c40: ch = EntryToken [ID=0]

Legally typed node: 0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=0]

Legally typed node: 0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1] [ID=0]

Legally typed node: 0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10] [ID=0]

Legally typed node: 0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1] [ID=0]

Legally typed node: 0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13] [ID=0]

Legally typed node: 0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1] [ID=0]

Legally typed node: 0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=0]

Legally typed node: 0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2] [ID=0]

Legally typed node: 0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3] [ID=0]

Legally typed node: 0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4] [ID=0]

Legally typed node: 0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11] [ID=0]

Legally typed node: 0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=0]

Legally typed node: 0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14] [ID=0]

Legally typed node: 0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=0]

Legally typed node: 0x30ddbe8: i32 = srem 0x30dd748, 0x30ddac0 [ORD=16] [ID=0]

Legally typed node: 0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17] [ID=0]

Legally typed node: 0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18] [ID=0]

Legally typed node: 0x30ddf60: ch = store 0x30dde38:1, 0x30ddbe8, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=0]

Legally typed node: 0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20] [ID=0]

Legally typed node: 0x7ffcd622b020: ch = handlenode 0x30de3e0 [ID=0]

Type-legalized selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 41 nodes:
  0x3072c40: ch = EntryToken [ID=-3]

    0x3072c40: <multiple use>
    0x30d9fd0: v4i32 = Register %vreg2 [ID=-3]

  0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=-3]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da220: i32 = Constant<0> [ID=-3]

  0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1] [ID=-3]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da470: i32 = Constant<4> [ID=-3]

  0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1] [ID=-3]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da6c0: i32 = Constant<8> [ID=-3]

  0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1] [ID=-3]

  0x30daa38: i32 = TargetConstant<5355> [ID=-3]

  0x30dab60: i32 = Constant<1> [ID=-3]

      0x30da348: <multiple use>
      0x30da598: <multiple use>
      0x30da7e8: <multiple use>
    0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=-3]

    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dac88: i32 = Constant<96> [ID=-3]

  0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2] [ID=-3]

    0x30dadb0: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dbfc0: i32 = Constant<88> [ID=-3]

  0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3] [ID=-3]

    0x30dc0e8: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dc210: i32 = Constant<80> [ID=-3]

  0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4] [ID=-3]

        0x30dca28: i32 = TargetConstant<3265> [ID=-3]

      0x30dcb50: i32 = llvm.r600.read.tidig.x 0x30dca28 [ORD=8] [ID=-3]

          0x30dc6b0: i32 = TargetConstant<3256> [ID=-3]

        0x30dc7d8: i32 = llvm.r600.read.local.size.x 0x30dc6b0 [ORD=6] [ID=-3]

          0x30dc460: i32 = TargetConstant<3262> [ID=-3]

        0x30dc588: i32 = llvm.r600.read.tgid.x 0x30dc460 [ORD=5] [ID=-3]

      0x30dc900: i32 = mul 0x30dc7d8, 0x30dc588 [ORD=7] [ID=-3]

    0x30dcc78: i32 = add 0x30dcb50, 0x30dc900 [ORD=9] [ID=-3]

    0x30dcda0: i32 = Constant<2> [ID=-3]

  0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10] [ID=-3]

  0x30dd3d0: i32 = TargetConstant<5357> [ID=-3]

    0x30dc338: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da348: <multiple use>
      0x30dd180: <multiple use>
    0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10] [ID=-3]

    0x30dc338: <multiple use>
  0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11] [ID=-3]

  0x30dd620: i32 = undef [ID=-3]

    0x30dd4f8: <multiple use>
    0x30dd4f8: <multiple use>
    0x30dd620: <multiple use>
  0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=-3]

    0x30dd748: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da598: <multiple use>
      0x30dd180: <multiple use>
    0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13] [ID=-3]

    0x30dc0e8: <multiple use>
  0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14] [ID=-3]

    0x30dd998: <multiple use>
    0x30dd998: <multiple use>
    0x30dd620: <multiple use>
  0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=-3]

    0x30ddac0: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da7e8: <multiple use>
      0x30dd180: <multiple use>
    0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17] [ID=-3]

    0x30dadb0: <multiple use>
  0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18] [ID=-3]

      0x30dde38: <multiple use>
        0x30dd748: <multiple use>
        0x30ddac0: <multiple use>
      0x30ddbe8: i32 = srem 0x30dd748, 0x30ddac0 [ORD=16] [ID=-3]

      0x30dde38: <multiple use>
      0x30dd620: <multiple use>
    0x30ddf60: ch = store 0x30dde38:1, 0x30ddbe8, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=-3]

  0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20] [ID=-3]



Legalizing: 0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20] [ID=40]

Legalizing: 0x30ddf60: ch = store 0x30dde38:1, 0x30ddbe8, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=39]

Legalizing: 0x30ddbe8: i32 = srem 0x30dd748, 0x30ddac0 [ORD=16] [ID=38]
 ... replacing: 0x30ddbe8: i32 = srem 0x30dd748, 0x30ddac0 [ORD=16] [ID=38]
     with:      0x30de508: i32,i32 = sdivrem 0x30dd748, 0x30ddac0 [ORD=16]

Legalizing: 0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18] [ID=37]

Legalizing: 0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=36]

Legalizing: 0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14] [ID=35]

Legalizing: 0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=34]

Legalizing: 0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11] [ID=33]

Legalizing: 0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4] [ID=32]

Legalizing: 0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10] [ID=31]

Legalizing: 0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13] [ID=30]

Legalizing: 0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17] [ID=29]

Legalizing: 0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3] [ID=28]

Legalizing: 0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10] [ID=27]

Legalizing: 0x30dcda0: i32 = Constant<2> [ID=13]

Legalizing: 0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2] [ID=26]

Legalizing: 0x30dcc78: i32 = add 0x30dcb50, 0x30dc900 [ORD=9] [ID=25]

Legalizing: 0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=24]

Legalizing: 0x30dc900: i32 = mul 0x30dc7d8, 0x30dc588 [ORD=7] [ID=23]

Legalizing: 0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1] [ID=22]

Legalizing: 0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1] [ID=21]

Legalizing: 0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1] [ID=20]

Legalizing: 0x30dcb50: i32 = llvm.r600.read.tidig.x 0x30dca28 [ORD=8] [ID=19]
 ... replacing: 0x30dcb50: i32 = llvm.r600.read.tidig.x 0x30dca28 [ORD=8] [ID=19]
     with:      0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8

Legalizing: 0x30dc7d8: i32 = llvm.r600.read.local.size.x 0x30dc6b0 [ORD=6] [ID=18]
 ... replacing: 0x30dc7d8: i32 = llvm.r600.read.local.size.x 0x30dc6b0 [ORD=6] [ID=18]
     with:      0x30dead0: i32 = umin 0x30de880, 0x30de9a8 [ORD=6]

Legalizing: 0x30dc588: i32 = llvm.r600.read.tgid.x 0x30dc460 [ORD=5] [ID=17]
 ... replacing: 0x30dc588: i32 = llvm.r600.read.tgid.x 0x30dc460 [ORD=5] [ID=17]
     with:      0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8

Legalizing: 0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=16]

Legalizing: 0x30dd620: i32 = undef [ID=15]

Legalizing: 0x30dd3d0: i32 = TargetConstant<5357> [ID=14]

Legalizing: 0x30dcda0: i32 = Constant<2> [ID=13]

Legalizing: 0x30dc210: i32 = Constant<80> [ID=9]

Legalizing: 0x30dbfc0: i32 = Constant<88> [ID=8]

Legalizing: 0x30dac88: i32 = Constant<96> [ID=7]

Legalizing: 0x30dab60: i32 = Constant<1> [ID=6]

Legalizing: 0x30daa38: i32 = TargetConstant<5355> [ID=5]

Legalizing: 0x30da6c0: i32 = Constant<8> [ID=4]

Legalizing: 0x30da470: i32 = Constant<4> [ID=3]

Legalizing: 0x30da220: i32 = Constant<0> [ID=2]

Legalizing: 0x30d9fd0: v4i32 = Register %vreg2 [ID=1]

Legalizing: 0x3072c40: ch = EntryToken [ID=0]

Legalizing: 0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8

Legalizing: 0x30dc7d8: i32 = Register %vreg4

Legalizing: 0x30dead0: i32 = umin 0x30de880, 0x30de9a8 [ORD=6]

Legalizing: 0x30de9a8: i32 = Constant<65535>

Legalizing: 0x30de880: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30de758, 0x30da470<LD4[<unknown>](invariant)> [ORD=6]

Legalizing: 0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6]

Legalizing: 0x30dcb50: v4i32 = Register %vreg1

Legalizing: 0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8

Legalizing: 0x30ddbe8: i32 = Register %vreg3

Legalizing: 0x30de508: i32,i32 = sdivrem 0x30dd748, 0x30ddac0 [ORD=16]
 ... replacing: 0x30de508: i32,i32 = sdivrem 0x30dd748, 0x30ddac0 [ORD=16]
     with:      0x30e01d8: i32,i32 = merge_values 0x30dff88, 0x30e00b0 [ORD=16]
      and:      0x30e01d8: i32,i32 = merge_values 0x30dff88, 0x30e00b0 [ORD=16]

Legalizing: 0x30e01d8: i32,i32 = merge_values 0x30dff88, 0x30e00b0 [ORD=16]
 ... replacing: 0x30e01d8: i32,i32 = merge_values 0x30dff88, 0x30e00b0 [ORD=16]
     with:      0x30dff88: i32 = sub 0x30dfd38, 0x30ded20 [ORD=16]
      and:      0x30e00b0: i32 = sub 0x30dfe60, 0x30dca28 [ORD=16]

Legalizing: 0x30e00b0: i32 = sub 0x30dfe60, 0x30dca28 [ORD=16]

Legalizing: 0x30dfe60: i32 = xor 0x30dfc10:1, 0x30dca28 [ORD=16]

Legalizing: 0x30dfc10: i32,i32 = udivrem 0x30df098, 0x30df1c0 [ORD=16]
 ... replacing: 0x30dfc10: i32,i32 = udivrem 0x30df098, 0x30df1c0 [ORD=16]
     with:      0x30e2308: i32,i32 = merge_values 0x30e1828, 0x30e21e0 [ORD=16]
      and:      0x30e2308: i32,i32 = merge_values 0x30e1828, 0x30e21e0 [ORD=16]

Legalizing: 0x30df1c0: i32 = xor 0x30def70, 0x30dc588 [ORD=16]

Legalizing: 0x30df098: i32 = xor 0x30dee48, 0x30dca28 [ORD=16]

Legalizing: 0x30def70: i32 = add 0x30ddac0, 0x30dc588 [ORD=16]

Legalizing: 0x30dee48: i32 = add 0x30dd748, 0x30dca28 [ORD=16]

Legalizing: 0x30dc588: i32 = select_cc 0x30ddac0, 0x30da220, 0x30dc460, 0x30da220, 0x30dc6b0 [ORD=16]
 ... replacing: 0x30dc588: i32 = select_cc 0x30ddac0, 0x30da220, 0x30dc460, 0x30da220, 0x30dc6b0 [ORD=16]
     with:      0x30dfc10: i32 = select 0x30ded20, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30dca28: i32 = select_cc 0x30dd748, 0x30da220, 0x30dc460, 0x30da220, 0x30dc6b0 [ORD=16]
 ... replacing: 0x30dca28: i32 = select_cc 0x30dd748, 0x30da220, 0x30dc460, 0x30da220, 0x30dc6b0 [ORD=16]
     with:      0x30e2430: i32 = select 0x30dc588, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30dc6b0: ch = setlt

Legalizing: 0x30dc460: i32 = Constant<-1>

Legalizing: 0x30e2430: i32 = select 0x30dc588, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30dc588: i1 = setcc 0x30dd748, 0x30da220, 0x30dc6b0 [ORD=16]

Legalizing: 0x30dfc10: i32 = select 0x30ded20, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30ded20: i1 = setcc 0x30ddac0, 0x30da220, 0x30dc6b0 [ORD=16]

Legalizing: 0x30e2308: i32,i32 = merge_values 0x30e1828, 0x30e21e0 [ORD=16]
 ... replacing: 0x30e2308: i32,i32 = merge_values 0x30e1828, 0x30e21e0 [ORD=16]
     with:      0x30e1828: i32 = select_cc 0x30e1260, 0x30da220, 0x30e15d8, 0x30e1700, 0x30e0300 [ORD=16]
      and:      0x30e21e0: i32 = select_cc 0x30e1260, 0x30da220, 0x30e1a78, 0x30e1ba0, 0x30e0300 [ORD=16]

Legalizing: 0x30e21e0: i32 = select_cc 0x30e1260, 0x30da220, 0x30e1a78, 0x30e1ba0, 0x30e0300 [ORD=16]
 ... replacing: 0x30e21e0: i32 = select_cc 0x30e1260, 0x30da220, 0x30e1a78, 0x30e1ba0, 0x30e0300 [ORD=16]
     with:      0x30dca28: i32 = select 0x30e2308, 0x30e1a78, 0x30e1ba0 [ORD=16]

Legalizing: 0x30e1ba0: i32 = select_cc 0x30e1388, 0x30da220, 0x30e0ee8, 0x30e1950, 0x30e0300 [ORD=16]
 ... replacing: 0x30e1ba0: i32 = select_cc 0x30e1388, 0x30da220, 0x30e0ee8, 0x30e1950, 0x30e0300 [ORD=16]
     with:      0x30e2558: i32 = select 0x30e21e0, 0x30e0ee8, 0x30e1950 [ORD=16]

Legalizing: 0x30e1a78: i32 = add 0x30e0ee8, 0x30df1c0 [ORD=16]

Legalizing: 0x30e1950: i32 = sub 0x30e0ee8, 0x30df1c0 [ORD=16]

Legalizing: 0x30e1388: i32 = and 0x30e1138, 0x30e1260 [ORD=16]

Legalizing: 0x30e1260: i32 = select_cc 0x30df098, 0x30e0dc0, 0x30dc460, 0x30da220, 0x30e1010 [ORD=16]
 ... replacing: 0x30e1260: i32 = select_cc 0x30df098, 0x30e0dc0, 0x30dc460, 0x30da220, 0x30e1010 [ORD=16]
     with:      0x30e15d8: i32 = select 0x30e14b0, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30e1138: i32 = select_cc 0x30e0ee8, 0x30df1c0, 0x30dc460, 0x30da220, 0x30e1010 [ORD=16]
 ... replacing: 0x30e1138: i32 = select_cc 0x30e0ee8, 0x30df1c0, 0x30dc460, 0x30da220, 0x30e1010 [ORD=16]
     with:      0x30e1700: i32 = select 0x30e1260, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30e1010: ch = setuge

Legalizing: 0x30e0ee8: i32 = sub 0x30df098, 0x30e0dc0 [ORD=16]

Legalizing: 0x30e0dc0: i32 = mul 0x30e09f0, 0x30df1c0 [ORD=16]

Legalizing: 0x30e09f0: i32 = mulhu 0x30e08c8, 0x30df098 [ORD=16]

Legalizing: 0x30e08c8: i32 = select_cc 0x30e01d8, 0x30da220, 0x30e0678, 0x30e07a0, 0x30e0300 [ORD=16]
 ... replacing: 0x30e08c8: i32 = select_cc 0x30e01d8, 0x30da220, 0x30e0678, 0x30e07a0, 0x30e0300 [ORD=16]
     with:      0x30e1828: i32 = select 0x30e1138, 0x30e0678, 0x30e07a0 [ORD=16]

Legalizing: 0x30e07a0: i32 = sub 0x30dfd38, 0x30e0550 [ORD=16]

Legalizing: 0x30e0678: i32 = add 0x30dfd38, 0x30e0550 [ORD=16]

Legalizing: 0x30e0550: i32 = mulhu 0x30e0428, 0x30dfd38 [ORD=16]

Legalizing: 0x30e0428: i32 = select_cc 0x30e01d8, 0x30da220, 0x30de508, 0x30dff88, 0x30e0300 [ORD=16]
 ... replacing: 0x30e0428: i32 = select_cc 0x30e01d8, 0x30da220, 0x30de508, 0x30dff88, 0x30e0300 [ORD=16]
     with:      0x30e08c8: i32 = select 0x30e1138, 0x30de508, 0x30dff88 [ORD=16]

Legalizing: 0x30e0300: ch = seteq

Legalizing: 0x30de508: i32 = sub 0x30da220, 0x30dff88 [ORD=16]

Legalizing: 0x30e01d8: i32 = mulhu 0x30dfd38, 0x30df1c0 [ORD=16]

Legalizing: 0x30dff88: i32 = mul 0x30dfd38, 0x30df1c0 [ORD=16]

Legalizing: 0x30dfd38: i32 = URECIP 0x30df1c0 [ORD=16]

Legalizing: 0x30e08c8: i32 = select 0x30e1138, 0x30de508, 0x30dff88 [ORD=16]

Legalizing: 0x30e1828: i32 = select 0x30e1138, 0x30e0678, 0x30e07a0 [ORD=16]

Legalizing: 0x30e1138: i1 = setcc 0x30e01d8, 0x30da220, 0x30e0300 [ORD=16]

Legalizing: 0x30e1700: i32 = select 0x30e1260, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30e1260: i1 = setcc 0x30e0ee8, 0x30df1c0, 0x30e1010 [ORD=16]

Legalizing: 0x30e15d8: i32 = select 0x30e14b0, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30e14b0: i1 = setcc 0x30df098, 0x30e0dc0, 0x30e1010 [ORD=16]

Legalizing: 0x30e2558: i32 = select 0x30e21e0, 0x30e0ee8, 0x30e1950 [ORD=16]

Legalizing: 0x30e21e0: i1 = setcc 0x30e1388, 0x30da220, 0x30e0300 [ORD=16]

Legalizing: 0x30dca28: i32 = select 0x30e2308, 0x30e1a78, 0x30e2558 [ORD=16]

Legalizing: 0x30e2308: i1 = setcc 0x30e15d8, 0x30da220, 0x30e0300 [ORD=16]
Legalized selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 81 nodes:
  0x3072c40: ch = EntryToken [ID=0]

  0x30da220: i32 = Constant<0> [ID=2]

  0x30da470: i32 = Constant<4> [ID=3]

  0x30daa38: i32 = TargetConstant<5355> [ID=5]

  0x30dab60: i32 = Constant<1> [ID=6]

  0x30dd3d0: i32 = TargetConstant<5357> [ID=14]

  0x30dd620: i32 = undef [ID=15]

    0x3072c40: <multiple use>
    0x30d9fd0: v4i32 = Register %vreg2 [ID=1]

  0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=16]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da6c0: i32 = Constant<8> [ID=4]

  0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1] [ID=20]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da470: <multiple use>
  0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1] [ID=21]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da220: <multiple use>
  0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1] [ID=22]

      0x30da348: <multiple use>
      0x30da598: <multiple use>
      0x30da7e8: <multiple use>
    0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=24]

    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dac88: i32 = Constant<96> [ID=7]

  0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2] [ID=26]

        0x3072c40: <multiple use>
        0x30ddbe8: i32 = Register %vreg3

      0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8

            0x3072c40: <multiple use>
              0x3072c40: <multiple use>
              0x30dcb50: v4i32 = Register %vreg1

            0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6]

            0x30da470: <multiple use>
          0x30de880: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30de758, 0x30da470<LD4[<unknown>](invariant)> [ORD=6]

          0x30de9a8: i32 = Constant<65535>

        0x30dead0: i32 = umin 0x30de880, 0x30de9a8 [ORD=6]

          0x3072c40: <multiple use>
          0x30dc7d8: i32 = Register %vreg4

        0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8

      0x30dc900: i32 = mul 0x30dead0, 0x30debf8 [ORD=7] [ID=23]

    0x30dcc78: i32 = add 0x30de630, 0x30dc900 [ORD=9] [ID=25]

    0x30dcda0: i32 = Constant<2> [ID=13]

  0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10] [ID=27]

    0x30dadb0: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dbfc0: i32 = Constant<88> [ID=8]

  0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3] [ID=28]

    0x30dc0e8: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dc210: i32 = Constant<80> [ID=9]

  0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4] [ID=32]

    0x30dc338: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da348: <multiple use>
      0x30dd180: <multiple use>
    0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10] [ID=31]

    0x30dc338: <multiple use>
  0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11] [ID=33]

    0x30dd4f8: <multiple use>
    0x30dd4f8: <multiple use>
    0x30dd620: <multiple use>
  0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=34]

    0x30dd748: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da598: <multiple use>
      0x30dd180: <multiple use>
    0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13] [ID=30]

    0x30dc0e8: <multiple use>
  0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14] [ID=35]

    0x30dd998: <multiple use>
    0x30dd998: <multiple use>
    0x30dd620: <multiple use>
  0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=36]

    0x30ddac0: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da7e8: <multiple use>
      0x30dd180: <multiple use>
    0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17] [ID=29]

    0x30dadb0: <multiple use>
  0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18] [ID=37]

  0x30dc460: i32 = Constant<-1>

  0x30dc6b0: ch = setlt

      0x30dd748: <multiple use>
      0x30e2430: <multiple use>
    0x30dee48: i32 = add 0x30dd748, 0x30e2430 [ORD=16]

    0x30e2430: <multiple use>
  0x30df098: i32 = xor 0x30dee48, 0x30e2430 [ORD=16]

      0x30ddac0: <multiple use>
      0x30dfc10: <multiple use>
    0x30def70: i32 = add 0x30ddac0, 0x30dfc10 [ORD=16]

    0x30dfc10: <multiple use>
  0x30df1c0: i32 = xor 0x30def70, 0x30dfc10 [ORD=16]

    0x30df1c0: <multiple use>
  0x30dfd38: i32 = URECIP 0x30df1c0 [ORD=16]

    0x30dfd38: <multiple use>
    0x30df1c0: <multiple use>
  0x30dff88: i32 = mul 0x30dfd38, 0x30df1c0 [ORD=16]

  0x30e0300: ch = seteq

      0x30e1138: <multiple use>
        0x30da220: <multiple use>
        0x30dff88: <multiple use>
      0x30de508: i32 = sub 0x30da220, 0x30dff88 [ORD=16]

      0x30dff88: <multiple use>
    0x30e08c8: i32 = select 0x30e1138, 0x30de508, 0x30dff88 [ORD=16]

    0x30dfd38: <multiple use>
  0x30e0550: i32 = mulhu 0x30e08c8, 0x30dfd38 [ORD=16]

        0x30e1138: <multiple use>
          0x30dfd38: <multiple use>
          0x30e0550: <multiple use>
        0x30e0678: i32 = add 0x30dfd38, 0x30e0550 [ORD=16]

          0x30dfd38: <multiple use>
          0x30e0550: <multiple use>
        0x30e07a0: i32 = sub 0x30dfd38, 0x30e0550 [ORD=16]

      0x30e1828: i32 = select 0x30e1138, 0x30e0678, 0x30e07a0 [ORD=16]

      0x30df098: <multiple use>
    0x30e09f0: i32 = mulhu 0x30e1828, 0x30df098 [ORD=16]

    0x30df1c0: <multiple use>
  0x30e0dc0: i32 = mul 0x30e09f0, 0x30df1c0 [ORD=16]

    0x30df098: <multiple use>
    0x30e0dc0: <multiple use>
  0x30e0ee8: i32 = sub 0x30df098, 0x30e0dc0 [ORD=16]

  0x30e1010: ch = setuge

      0x30ddac0: <multiple use>
      0x30da220: <multiple use>
      0x30dc6b0: <multiple use>
    0x30ded20: i1 = setcc 0x30ddac0, 0x30da220, 0x30dc6b0 [ORD=16]

    0x30dc460: <multiple use>
    0x30da220: <multiple use>
  0x30dfc10: i32 = select 0x30ded20, 0x30dc460, 0x30da220 [ORD=16]

      0x30dd748: <multiple use>
      0x30da220: <multiple use>
      0x30dc6b0: <multiple use>
    0x30dc588: i1 = setcc 0x30dd748, 0x30da220, 0x30dc6b0 [ORD=16]

    0x30dc460: <multiple use>
    0x30da220: <multiple use>
  0x30e2430: i32 = select 0x30dc588, 0x30dc460, 0x30da220 [ORD=16]

      0x30df098: <multiple use>
      0x30e0dc0: <multiple use>
      0x30e1010: <multiple use>
    0x30e14b0: i1 = setcc 0x30df098, 0x30e0dc0, 0x30e1010 [ORD=16]

    0x30dc460: <multiple use>
    0x30da220: <multiple use>
  0x30e15d8: i32 = select 0x30e14b0, 0x30dc460, 0x30da220 [ORD=16]

      0x30dfd38: <multiple use>
      0x30df1c0: <multiple use>
    0x30e01d8: i32 = mulhu 0x30dfd38, 0x30df1c0 [ORD=16]

    0x30da220: <multiple use>
    0x30e0300: <multiple use>
  0x30e1138: i1 = setcc 0x30e01d8, 0x30da220, 0x30e0300 [ORD=16]

      0x30dde38: <multiple use>
              0x30e15d8: <multiple use>
              0x30da220: <multiple use>
              0x30e0300: <multiple use>
            0x30e2308: i1 = setcc 0x30e15d8, 0x30da220, 0x30e0300 [ORD=16]

              0x30e0ee8: <multiple use>
              0x30df1c0: <multiple use>
            0x30e1a78: i32 = add 0x30e0ee8, 0x30df1c0 [ORD=16]

                      0x30e0ee8: <multiple use>
                      0x30df1c0: <multiple use>
                      0x30e1010: <multiple use>
                    0x30e1260: i1 = setcc 0x30e0ee8, 0x30df1c0, 0x30e1010 [ORD=16]

                    0x30dc460: <multiple use>
                    0x30da220: <multiple use>
                  0x30e1700: i32 = select 0x30e1260, 0x30dc460, 0x30da220 [ORD=16]

                  0x30e15d8: <multiple use>
                0x30e1388: i32 = and 0x30e1700, 0x30e15d8 [ORD=16]

                0x30da220: <multiple use>
                0x30e0300: <multiple use>
              0x30e21e0: i1 = setcc 0x30e1388, 0x30da220, 0x30e0300 [ORD=16]

              0x30e0ee8: <multiple use>
                0x30e0ee8: <multiple use>
                0x30df1c0: <multiple use>
              0x30e1950: i32 = sub 0x30e0ee8, 0x30df1c0 [ORD=16]

            0x30e2558: i32 = select 0x30e21e0, 0x30e0ee8, 0x30e1950 [ORD=16]

          0x30dca28: i32 = select 0x30e2308, 0x30e1a78, 0x30e2558 [ORD=16]

          0x30e2430: <multiple use>
        0x30dfe60: i32 = xor 0x30dca28, 0x30e2430 [ORD=16]

        0x30e2430: <multiple use>
      0x30e00b0: i32 = sub 0x30dfe60, 0x30e2430 [ORD=16]

      0x30dde38: <multiple use>
      0x30dd620: <multiple use>
    0x30ddf60: ch = store 0x30dde38:1, 0x30e00b0, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=39]

  0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20] [ID=40]



Legalizing: 0x30e08c8: i32 = select 0x30e1138, 0x30de508, 0x30dff88 [ORD=16]

Combining: 0x30e08c8: i32 = select 0x30e1138, 0x30de508, 0x30dff88 [ORD=16]

Legalizing: 0x30e1828: i32 = select 0x30e1138, 0x30e0678, 0x30e07a0 [ORD=16]

Combining: 0x30e1828: i32 = select 0x30e1138, 0x30e0678, 0x30e07a0 [ORD=16]

Legalizing: 0x30e1138: i1 = setcc 0x30e01d8, 0x30da220, 0x30e0300 [ORD=16]

Combining: 0x30e1138: i1 = setcc 0x30e01d8, 0x30da220, 0x30e0300 [ORD=16]

Legalizing: 0x30e1700: i32 = select 0x30e1260, 0x30dc460, 0x30da220 [ORD=16]

Combining: 0x30e1700: i32 = select 0x30e1260, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30e1260: i1 = setcc 0x30e0ee8, 0x30df1c0, 0x30e1010 [ORD=16]

Combining: 0x30e1260: i1 = setcc 0x30e0ee8, 0x30df1c0, 0x30e1010 [ORD=16]

Legalizing: 0x30e15d8: i32 = select 0x30e14b0, 0x30dc460, 0x30da220 [ORD=16]

Combining: 0x30e15d8: i32 = select 0x30e14b0, 0x30dc460, 0x30da220 [ORD=16]

Legalizing: 0x30e14b0: i1 = setcc 0x30df098, 0x30e0dc0, 0x30e1010 [ORD=16]

Combining: 0x30e14b0: i1 = setcc 0x30df098, 0x30e0dc0, 0x30e1010 [ORD=16]

Legalizing: 0x30e2558: i32 = select 0x30e21e0, 0x30e0ee8, 0x30e1950 [ORD=16]

Combining: 0x30e2558: i32 = select 0x30e21e0, 0x30e0ee8, 0x30e1950 [ORD=16]

Legalizing: 0x30e21e0: i1 = setcc 0x30e1388, 0x30da220, 0x30e0300 [ORD=16]

Combining: 0x30e21e0: i1 = setcc 0x30e1388, 0x30da220, 0x30e0300 [ORD=16]

Legalizing: 0x30dca28: i32 = select 0x30e2308, 0x30e1a78, 0x30e2558 [ORD=16]

Combining: 0x30dca28: i32 = select 0x30e2308, 0x30e1a78, 0x30e2558 [ORD=16]

Legalizing: 0x30e2308: i1 = setcc 0x30e15d8, 0x30da220, 0x30e0300 [ORD=16]

Combining: 0x30e2308: i1 = setcc 0x30e15d8, 0x30da220, 0x30e0300 [ORD=16]

Legalizing: 0x30e2430: i32 = select 0x30dc588, 0x30dc460, 0x30da220 [ORD=16]

Combining: 0x30e2430: i32 = select 0x30dc588, 0x30dc460, 0x30da220 [ORD=16]
 ... into: 0x30e1ba0: i32 = sra 0x30dd748, 0x30e0428 [ORD=12]

Legalizing: 0x30e1ba0: i32 = sra 0x30dd748, 0x30e0428 [ORD=12]

Legalizing: 0x30e0428: i32 = Constant<31>

Combining: 0x30e1ba0: i32 = sra 0x30dd748, 0x30e0428 [ORD=12]

Legalizing: 0x30e0428: i32 = Constant<31>

Combining: 0x30e0428: i32 = Constant<31>

Legalizing: 0x30dfc10: i32 = select 0x30ded20, 0x30dc460, 0x30da220 [ORD=16]

Combining: 0x30dfc10: i32 = select 0x30ded20, 0x30dc460, 0x30da220 [ORD=16]
 ... into: 0x30dc588: i32 = sra 0x30ddac0, 0x30e0428 [ORD=15]

Legalizing: 0x30dc588: i32 = sra 0x30ddac0, 0x30e0428 [ORD=15]

Legalizing: 0x30e0428: i32 = Constant<31>

Combining: 0x30dc588: i32 = sra 0x30ddac0, 0x30e0428 [ORD=15]

Legalizing: 0x30e1a78: i32 = add 0x30e0ee8, 0x30df1c0 [ORD=16]

Combining: 0x30e1a78: i32 = add 0x30e0ee8, 0x30df1c0 [ORD=16]

Legalizing: 0x30e1950: i32 = sub 0x30e0ee8, 0x30df1c0 [ORD=16]

Combining: 0x30e1950: i32 = sub 0x30e0ee8, 0x30df1c0 [ORD=16]

Legalizing: 0x30e1388: i32 = and 0x30e1700, 0x30e15d8 [ORD=16]

Combining: 0x30e1388: i32 = and 0x30e1700, 0x30e15d8 [ORD=16]

Legalizing: 0x30e1010: ch = setuge

Combining: 0x30e1010: ch = setuge

Legalizing: 0x30e0ee8: i32 = sub 0x30df098, 0x30e0dc0 [ORD=16]

Combining: 0x30e0ee8: i32 = sub 0x30df098, 0x30e0dc0 [ORD=16]

Legalizing: 0x30e0dc0: i32 = mul 0x30e09f0, 0x30df1c0 [ORD=16]

Combining: 0x30e0dc0: i32 = mul 0x30e09f0, 0x30df1c0 [ORD=16]

Legalizing: 0x30e09f0: i32 = mulhu 0x30e1828, 0x30df098 [ORD=16]

Combining: 0x30e09f0: i32 = mulhu 0x30e1828, 0x30df098 [ORD=16]

Legalizing: 0x30e07a0: i32 = sub 0x30dfd38, 0x30e0550 [ORD=16]

Combining: 0x30e07a0: i32 = sub 0x30dfd38, 0x30e0550 [ORD=16]

Legalizing: 0x30e0678: i32 = add 0x30dfd38, 0x30e0550 [ORD=16]

Combining: 0x30e0678: i32 = add 0x30dfd38, 0x30e0550 [ORD=16]

Legalizing: 0x30e0550: i32 = mulhu 0x30e08c8, 0x30dfd38 [ORD=16]

Combining: 0x30e0550: i32 = mulhu 0x30e08c8, 0x30dfd38 [ORD=16]

Legalizing: 0x30e0300: ch = seteq

Combining: 0x30e0300: ch = seteq

Legalizing: 0x30de508: i32 = sub 0x30da220, 0x30dff88 [ORD=16]

Combining: 0x30de508: i32 = sub 0x30da220, 0x30dff88 [ORD=16]

Legalizing: 0x30e01d8: i32 = mulhu 0x30dfd38, 0x30df1c0 [ORD=16]

Combining: 0x30e01d8: i32 = mulhu 0x30dfd38, 0x30df1c0 [ORD=16]

Legalizing: 0x30dff88: i32 = mul 0x30dfd38, 0x30df1c0 [ORD=16]

Combining: 0x30dff88: i32 = mul 0x30dfd38, 0x30df1c0 [ORD=16]

Legalizing: 0x30dfd38: i32 = URECIP 0x30df1c0 [ORD=16]

Combining: 0x30dfd38: i32 = URECIP 0x30df1c0 [ORD=16]

Legalizing: 0x30e00b0: i32 = sub 0x30dfe60, 0x30e1ba0 [ORD=16]

Combining: 0x30e00b0: i32 = sub 0x30dfe60, 0x30e1ba0 [ORD=16]

Legalizing: 0x30dfe60: i32 = xor 0x30dca28, 0x30e1ba0 [ORD=16]

Combining: 0x30dfe60: i32 = xor 0x30dca28, 0x30e1ba0 [ORD=16]

Legalizing: 0x30df1c0: i32 = xor 0x30def70, 0x30dc588 [ORD=16]

Combining: 0x30df1c0: i32 = xor 0x30def70, 0x30dc588 [ORD=16]

Legalizing: 0x30df098: i32 = xor 0x30dee48, 0x30e1ba0 [ORD=16]

Combining: 0x30df098: i32 = xor 0x30dee48, 0x30e1ba0 [ORD=16]

Legalizing: 0x30def70: i32 = add 0x30ddac0, 0x30dc588 [ORD=16]

Combining: 0x30def70: i32 = add 0x30ddac0, 0x30dc588 [ORD=16]

Legalizing: 0x30dee48: i32 = add 0x30dd748, 0x30e1ba0 [ORD=16]

Combining: 0x30dee48: i32 = add 0x30dd748, 0x30e1ba0 [ORD=16]

Legalizing: 0x30dc460: i32 = Constant<-1>

Combining: 0x30dc460: i32 = Constant<-1>

Legalizing: 0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8

Combining: 0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8

Legalizing: 0x30dc7d8: i32 = Register %vreg4

Combining: 0x30dc7d8: i32 = Register %vreg4

Legalizing: 0x30dead0: i32 = umin 0x30de880, 0x30de9a8 [ORD=6]

Combining: 0x30dead0: i32 = umin 0x30de880, 0x30de9a8 [ORD=6]

Legalizing: 0x30de9a8: i32 = Constant<65535>

Combining: 0x30de9a8: i32 = Constant<65535>

Legalizing: 0x30de880: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30de758, 0x30da470<LD4[<unknown>](invariant)> [ORD=6]

Combining: 0x30de880: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30de758, 0x30da470<LD4[<unknown>](invariant)> [ORD=6]

Legalizing: 0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6]

Combining: 0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6]

Legalizing: 0x30dcb50: v4i32 = Register %vreg1

Combining: 0x30dcb50: v4i32 = Register %vreg1

Legalizing: 0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8

Combining: 0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8

Legalizing: 0x30ddbe8: i32 = Register %vreg3

Combining: 0x30ddbe8: i32 = Register %vreg3

Legalizing: 0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20] [ID=40]

Combining: 0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20] [ID=40]

Legalizing: 0x30ddf60: ch = store 0x30dde38:1, 0x30e00b0, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=39]

Combining: 0x30ddf60: ch = store 0x30dde38:1, 0x30e00b0, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=39]

Legalizing: 0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18] [ID=37]

Combining: 0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18] [ID=37]

Legalizing: 0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=36]

Combining: 0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=36]

Legalizing: 0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14] [ID=35]

Combining: 0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14] [ID=35]

Legalizing: 0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=34]

Combining: 0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=34]

Legalizing: 0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11] [ID=33]

Combining: 0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11] [ID=33]

Legalizing: 0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4] [ID=32]

Combining: 0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4] [ID=32]

Legalizing: 0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10] [ID=31]

Combining: 0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10] [ID=31]

Legalizing: 0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13] [ID=30]

Combining: 0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13] [ID=30]

Legalizing: 0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17] [ID=29]

Combining: 0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17] [ID=29]

Legalizing: 0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3] [ID=28]

Combining: 0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3] [ID=28]

Legalizing: 0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10] [ID=27]

Legalizing: 0x30dcda0: i32 = Constant<2> [ID=13]

Combining: 0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10] [ID=27]

Legalizing: 0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2] [ID=26]

Combining: 0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2] [ID=26]

Legalizing: 0x30dcc78: i32 = add 0x30de630, 0x30dc900 [ORD=9] [ID=25]

Combining: 0x30dcc78: i32 = add 0x30de630, 0x30dc900 [ORD=9] [ID=25]

Legalizing: 0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=24]

Combining: 0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=24]

Legalizing: 0x30dc900: i32 = mul 0x30dead0, 0x30debf8 [ORD=7] [ID=23]

Combining: 0x30dc900: i32 = mul 0x30dead0, 0x30debf8 [ORD=7] [ID=23]

Legalizing: 0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1] [ID=22]

Combining: 0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1] [ID=22]

Legalizing: 0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1] [ID=21]

Combining: 0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1] [ID=21]

Legalizing: 0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1] [ID=20]

Combining: 0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1] [ID=20]

Legalizing: 0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=16]

Combining: 0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=16]

Legalizing: 0x30dd620: i32 = undef [ID=15]

Combining: 0x30dd620: i32 = undef [ID=15]

Legalizing: 0x30dd3d0: i32 = TargetConstant<5357> [ID=14]

Combining: 0x30dd3d0: i32 = TargetConstant<5357> [ID=14]

Legalizing: 0x30dcda0: i32 = Constant<2> [ID=13]

Combining: 0x30dcda0: i32 = Constant<2> [ID=13]

Legalizing: 0x30dc210: i32 = Constant<80> [ID=9]

Combining: 0x30dc210: i32 = Constant<80> [ID=9]

Legalizing: 0x30dbfc0: i32 = Constant<88> [ID=8]

Combining: 0x30dbfc0: i32 = Constant<88> [ID=8]

Legalizing: 0x30dac88: i32 = Constant<96> [ID=7]

Combining: 0x30dac88: i32 = Constant<96> [ID=7]

Legalizing: 0x30dab60: i32 = Constant<1> [ID=6]

Combining: 0x30dab60: i32 = Constant<1> [ID=6]

Legalizing: 0x30daa38: i32 = TargetConstant<5355> [ID=5]

Combining: 0x30daa38: i32 = TargetConstant<5355> [ID=5]

Legalizing: 0x30da6c0: i32 = Constant<8> [ID=4]

Combining: 0x30da6c0: i32 = Constant<8> [ID=4]

Legalizing: 0x30da470: i32 = Constant<4> [ID=3]

Combining: 0x30da470: i32 = Constant<4> [ID=3]

Legalizing: 0x30da220: i32 = Constant<0> [ID=2]

Combining: 0x30da220: i32 = Constant<0> [ID=2]

Legalizing: 0x30d9fd0: v4i32 = Register %vreg2 [ID=1]

Combining: 0x30d9fd0: v4i32 = Register %vreg2 [ID=1]

Legalizing: 0x3072c40: ch = EntryToken [ID=0]

Combining: 0x3072c40: ch = EntryToken [ID=0]
Optimized legalized selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 79 nodes:
  0x3072c40: ch = EntryToken [ID=0]

  0x30da220: i32 = Constant<0> [ID=2]

  0x30da470: i32 = Constant<4> [ID=3]

  0x30daa38: i32 = TargetConstant<5355> [ID=5]

  0x30dab60: i32 = Constant<1> [ID=6]

  0x30dd3d0: i32 = TargetConstant<5357> [ID=14]

  0x30dd620: i32 = undef [ID=15]

    0x3072c40: <multiple use>
    0x30d9fd0: v4i32 = Register %vreg2 [ID=1]

  0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=16]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da6c0: i32 = Constant<8> [ID=4]

  0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1] [ID=20]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da470: <multiple use>
  0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1] [ID=21]

    0x3072c40: <multiple use>
    0x30da0f8: <multiple use>
    0x30da220: <multiple use>
  0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1] [ID=22]

      0x30da348: <multiple use>
      0x30da598: <multiple use>
      0x30da7e8: <multiple use>
    0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=24]

    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dac88: i32 = Constant<96> [ID=7]

  0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2] [ID=26]

        0x3072c40: <multiple use>
        0x30ddbe8: i32 = Register %vreg3

      0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8

            0x3072c40: <multiple use>
              0x3072c40: <multiple use>
              0x30dcb50: v4i32 = Register %vreg1

            0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6]

            0x30da470: <multiple use>
          0x30de880: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30de758, 0x30da470<LD4[<unknown>](invariant)> [ORD=6]

          0x30de9a8: i32 = Constant<65535>

        0x30dead0: i32 = umin 0x30de880, 0x30de9a8 [ORD=6]

          0x3072c40: <multiple use>
          0x30dc7d8: i32 = Register %vreg4

        0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8

      0x30dc900: i32 = mul 0x30dead0, 0x30debf8 [ORD=7] [ID=23]

    0x30dcc78: i32 = add 0x30de630, 0x30dc900 [ORD=9] [ID=25]

    0x30dcda0: i32 = Constant<2> [ID=13]

  0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10] [ID=27]

    0x30dadb0: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dbfc0: i32 = Constant<88> [ID=8]

  0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3] [ID=28]

    0x30dc0e8: <multiple use>
    0x30daa38: <multiple use>
    0x30dab60: <multiple use>
    0x30dc210: i32 = Constant<80> [ID=9]

  0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4] [ID=32]

    0x30dc338: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da348: <multiple use>
      0x30dd180: <multiple use>
    0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10] [ID=31]

    0x30dc338: <multiple use>
  0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11] [ID=33]

    0x30dd4f8: <multiple use>
    0x30dd4f8: <multiple use>
    0x30dd620: <multiple use>
  0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=34]

    0x30dd748: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da598: <multiple use>
      0x30dd180: <multiple use>
    0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13] [ID=30]

    0x30dc0e8: <multiple use>
  0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14] [ID=35]

    0x30dd998: <multiple use>
    0x30dd998: <multiple use>
    0x30dd620: <multiple use>
  0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=36]

    0x30ddac0: <multiple use>
    0x30dd3d0: <multiple use>
      0x30da7e8: <multiple use>
      0x30dd180: <multiple use>
    0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17] [ID=29]

    0x30dadb0: <multiple use>
  0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18] [ID=37]

  0x30dc460: i32 = Constant<-1>

      0x30dd748: <multiple use>
      0x30e1ba0: <multiple use>
    0x30dee48: i32 = add 0x30dd748, 0x30e1ba0 [ORD=16]

    0x30e1ba0: <multiple use>
  0x30df098: i32 = xor 0x30dee48, 0x30e1ba0 [ORD=16]

      0x30ddac0: <multiple use>
      0x30dc588: <multiple use>
    0x30def70: i32 = add 0x30ddac0, 0x30dc588 [ORD=16]

    0x30dc588: <multiple use>
  0x30df1c0: i32 = xor 0x30def70, 0x30dc588 [ORD=16]

    0x30df1c0: <multiple use>
  0x30dfd38: i32 = URECIP 0x30df1c0 [ORD=16]

    0x30dfd38: <multiple use>
    0x30df1c0: <multiple use>
  0x30dff88: i32 = mul 0x30dfd38, 0x30df1c0 [ORD=16]

  0x30e0300: ch = seteq

      0x30e1138: <multiple use>
        0x30da220: <multiple use>
        0x30dff88: <multiple use>
      0x30de508: i32 = sub 0x30da220, 0x30dff88 [ORD=16]

      0x30dff88: <multiple use>
    0x30e08c8: i32 = select 0x30e1138, 0x30de508, 0x30dff88 [ORD=16]

    0x30dfd38: <multiple use>
  0x30e0550: i32 = mulhu 0x30e08c8, 0x30dfd38 [ORD=16]

        0x30e1138: <multiple use>
          0x30dfd38: <multiple use>
          0x30e0550: <multiple use>
        0x30e0678: i32 = add 0x30dfd38, 0x30e0550 [ORD=16]

          0x30dfd38: <multiple use>
          0x30e0550: <multiple use>
        0x30e07a0: i32 = sub 0x30dfd38, 0x30e0550 [ORD=16]

      0x30e1828: i32 = select 0x30e1138, 0x30e0678, 0x30e07a0 [ORD=16]

      0x30df098: <multiple use>
    0x30e09f0: i32 = mulhu 0x30e1828, 0x30df098 [ORD=16]

    0x30df1c0: <multiple use>
  0x30e0dc0: i32 = mul 0x30e09f0, 0x30df1c0 [ORD=16]

    0x30df098: <multiple use>
    0x30e0dc0: <multiple use>
  0x30e0ee8: i32 = sub 0x30df098, 0x30e0dc0 [ORD=16]

  0x30e1010: ch = setuge

      0x30df098: <multiple use>
      0x30e0dc0: <multiple use>
      0x30e1010: <multiple use>
    0x30e14b0: i1 = setcc 0x30df098, 0x30e0dc0, 0x30e1010 [ORD=16]

    0x30dc460: <multiple use>
    0x30da220: <multiple use>
  0x30e15d8: i32 = select 0x30e14b0, 0x30dc460, 0x30da220 [ORD=16]

      0x30dfd38: <multiple use>
      0x30df1c0: <multiple use>
    0x30e01d8: i32 = mulhu 0x30dfd38, 0x30df1c0 [ORD=16]

    0x30da220: <multiple use>
    0x30e0300: <multiple use>
  0x30e1138: i1 = setcc 0x30e01d8, 0x30da220, 0x30e0300 [ORD=16]

  0x30e0428: i32 = Constant<31>

    0x30dd748: <multiple use>
    0x30e0428: <multiple use>
  0x30e1ba0: i32 = sra 0x30dd748, 0x30e0428 [ORD=12]

    0x30ddac0: <multiple use>
    0x30e0428: <multiple use>
  0x30dc588: i32 = sra 0x30ddac0, 0x30e0428 [ORD=15]

      0x30dde38: <multiple use>
              0x30e15d8: <multiple use>
              0x30da220: <multiple use>
              0x30e0300: <multiple use>
            0x30e2308: i1 = setcc 0x30e15d8, 0x30da220, 0x30e0300 [ORD=16]

              0x30e0ee8: <multiple use>
              0x30df1c0: <multiple use>
            0x30e1a78: i32 = add 0x30e0ee8, 0x30df1c0 [ORD=16]

                      0x30e0ee8: <multiple use>
                      0x30df1c0: <multiple use>
                      0x30e1010: <multiple use>
                    0x30e1260: i1 = setcc 0x30e0ee8, 0x30df1c0, 0x30e1010 [ORD=16]

                    0x30dc460: <multiple use>
                    0x30da220: <multiple use>
                  0x30e1700: i32 = select 0x30e1260, 0x30dc460, 0x30da220 [ORD=16]

                  0x30e15d8: <multiple use>
                0x30e1388: i32 = and 0x30e1700, 0x30e15d8 [ORD=16]

                0x30da220: <multiple use>
                0x30e0300: <multiple use>
              0x30e21e0: i1 = setcc 0x30e1388, 0x30da220, 0x30e0300 [ORD=16]

              0x30e0ee8: <multiple use>
                0x30e0ee8: <multiple use>
                0x30df1c0: <multiple use>
              0x30e1950: i32 = sub 0x30e0ee8, 0x30df1c0 [ORD=16]

            0x30e2558: i32 = select 0x30e21e0, 0x30e0ee8, 0x30e1950 [ORD=16]

          0x30dca28: i32 = select 0x30e2308, 0x30e1a78, 0x30e2558 [ORD=16]

          0x30e1ba0: <multiple use>
        0x30dfe60: i32 = xor 0x30dca28, 0x30e1ba0 [ORD=16]

        0x30e1ba0: <multiple use>
      0x30e00b0: i32 = sub 0x30dfe60, 0x30e1ba0 [ORD=16]

      0x30dde38: <multiple use>
      0x30dd620: <multiple use>
    0x30ddf60: ch = store 0x30dde38:1, 0x30e00b0, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=39]

  0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20] [ID=40]


===== Instruction selection begins: BB#0 'entry'
ISEL: Starting pattern match on root node: 0x30de3e0: ch = RET_FLAG 0x30ddf60 [ORD=20] [ID=78]

  Morphed node: 0x30de3e0: ch = S_ENDPGM 0x30ddf60 [ORD=20]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30ddf60: ch = store 0x30dde38:1, 0x30e00b0, 0x30dde38, 0x30dd620<ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=77]

  Initial Opcode index to 2633
  Morphed node: 0x30ddf60: ch = TBUFFER_STORE_FORMAT_X 0x30e00b0, 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30ddd10, 0x30dadb0, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dde38:1<Mem:ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e00b0: i32 = sub 0x30dfe60, 0x30e1ba0 [ORD=16] [ID=76]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x30e00b0: i32 = S_SUB_I32 0x30dfe60, 0x30e1ba0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dfe60: i32 = xor 0x30dca28, 0x30e1ba0 [ORD=16] [ID=75]

  Initial Opcode index to 19053
  Match failed at index 19059
  Continuing at 19267
  Match failed at index 19270
  Continuing at 19365
  Match failed at index 19370
  Continuing at 19713
  Match failed at index 19717
  Continuing at 20162
  Skipped scope entry (due to false predicate) at index 20167, continuing at 20275
  TypeSwitch[i32] from 20278 to 20281
  Skipped scope entry (due to false predicate) at index 20283, continuing at 20384
  Morphed node: 0x30dfe60: i32 = S_XOR_B32 0x30dca28, 0x30e1ba0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dca28: i32 = select 0x30e2308, 0x30e1a78, 0x30e2558 [ORD=16] [ID=74]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x30dca28: i32 = V_CNDMASK_B32_e64 0x30e2558, 0x30e1a78, 0x30e2308 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e2558: i32 = select 0x30e21e0, 0x30e0ee8, 0x30e1950 [ORD=16] [ID=73]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x30e2558: i32 = V_CNDMASK_B32_e64 0x30e1950, 0x30e0ee8, 0x30e21e0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e21e0: i1 = setcc 0x30e1388, 0x30da220, 0x30e0300 [ORD=16] [ID=72]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Morphed node: 0x30e21e0: i1 = V_CMP_EQ_I32_e64 0x30e1388, 0x30da220 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e1388: i32 = and 0x30e1700, 0x30e15d8 [ORD=16] [ID=71]

  Initial Opcode index to 18737
  Match failed at index 18742
  Continuing at 18898
  TypeSwitch[i32] from 18902 to 18905
  Skipped scope entry (due to false predicate) at index 18907, continuing at 19008
  Morphed node: 0x30e1388: i32 = S_AND_B32 0x30e1700, 0x30e15d8 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e1700: i32 = select 0x30e1260, 0x30dc460, 0x30da220 [ORD=16] [ID=70]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x30e1700: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e1260 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e2308: i1 = setcc 0x30e15d8, 0x30da220, 0x30e0300 [ORD=16] [ID=69]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Morphed node: 0x30e2308: i1 = V_CMP_EQ_I32_e64 0x30e15d8, 0x30da220 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e1950: i32 = sub 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=68]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x30e1950: i32 = S_SUB_I32 0x30e0ee8, 0x30df1c0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e1a78: i32 = add 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=67]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x30e1a78: i32 = S_ADD_I32 0x30e0ee8, 0x30df1c0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e1260: i1 = setcc 0x30e0ee8, 0x30df1c0, 0x30e1010 [ORD=16] [ID=66]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Skipped scope entry (due to false predicate) at index 52330, continuing at 52344
  Skipped scope entry (due to false predicate) at index 52345, continuing at 52359
  Skipped scope entry (due to false predicate) at index 52360, continuing at 52374
  Skipped scope entry (due to false predicate) at index 52375, continuing at 52389
  Skipped scope entry (due to false predicate) at index 52390, continuing at 52404
  Skipped scope entry (due to false predicate) at index 52405, continuing at 52512
  Skipped scope entry (due to false predicate) at index 52513, continuing at 52527
  Skipped scope entry (due to false predicate) at index 52528, continuing at 52542
  Skipped scope entry (due to false predicate) at index 52543, continuing at 52557
  Skipped scope entry (due to false predicate) at index 52558, continuing at 52572
  Skipped scope entry (due to false predicate) at index 52573, continuing at 52587
  Morphed node: 0x30e1260: i1 = V_CMP_GE_U32_e64 0x30e0ee8, 0x30df1c0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e15d8: i32 = select 0x30e14b0, 0x30dc460, 0x30da220 [ORD=16] [ID=65]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x30e15d8: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e14b0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e0ee8: i32 = sub 0x30df098, 0x30e0dc0 [ORD=16] [ID=64]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x30e0ee8: i32 = S_SUB_I32 0x30df098, 0x30e0dc0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e14b0: i1 = setcc 0x30df098, 0x30e0dc0, 0x30e1010 [ORD=16] [ID=63]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Skipped scope entry (due to false predicate) at index 52330, continuing at 52344
  Skipped scope entry (due to false predicate) at index 52345, continuing at 52359
  Skipped scope entry (due to false predicate) at index 52360, continuing at 52374
  Skipped scope entry (due to false predicate) at index 52375, continuing at 52389
  Skipped scope entry (due to false predicate) at index 52390, continuing at 52404
  Skipped scope entry (due to false predicate) at index 52405, continuing at 52512
  Skipped scope entry (due to false predicate) at index 52513, continuing at 52527
  Skipped scope entry (due to false predicate) at index 52528, continuing at 52542
  Skipped scope entry (due to false predicate) at index 52543, continuing at 52557
  Skipped scope entry (due to false predicate) at index 52558, continuing at 52572
  Skipped scope entry (due to false predicate) at index 52573, continuing at 52587
  Morphed node: 0x30e14b0: i1 = V_CMP_GE_U32_e64 0x30df098, 0x30e0dc0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e0dc0: i32 = mul 0x30e09f0, 0x30df1c0 [ORD=16] [ID=62]

  Initial Opcode index to 42971
  Morphed node: 0x30e0dc0: i32 = S_MUL_I32 0x30e09f0, 0x30df1c0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e09f0: i32 = mulhu 0x30e1828, 0x30df098 [ORD=16] [ID=61]

  Initial Opcode index to 45239
  Skipped scope entry (due to false predicate) at index 45245, continuing at 45346
  Skipped scope entry (due to false predicate) at index 45347, continuing at 45448
  Skipped scope entry (due to false predicate) at index 45449, continuing at 45550
  Morphed node: 0x30e09f0: i32 = V_MUL_HI_U32 0x30e1828, 0x30df098 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e1828: i32 = select 0x30e1138, 0x30e0678, 0x30e07a0 [ORD=16] [ID=60]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x30e1828: i32 = V_CNDMASK_B32_e64 0x30e07a0, 0x30e0678, 0x30e1138 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e0678: i32 = add 0x30dfd38, 0x30e0550 [ORD=16] [ID=59]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x30e0678: i32 = S_ADD_I32 0x30dfd38, 0x30e0550 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e07a0: i32 = sub 0x30dfd38, 0x30e0550 [ORD=16] [ID=58]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x30e07a0: i32 = S_SUB_I32 0x30dfd38, 0x30e0550 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e0550: i32 = mulhu 0x30e08c8, 0x30dfd38 [ORD=16] [ID=57]

  Initial Opcode index to 45239
  Skipped scope entry (due to false predicate) at index 45245, continuing at 45346
  Skipped scope entry (due to false predicate) at index 45347, continuing at 45448
  Skipped scope entry (due to false predicate) at index 45449, continuing at 45550
  Morphed node: 0x30e0550: i32 = V_MUL_HI_U32 0x30e08c8, 0x30dfd38 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e08c8: i32 = select 0x30e1138, 0x30de508, 0x30dff88 [ORD=16] [ID=56]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x30e08c8: i32 = V_CNDMASK_B32_e64 0x30dff88, 0x30de508, 0x30e1138 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30de508: i32 = sub 0x30da220, 0x30dff88 [ORD=16] [ID=55]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x30de508: i32 = S_SUB_I32 0x30da220, 0x30dff88 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e1138: i1 = setcc 0x30e01d8, 0x30da220, 0x30e0300 [ORD=16] [ID=54]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Morphed node: 0x30e1138: i1 = V_CMP_EQ_I32_e64 0x30e01d8, 0x30da220 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dff88: i32 = mul 0x30dfd38, 0x30df1c0 [ORD=16] [ID=53]

  Initial Opcode index to 42971
  Morphed node: 0x30dff88: i32 = S_MUL_I32 0x30dfd38, 0x30df1c0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e01d8: i32 = mulhu 0x30dfd38, 0x30df1c0 [ORD=16] [ID=52]

  Initial Opcode index to 45239
  Skipped scope entry (due to false predicate) at index 45245, continuing at 45346
  Skipped scope entry (due to false predicate) at index 45347, continuing at 45448
  Skipped scope entry (due to false predicate) at index 45449, continuing at 45550
  Morphed node: 0x30e01d8: i32 = V_MUL_HI_U32 0x30dfd38, 0x30df1c0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dfd38: i32 = URECIP 0x30df1c0 [ORD=16] [ID=51]

  Initial Opcode index to 45567
  Skipped scope entry (due to false predicate) at index 45572, continuing at 45639
  Skipped scope entry (due to false predicate) at index 45640, continuing at 45707
  Created node: 0x30e1010: i32 = V_CVT_F32_U32_e32 0x30df1c0 [ORD=16]

  Created node: 0x30e28d0: i32 = V_RCP_IFLAG_F32_e32 0x30e1010 [ORD=16]

  Created node: 0x30e29f8: i32 = V_MUL_F32_e32 0x30e0300, 0x30e28d0 [ORD=16]

  Morphed node: 0x30dfd38: i32 = V_CVT_U32_F32_e32 0x30e29f8 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30df1c0: i32 = xor 0x30def70, 0x30dc588 [ORD=16] [ID=50]

  Initial Opcode index to 19053
  Match failed at index 19059
  Continuing at 19267
  Match failed at index 19270
  Continuing at 19365
  Match failed at index 19370
  Continuing at 19713
  Match failed at index 19717
  Continuing at 20162
  Skipped scope entry (due to false predicate) at index 20167, continuing at 20275
  TypeSwitch[i32] from 20278 to 20281
  Skipped scope entry (due to false predicate) at index 20283, continuing at 20384
  Morphed node: 0x30df1c0: i32 = S_XOR_B32 0x30def70, 0x30dc588 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30def70: i32 = add 0x30ddac0, 0x30dc588 [ORD=16] [ID=49]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x30def70: i32 = S_ADD_I32 0x30ddac0, 0x30dc588 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dde38: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30ddac0:1, 0x30dd3d0, 0x30ddd10, 0x30dadb0 [ORD=18] [ID=48]

  Initial Opcode index to 4087
  Skipped scope entry (due to false predicate) at index 4091, continuing at 4818
  Skipped scope entry (due to false predicate) at index 4819, continuing at 4842
  Skipped scope entry (due to false predicate) at index 4843, continuing at 4866
  Skipped scope entry (due to false predicate) at index 4867, continuing at 4882
  Skipped scope entry (due to false predicate) at index 4883, continuing at 4900
  Skipped scope entry (due to false predicate) at index 4901, continuing at 4918
  Morphed node: 0x30dde38: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30ddd10, 0x30dadb0, 0x30ddac0:1 [ORD=18]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dc588: i32 = sra 0x30ddac0, 0x30e0428 [ORD=15] [ID=47]

  Initial Opcode index to 42604
  TypeSwitch[i32] from 42608 to 42612
  Morphed node: 0x30dc588: i32 = S_ASHR_I32 0x30ddac0, 0x30e0428 [ORD=15]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30df098: i32 = xor 0x30dee48, 0x30e1ba0 [ORD=16] [ID=46]

  Initial Opcode index to 19053
  Match failed at index 19059
  Continuing at 19267
  Match failed at index 19270
  Continuing at 19365
  Match failed at index 19370
  Continuing at 19713
  Match failed at index 19717
  Continuing at 20162
  Skipped scope entry (due to false predicate) at index 20167, continuing at 20275
  TypeSwitch[i32] from 20278 to 20281
  Skipped scope entry (due to false predicate) at index 20283, continuing at 20384
  Morphed node: 0x30df098: i32 = S_XOR_B32 0x30dee48, 0x30e1ba0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30ddac0: i32,ch = load 0x30dd998:1, 0x30dd998, 0x30dd620<LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=45]

  Initial Opcode index to 5
  Morphed node: 0x30ddac0: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd870, 0x30dc0e8, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd998:1<Mem:LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dee48: i32 = add 0x30dd748, 0x30e1ba0 [ORD=16] [ID=44]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x30dee48: i32 = S_ADD_I32 0x30dd748, 0x30e1ba0 [ORD=16]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dd998: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dd748:1, 0x30dd3d0, 0x30dd870, 0x30dc0e8 [ORD=14] [ID=43]

  Initial Opcode index to 4087
  Skipped scope entry (due to false predicate) at index 4091, continuing at 4818
  Skipped scope entry (due to false predicate) at index 4819, continuing at 4842
  Skipped scope entry (due to false predicate) at index 4843, continuing at 4866
  Skipped scope entry (due to false predicate) at index 4867, continuing at 4882
  Skipped scope entry (due to false predicate) at index 4883, continuing at 4900
  Skipped scope entry (due to false predicate) at index 4901, continuing at 4918
  Morphed node: 0x30dd998: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd870, 0x30dc0e8, 0x30dd748:1 [ORD=14]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e1ba0: i32 = sra 0x30dd748, 0x30e0428 [ORD=12] [ID=42]

  Initial Opcode index to 42604
  TypeSwitch[i32] from 42608 to 42612
  Morphed node: 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dd748: i32,ch = load 0x30dd4f8:1, 0x30dd4f8, 0x30dd620<LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=41]

  Initial Opcode index to 5
  Morphed node: 0x30dd748: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd2a8, 0x30dc338, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd4f8:1<Mem:LD4[%pac.arrayidx(addrspace=1)]> [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dd4f8: i32,ch = llvm.SI.m2s.pac.uav.desc.i32.global 0x30dc338:1, 0x30dd3d0, 0x30dd2a8, 0x30dc338 [ORD=11] [ID=40]

  Initial Opcode index to 4087
  Skipped scope entry (due to false predicate) at index 4091, continuing at 4818
  Skipped scope entry (due to false predicate) at index 4819, continuing at 4842
  Skipped scope entry (due to false predicate) at index 4843, continuing at 4866
  Skipped scope entry (due to false predicate) at index 4867, continuing at 4882
  Skipped scope entry (due to false predicate) at index 4883, continuing at 4900
  Skipped scope entry (due to false predicate) at index 4901, continuing at 4918
  Morphed node: 0x30dd4f8: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd2a8, 0x30dc338, 0x30dc338:1 [ORD=11]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dd2a8: i32 = add 0x30da348, 0x30dd180 [ORD=10] [ID=39]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x30dd2a8: i32 = S_ADD_I32 0x30da348, 0x30dd180 [ORD=10]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dd870: i32 = add 0x30da598, 0x30dd180 [ORD=13] [ID=38]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x30dd870: i32 = S_ADD_I32 0x30da598, 0x30dd180 [ORD=13]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30ddd10: i32 = add 0x30da7e8, 0x30dd180 [ORD=17] [ID=37]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x30ddd10: i32 = S_ADD_I32 0x30da7e8, 0x30dd180 [ORD=17]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dd180: i32 = shl 0x30dcc78, 0x30dcda0 [ORD=10] [ID=36]

  Initial Opcode index to 9283
  Match failed at index 9292
  Continuing at 9329
  TypeSwitch[i32] from 9335 to 9339
  Morphed node: 0x30dd180: i32 = S_LSHL_B32 0x30dcc78, 0x30dcda0 [ORD=10]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dc338: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dc0e8:1, 0x30daa38, 0x30dab60, 0x30dc210 [ORD=4] [ID=35]

  Initial Opcode index to 4087
  Skipped scope entry (due to false predicate) at index 4091, continuing at 4818
  Skipped scope entry (due to false predicate) at index 4819, continuing at 4842
  Skipped scope entry (due to false predicate) at index 4843, continuing at 4866
  Skipped scope entry (due to false predicate) at index 4867, continuing at 4882
  Skipped scope entry (due to false predicate) at index 4883, continuing at 4900
  Skipped scope entry (due to false predicate) at index 4901, continuing at 4918
  Skipped scope entry (due to false predicate) at index 4919, continuing at 4936
  Skipped scope entry (due to false predicate) at index 4937, continuing at 4954
  Skipped scope entry (due to false predicate) at index 4955, continuing at 4972
  Skipped scope entry (due to false predicate) at index 4973, continuing at 4990
  Morphed node: 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dcc78: i32 = add 0x30de630, 0x30dc900 [ORD=9] [ID=34]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x30dcc78: i32 = S_ADD_I32 0x30de630, 0x30dc900 [ORD=9]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dc0e8: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30dadb0:1, 0x30daa38, 0x30dab60, 0x30dbfc0 [ORD=3] [ID=33]

  Initial Opcode index to 4087
  Skipped scope entry (due to false predicate) at index 4091, continuing at 4818
  Skipped scope entry (due to false predicate) at index 4819, continuing at 4842
  Skipped scope entry (due to false predicate) at index 4843, continuing at 4866
  Skipped scope entry (due to false predicate) at index 4867, continuing at 4882
  Skipped scope entry (due to false predicate) at index 4883, continuing at 4900
  Skipped scope entry (due to false predicate) at index 4901, continuing at 4918
  Skipped scope entry (due to false predicate) at index 4919, continuing at 4936
  Skipped scope entry (due to false predicate) at index 4937, continuing at 4954
  Skipped scope entry (due to false predicate) at index 4955, continuing at 4972
  Skipped scope entry (due to false predicate) at index 4973, continuing at 4990
  Morphed node: 0x30dc0e8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dbfc0, 0x30dadb0:1 [ORD=3]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dc900: i32 = mul 0x30dead0, 0x30debf8 [ORD=7] [ID=32]

  Initial Opcode index to 42971
  Morphed node: 0x30dc900: i32 = S_MUL_I32 0x30dead0, 0x30debf8 [ORD=7]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dadb0: v4i32,ch = llvm.SI.m2s.get.uav.desc 0x30da910, 0x30daa38, 0x30dab60, 0x30dac88 [ORD=2] [ID=31]

  Initial Opcode index to 4087
  Skipped scope entry (due to false predicate) at index 4091, continuing at 4818
  Skipped scope entry (due to false predicate) at index 4819, continuing at 4842
  Skipped scope entry (due to false predicate) at index 4843, continuing at 4866
  Skipped scope entry (due to false predicate) at index 4867, continuing at 4882
  Skipped scope entry (due to false predicate) at index 4883, continuing at 4900
  Skipped scope entry (due to false predicate) at index 4901, continuing at 4918
  Skipped scope entry (due to false predicate) at index 4919, continuing at 4936
  Skipped scope entry (due to false predicate) at index 4937, continuing at 4954
  Skipped scope entry (due to false predicate) at index 4955, continuing at 4972
  Skipped scope entry (due to false predicate) at index 4973, continuing at 4990
  Morphed node: 0x30dadb0: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dac88, 0x30da910 [ORD=2]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dead0: i32 = umin 0x30de880, 0x30de9a8 [ORD=6] [ID=30]

  Initial Opcode index to 44178
  Skipped scope entry (due to false predicate) at index 44184, continuing at 44285
  Morphed node: 0x30dead0: i32 = S_MIN_U32 0x30de880, 0x30de9a8 [ORD=6]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30de880: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30de758, 0x30da470<LD4[<unknown>](invariant)> [ORD=6] [ID=28]

  Initial Opcode index to 49410
  TypeSwitch[i32] from 49413 to 49416
  Morphed node: 0x30de880: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30de758, 0x30daa38, 0x3072c40 [ORD=6]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30da348: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da220<LD4[<unknown>](invariant)> [ORD=1] [ID=27]

  Initial Opcode index to 49410
  TypeSwitch[i32] from 49413 to 49416
  Morphed node: 0x30da348: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30e2430, 0x3072c40 [ORD=1]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30da598: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da470<LD4[<unknown>](invariant)> [ORD=1] [ID=26]

  Initial Opcode index to 49410
  TypeSwitch[i32] from 49413 to 49416
  Morphed node: 0x30da598: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30daa38, 0x3072c40 [ORD=1]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30da7e8: i32,ch = M2S_LOAD_IMM_CONST 0x3072c40, 0x30da0f8, 0x30da6c0<LD4[<unknown>](invariant)> [ORD=1] [ID=25]

  Initial Opcode index to 49410
  TypeSwitch[i32] from 49413 to 49416
  Morphed node: 0x30da7e8: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30da470, 0x3072c40 [ORD=1]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30e0428: i32 = Constant<31> [ID=20]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Morphed node: 0x30e0428: i32 = S_MOV_B32 0x30da6c0

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dc460: i32 = Constant<-1> [ID=17]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Skipped scope entry (due to false predicate) at index 43304, continuing at 43318
  Morphed node: 0x30dc460: i32 = V_MOV_B32_e32 0x30dd3d0

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30de9a8: i32 = Constant<65535> [ID=15]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Morphed node: 0x30de9a8: i32 = S_MOV_B32 0x30dd620

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dcda0: i32 = Constant<2> [ID=10]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Morphed node: 0x30dcda0: i32 = S_MOV_B32 0x30e2b20

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dc210: i32 = Constant<80> [ID=9]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Skipped scope entry (due to false predicate) at index 43304, continuing at 43318
  Morphed node: 0x30dc210: i32 = V_MOV_B32_e32 0x30e2c48

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dbfc0: i32 = Constant<88> [ID=8]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Skipped scope entry (due to false predicate) at index 43304, continuing at 43318
  Morphed node: 0x30dbfc0: i32 = V_MOV_B32_e32 0x30e2d70

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dac88: i32 = Constant<96> [ID=7]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Skipped scope entry (due to false predicate) at index 43304, continuing at 43318
  Morphed node: 0x30dac88: i32 = V_MOV_B32_e32 0x30e2e98

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30dab60: i32 = Constant<1> [ID=6]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Skipped scope entry (due to false predicate) at index 43304, continuing at 43318
  Morphed node: 0x30dab60: i32 = V_MOV_B32_e32 0x30e2fc0

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x30da220: i32 = Constant<0> [ID=2]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Morphed node: 0x30da220: i32 = S_MOV_B32 0x30e2430

ISEL: Match complete!
===== Instruction selection ends:
Selected selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 92 nodes:
  0x3072c40: ch = EntryToken

    0x30e2430: <multiple use>
  0x30da220: i32 = S_MOV_B32 0x30e2430

    0x30e2fc0: i32 = TargetConstant<1>

  0x30dab60: i32 = V_MOV_B32_e32 0x30e2fc0

    0x30dd3d0: i32 = TargetConstant<-1>

  0x30dc460: i32 = V_MOV_B32_e32 0x30dd3d0

    0x30da6c0: i32 = TargetConstant<31>

  0x30e0428: i32 = S_MOV_B32 0x30da6c0

    0x3072c40: <multiple use>
    0x30d9fd0: v4i32 = Register %vreg2

  0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1]

    0x30da0f8: <multiple use>
    0x30da470: i32 = TargetConstant<8>

    0x3072c40: <multiple use>
  0x30da7e8: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30da470, 0x3072c40 [ORD=1]

    0x30da0f8: <multiple use>
    0x30daa38: <multiple use>
    0x3072c40: <multiple use>
  0x30da598: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30daa38, 0x3072c40 [ORD=1]

    0x30da0f8: <multiple use>
    0x30e2430: <multiple use>
    0x3072c40: <multiple use>
  0x30da348: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30e2430, 0x3072c40 [ORD=1]

    0x30dab60: <multiple use>
      0x30e2e98: i32 = TargetConstant<96>

    0x30dac88: i32 = V_MOV_B32_e32 0x30e2e98

      0x30da348: <multiple use>
      0x30da598: <multiple use>
      0x30da7e8: <multiple use>
    0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1]

  0x30dadb0: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dac88, 0x30da910 [ORD=2]

    0x30dab60: <multiple use>
      0x30e2d70: i32 = TargetConstant<88>

    0x30dbfc0: i32 = V_MOV_B32_e32 0x30e2d70

    0x30dadb0: <multiple use>
  0x30dc0e8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dbfc0, 0x30dadb0:1 [ORD=3]

    0x30dab60: <multiple use>
      0x30e2c48: i32 = TargetConstant<80>

    0x30dc210: i32 = V_MOV_B32_e32 0x30e2c48

    0x30dc0e8: <multiple use>
  0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4]

        0x3072c40: <multiple use>
        0x30ddbe8: i32 = Register %vreg3

      0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8

              0x3072c40: <multiple use>
              0x30dcb50: v4i32 = Register %vreg1

            0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6]

            0x30daa38: <multiple use>
            0x3072c40: <multiple use>
          0x30de880: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30de758, 0x30daa38, 0x3072c40 [ORD=6]

            0x30dd620: i32 = TargetConstant<65535>

          0x30de9a8: i32 = S_MOV_B32 0x30dd620

        0x30dead0: i32 = S_MIN_U32 0x30de880, 0x30de9a8 [ORD=6]

          0x3072c40: <multiple use>
          0x30dc7d8: i32 = Register %vreg4

        0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8

      0x30dc900: i32 = S_MUL_I32 0x30dead0, 0x30debf8 [ORD=7]

    0x30dcc78: i32 = S_ADD_I32 0x30de630, 0x30dc900 [ORD=9]

      0x30e2b20: i32 = TargetConstant<2>

    0x30dcda0: i32 = S_MOV_B32 0x30e2b20

  0x30dd180: i32 = S_LSHL_B32 0x30dcc78, 0x30dcda0 [ORD=10]

    0x30da7e8: <multiple use>
    0x30dd180: <multiple use>
  0x30ddd10: i32 = S_ADD_I32 0x30da7e8, 0x30dd180 [ORD=17]

    0x30da598: <multiple use>
    0x30dd180: <multiple use>
  0x30dd870: i32 = S_ADD_I32 0x30da598, 0x30dd180 [ORD=13]

    0x30da348: <multiple use>
    0x30dd180: <multiple use>
  0x30dd2a8: i32 = S_ADD_I32 0x30da348, 0x30dd180 [ORD=10]

    0x30dc6b0: <multiple use>
    0x30ded20: <multiple use>
    0x30dfc10: <multiple use>
    0x30dfc10: <multiple use>
    0x30dfc10: <multiple use>
    0x30e27a8: <multiple use>
    0x30e2680: <multiple use>
    0x30dd2a8: <multiple use>
    0x30dc338: <multiple use>
    0x30dfc10: <multiple use>
    0x30dfc10: <multiple use>
    0x30e2430: <multiple use>
      0x30dd2a8: <multiple use>
      0x30dc338: <multiple use>
      0x30dc338: <multiple use>
    0x30dd4f8: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd2a8, 0x30dc338, 0x30dc338:1 [ORD=11]

  0x30dd748: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd2a8, 0x30dc338, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd4f8:1<Mem:LD4[%pac.arrayidx(addrspace=1)]> [ORD=12]

    0x30dd748: <multiple use>
    0x30e0428: <multiple use>
  0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12]

    0x30dc6b0: <multiple use>
    0x30ded20: <multiple use>
    0x30dfc10: <multiple use>
    0x30dfc10: <multiple use>
    0x30dfc10: <multiple use>
    0x30e27a8: <multiple use>
    0x30e2680: <multiple use>
    0x30dd870: <multiple use>
    0x30dc0e8: <multiple use>
    0x30dfc10: <multiple use>
    0x30dfc10: <multiple use>
    0x30e2430: <multiple use>
      0x30dd870: <multiple use>
      0x30dc0e8: <multiple use>
      0x30dd748: <multiple use>
    0x30dd998: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd870, 0x30dc0e8, 0x30dd748:1 [ORD=14]

  0x30ddac0: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd870, 0x30dc0e8, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd998:1<Mem:LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15]

      0x30dd748: <multiple use>
      0x30e1ba0: <multiple use>
    0x30dee48: i32 = S_ADD_I32 0x30dd748, 0x30e1ba0 [ORD=16]

    0x30e1ba0: <multiple use>
  0x30df098: i32 = S_XOR_B32 0x30dee48, 0x30e1ba0 [ORD=16]

    0x30ddac0: <multiple use>
    0x30e0428: <multiple use>
  0x30dc588: i32 = S_ASHR_I32 0x30ddac0, 0x30e0428 [ORD=15]

      0x30ddac0: <multiple use>
      0x30dc588: <multiple use>
    0x30def70: i32 = S_ADD_I32 0x30ddac0, 0x30dc588 [ORD=16]

    0x30dc588: <multiple use>
  0x30df1c0: i32 = S_XOR_B32 0x30def70, 0x30dc588 [ORD=16]

      0x30e0300: i32 = TargetConstant<1333788672>

          0x30df1c0: <multiple use>
        0x30e1010: i32 = V_CVT_F32_U32_e32 0x30df1c0 [ORD=16]

      0x30e28d0: i32 = V_RCP_IFLAG_F32_e32 0x30e1010 [ORD=16]

    0x30e29f8: i32 = V_MUL_F32_e32 0x30e0300, 0x30e28d0 [ORD=16]

  0x30dfd38: i32 = V_CVT_U32_F32_e32 0x30e29f8 [ORD=16]

    0x30dfd38: <multiple use>
    0x30df1c0: <multiple use>
  0x30dff88: i32 = S_MUL_I32 0x30dfd38, 0x30df1c0 [ORD=16]

      0x30dfd38: <multiple use>
      0x30df1c0: <multiple use>
    0x30e01d8: i32 = V_MUL_HI_U32 0x30dfd38, 0x30df1c0 [ORD=16]

    0x30da220: <multiple use>
  0x30e1138: i1 = V_CMP_EQ_I32_e64 0x30e01d8, 0x30da220 [ORD=16]

      0x30dff88: <multiple use>
        0x30da220: <multiple use>
        0x30dff88: <multiple use>
      0x30de508: i32 = S_SUB_I32 0x30da220, 0x30dff88 [ORD=16]

      0x30e1138: <multiple use>
    0x30e08c8: i32 = V_CNDMASK_B32_e64 0x30dff88, 0x30de508, 0x30e1138 [ORD=16]

    0x30dfd38: <multiple use>
  0x30e0550: i32 = V_MUL_HI_U32 0x30e08c8, 0x30dfd38 [ORD=16]

          0x30dfd38: <multiple use>
          0x30e0550: <multiple use>
        0x30e07a0: i32 = S_SUB_I32 0x30dfd38, 0x30e0550 [ORD=16]

          0x30dfd38: <multiple use>
          0x30e0550: <multiple use>
        0x30e0678: i32 = S_ADD_I32 0x30dfd38, 0x30e0550 [ORD=16]

        0x30e1138: <multiple use>
      0x30e1828: i32 = V_CNDMASK_B32_e64 0x30e07a0, 0x30e0678, 0x30e1138 [ORD=16]

      0x30df098: <multiple use>
    0x30e09f0: i32 = V_MUL_HI_U32 0x30e1828, 0x30df098 [ORD=16]

    0x30df1c0: <multiple use>
  0x30e0dc0: i32 = S_MUL_I32 0x30e09f0, 0x30df1c0 [ORD=16]

    0x30df098: <multiple use>
    0x30e0dc0: <multiple use>
  0x30e0ee8: i32 = S_SUB_I32 0x30df098, 0x30e0dc0 [ORD=16]

    0x30da220: <multiple use>
    0x30dc460: <multiple use>
      0x30df098: <multiple use>
      0x30e0dc0: <multiple use>
    0x30e14b0: i1 = V_CMP_GE_U32_e64 0x30df098, 0x30e0dc0 [ORD=16]

  0x30e15d8: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e14b0 [ORD=16]

  0x30dc6b0: i16 = TargetConstant<0>

  0x30ded20: i1 = TargetConstant<-1>

  0x30dfc10: i1 = TargetConstant<0>

  0x30e2430: i32 = TargetConstant<0>

  0x30e2680: i8 = TargetConstant<7>

  0x30e27a8: i8 = TargetConstant<4>

  0x30daa38: i32 = TargetConstant<4>

                0x30e0ee8: <multiple use>
                0x30df1c0: <multiple use>
              0x30e1950: i32 = S_SUB_I32 0x30e0ee8, 0x30df1c0 [ORD=16]

              0x30e0ee8: <multiple use>
                    0x30da220: <multiple use>
                    0x30dc460: <multiple use>
                      0x30e0ee8: <multiple use>
                      0x30df1c0: <multiple use>
                    0x30e1260: i1 = V_CMP_GE_U32_e64 0x30e0ee8, 0x30df1c0 [ORD=16]

                  0x30e1700: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e1260 [ORD=16]

                  0x30e15d8: <multiple use>
                0x30e1388: i32 = S_AND_B32 0x30e1700, 0x30e15d8 [ORD=16]

                0x30da220: <multiple use>
              0x30e21e0: i1 = V_CMP_EQ_I32_e64 0x30e1388, 0x30da220 [ORD=16]

            0x30e2558: i32 = V_CNDMASK_B32_e64 0x30e1950, 0x30e0ee8, 0x30e21e0 [ORD=16]

              0x30e0ee8: <multiple use>
              0x30df1c0: <multiple use>
            0x30e1a78: i32 = S_ADD_I32 0x30e0ee8, 0x30df1c0 [ORD=16]

              0x30e15d8: <multiple use>
              0x30da220: <multiple use>
            0x30e2308: i1 = V_CMP_EQ_I32_e64 0x30e15d8, 0x30da220 [ORD=16]

          0x30dca28: i32 = V_CNDMASK_B32_e64 0x30e2558, 0x30e1a78, 0x30e2308 [ORD=16]

          0x30e1ba0: <multiple use>
        0x30dfe60: i32 = S_XOR_B32 0x30dca28, 0x30e1ba0 [ORD=16]

        0x30e1ba0: <multiple use>
      0x30e00b0: i32 = S_SUB_I32 0x30dfe60, 0x30e1ba0 [ORD=16]

      0x30dc6b0: <multiple use>
      0x30ded20: <multiple use>
      0x30dfc10: <multiple use>
      0x30dfc10: <multiple use>
      0x30dfc10: <multiple use>
      0x30e27a8: <multiple use>
      0x30e2680: <multiple use>
      0x30ddd10: <multiple use>
      0x30dadb0: <multiple use>
      0x30dfc10: <multiple use>
      0x30dfc10: <multiple use>
      0x30e2430: <multiple use>
        0x30ddd10: <multiple use>
        0x30dadb0: <multiple use>
        0x30ddac0: <multiple use>
      0x30dde38: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30ddd10, 0x30dadb0, 0x30ddac0:1 [ORD=18]

    0x30ddf60: ch = TBUFFER_STORE_FORMAT_X 0x30e00b0, 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30ddd10, 0x30dadb0, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dde38:1<Mem:ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19]

  0x30de3e0: ch = S_ENDPGM 0x30ddf60 [ORD=20]


********** List Scheduling BB#0 'entry' **********
SU(0): 0x30de3e0: ch = S_ENDPGM 0x30ddf60 [ORD=20] [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x30ddf60: ch = TBUFFER_STORE_FORMAT_X 0x30e00b0, 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30ddd10, 0x30dadb0, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dde38:1<Mem:ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=1]

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 1
  Predecessors:
   val SU(30): Latency=1
   val SU(29): Latency=1
   val SU(26): Latency=1
   ch  SU(2): Latency=1
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x30dde38: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30ddd10, 0x30dadb0, 0x30ddac0:1 [ORD=18] [ID=2]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
   val SU(29): Latency=1
   val SU(26): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=1

SU(3): 0x30ddac0: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd870, 0x30dc0e8, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd998:1<Mem:LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=3]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 10
  Height             : 26
  Predecessors:
   val SU(25): Latency=1
   val SU(23): Latency=1
   ch  SU(4): Latency=1
  Successors:
   ch  SU(2): Latency=1
   val SU(41): Latency=1
   val SU(42): Latency=1

SU(4): 0x30dd998: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd870, 0x30dc0e8, 0x30dd748:1 [ORD=14] [ID=4]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 27
  Predecessors:
   val SU(25): Latency=1
   val SU(23): Latency=1
   ch  SU(5): Latency=1
  Successors:
   ch  SU(3): Latency=1

SU(5): 0x30dd748: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd2a8, 0x30dc338, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd4f8:1<Mem:LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=5]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 8
  Height             : 28
  Predecessors:
   val SU(10): Latency=1
   val SU(7): Latency=1
   ch  SU(6): Latency=1
  Successors:
   ch  SU(4): Latency=1
   val SU(31): Latency=1
   val SU(58): Latency=1

SU(6): 0x30dd4f8: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd2a8, 0x30dc338, 0x30dc338:1 [ORD=11] [ID=6]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 29
  Predecessors:
   val SU(10): Latency=1
   val SU(7): Latency=1
   ch  SU(7): Latency=1
  Successors:
   ch  SU(5): Latency=1

SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 30
  Predecessors:
   val SU(9): Latency=1
   val SU(8): Latency=1
   ch  SU(23): Latency=1
  Successors:
   val SU(5): Latency=1
   val SU(6): Latency=1
   ch  SU(6): Latency=1

SU(8): 0x30dc210: i32 = V_MOV_B32_e32 0x30e2c48 [ID=8]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 31
  Successors:
   val SU(7): Latency=1

SU(9): 0x30dab60: i32 = V_MOV_B32_e32 0x30e2fc0 [ID=9]

  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 33
  Successors:
   val SU(7): Latency=1
   val SU(23): Latency=1
   val SU(26): Latency=1

SU(10): 0x30dd2a8: i32 = S_ADD_I32 0x30da348, 0x30dd180 [ORD=10] [ID=10]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 30
  Predecessors:
   val SU(21): Latency=1
   val SU(11): Latency=1
  Successors:
   val SU(5): Latency=1
   val SU(6): Latency=1

SU(11): 0x30dd180: i32 = S_LSHL_B32 0x30dcc78, 0x30dcda0 [ORD=10] [ID=11]

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 31
  Predecessors:
   val SU(13): Latency=1
   val SU(12): Latency=1
  Successors:
   val SU(10): Latency=1
   val SU(25): Latency=1
   val SU(29): Latency=1

SU(12): 0x30dcda0: i32 = S_MOV_B32 0x30e2b20 [ID=12]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 32
  Successors:
   val SU(11): Latency=1

SU(13): 0x30dcc78: i32 = S_ADD_I32 0x30de630, 0x30dc900 [ORD=9] [ID=13]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 32
  Predecessors:
   val SU(20): Latency=1
   val SU(14): Latency=1
  Successors:
   val SU(11): Latency=1

SU(14): 0x30dc900: i32 = S_MUL_I32 0x30dead0, 0x30debf8 [ORD=7] [ID=14]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 33
  Predecessors:
   val SU(16): Latency=1
   val SU(15): Latency=1
  Successors:
   val SU(13): Latency=1

SU(15): 0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8 [ID=15]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 34
  Successors:
   val SU(14): Latency=1

SU(16): 0x30dead0: i32 = S_MIN_U32 0x30de880, 0x30de9a8 [ORD=6] [ID=16]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 34
  Predecessors:
   val SU(18): Latency=1
   val SU(17): Latency=1
  Successors:
   val SU(14): Latency=1

SU(17): 0x30de9a8: i32 = S_MOV_B32 0x30dd620 [ID=17]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 35
  Successors:
   val SU(16): Latency=1

SU(18): 0x30de880: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30de758, 0x30daa38, 0x3072c40 [ORD=6] [ID=18]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 35
  Predecessors:
   val SU(19): Latency=1
  Successors:
   val SU(16): Latency=1

SU(19): 0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6] [ID=19]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 36
  Successors:
   val SU(18): Latency=1

SU(20): 0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8 [ID=20]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 33
  Successors:
   val SU(13): Latency=1

SU(21): 0x30da7e8: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30da470, 0x3072c40, 0x30da598:2 [ORD=1] [ID=21]

    0x30da348: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30e2430, 0x3072c40 [ORD=1] [ID=21]

    0x30da598: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30daa38, 0x3072c40, 0x30da348:2 [ORD=1] [ID=21]

  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 3
  Latency            : 1
  Depth              : 1
  Height             : 33
  Predecessors:
   val SU(22): Latency=1
  Successors:
   val SU(10): Latency=1
   val SU(25): Latency=1
   ch  SU(27): Latency=1
   val SU(29): Latency=1

SU(22): 0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=22]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 34
  Successors:
   val SU(21): Latency=1

SU(23): 0x30dc0e8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dbfc0, 0x30dadb0:1 [ORD=3] [ID=23]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 31
  Predecessors:
   val SU(9): Latency=1
   val SU(24): Latency=1
   ch  SU(26): Latency=1
  Successors:
   val SU(3): Latency=1
   val SU(4): Latency=1
   ch  SU(7): Latency=1

SU(24): 0x30dbfc0: i32 = V_MOV_B32_e32 0x30e2d70 [ID=24]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 32
  Successors:
   val SU(23): Latency=1

SU(25): 0x30dd870: i32 = S_ADD_I32 0x30da598, 0x30dd180 [ORD=13] [ID=25]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 28
  Predecessors:
   val SU(21): Latency=1
   val SU(11): Latency=1
  Successors:
   val SU(3): Latency=1
   val SU(4): Latency=1

SU(26): 0x30dadb0: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dac88, 0x30da910 [ORD=2] [ID=26]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 32
  Predecessors:
   val SU(9): Latency=1
   val SU(28): Latency=1
   ch  SU(27): Latency=0
  Successors:
   val SU(1): Latency=1
   val SU(2): Latency=1
   ch  SU(23): Latency=1

SU(27): 0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=27]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 32
  Predecessors:
   ch  SU(21): Latency=1
  Successors:
   ch  SU(26): Latency=0

SU(28): 0x30dac88: i32 = V_MOV_B32_e32 0x30e2e98 [ID=28]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 33
  Successors:
   val SU(26): Latency=1

SU(29): 0x30ddd10: i32 = S_ADD_I32 0x30da7e8, 0x30dd180 [ORD=17] [ID=29]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
   val SU(21): Latency=1
   val SU(11): Latency=1
  Successors:
   val SU(1): Latency=1
   val SU(2): Latency=1

SU(30): 0x30e00b0: i32 = S_SUB_I32 0x30dfe60, 0x30e1ba0 [ORD=16] [ID=30]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 34
  Height             : 2
  Predecessors:
   val SU(33): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(1): Latency=1

SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]

  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 1
  Latency            : 1
  Depth              : 9
  Height             : 15
  Predecessors:
   val SU(5): Latency=1
   val SU(32): Latency=1
  Successors:
   val SU(30): Latency=1
   val SU(33): Latency=1
   val SU(57): Latency=1
   val SU(58): Latency=1

SU(32): 0x30e0428: i32 = S_MOV_B32 0x30da6c0 [ID=32]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 26
  Successors:
   val SU(31): Latency=1
   val SU(41): Latency=1

SU(33): 0x30dfe60: i32 = S_XOR_B32 0x30dca28, 0x30e1ba0 [ORD=16] [ID=33]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 33
  Height             : 3
  Predecessors:
   val SU(34): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(30): Latency=1

SU(34): 0x30dca28: i32 = V_CNDMASK_B32_e64 0x30e2558, 0x30e1a78, 0x30e2308 [ORD=16] [ID=34]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 32
  Height             : 4
  Predecessors:
   val SU(62): Latency=1
   val SU(60): Latency=1
   val SU(35): Latency=1
  Successors:
   val SU(33): Latency=1

SU(35): 0x30e2308: i1 = V_CMP_EQ_I32_e64 0x30e15d8, 0x30da220 [ORD=16] [ID=35]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 28
  Height             : 5
  Predecessors:
   val SU(37): Latency=1
   val SU(36): Latency=1
  Successors:
   val SU(34): Latency=1

SU(36): 0x30da220: i32 = S_MOV_B32 0x30e2430 [ID=36]

  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 18
  Successors:
   val SU(35): Latency=1
   val SU(37): Latency=1
   val SU(45): Latency=1
   val SU(54): Latency=1
   val SU(63): Latency=1
   val SU(65): Latency=1

SU(37): 0x30e15d8: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e14b0 [ORD=16] [ID=37]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 27
  Height             : 8
  Predecessors:
   val SU(36): Latency=1
   val SU(59): Latency=1
   val SU(38): Latency=1
  Successors:
   val SU(35): Latency=1
   val SU(64): Latency=1

SU(38): 0x30e14b0: i1 = V_CMP_GE_U32_e64 0x30df098, 0x30e0dc0 [ORD=16] [ID=38]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 26
  Height             : 9
  Predecessors:
   val SU(57): Latency=1
   val SU(39): Latency=1
  Successors:
   val SU(37): Latency=1

SU(39): 0x30e0dc0: i32 = S_MUL_I32 0x30e09f0, 0x30df1c0 [ORD=16] [ID=39]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 25
  Height             : 11
  Predecessors:
   val SU(43): Latency=1
   val SU(40): Latency=1
  Successors:
   val SU(38): Latency=1
   val SU(61): Latency=1

SU(40): 0x30df1c0: i32 = S_XOR_B32 0x30def70, 0x30dc588 [ORD=16] [ID=40]

  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 1
  Latency            : 1
  Depth              : 13
  Height             : 23
  Predecessors:
   val SU(42): Latency=1
   val SU(41): Latency=1
  Successors:
   val SU(39): Latency=1
   val SU(46): Latency=1
   val SU(50): Latency=1
   val SU(55): Latency=1
   val SU(60): Latency=1
   val SU(66): Latency=1
   val SU(67): Latency=1

SU(41): 0x30dc588: i32 = S_ASHR_I32 0x30ddac0, 0x30e0428 [ORD=15] [ID=41]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 11
  Height             : 25
  Predecessors:
   val SU(3): Latency=1
   val SU(32): Latency=1
  Successors:
   val SU(40): Latency=1
   val SU(42): Latency=1

SU(42): 0x30def70: i32 = S_ADD_I32 0x30ddac0, 0x30dc588 [ORD=16] [ID=42]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 12
  Height             : 24
  Predecessors:
   val SU(3): Latency=1
   val SU(41): Latency=1
  Successors:
   val SU(40): Latency=1

SU(43): 0x30e09f0: i32 = V_MUL_HI_U32 0x30e1828, 0x30df098 [ORD=16] [ID=43]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 24
  Height             : 12
  Predecessors:
   val SU(44): Latency=1
   val SU(57): Latency=1
  Successors:
   val SU(39): Latency=1

SU(44): 0x30e1828: i32 = V_CNDMASK_B32_e64 0x30e07a0, 0x30e0678, 0x30e1138 [ORD=16] [ID=44]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 23
  Height             : 13
  Predecessors:
   val SU(56): Latency=1
   val SU(51): Latency=1
   val SU(45): Latency=1
  Successors:
   val SU(43): Latency=1

SU(45): 0x30e1138: i1 = V_CMP_EQ_I32_e64 0x30e01d8, 0x30da220 [ORD=16] [ID=45]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 19
  Height             : 17
  Predecessors:
   val SU(46): Latency=1
   val SU(36): Latency=1
  Successors:
   val SU(44): Latency=1
   val SU(53): Latency=1

SU(46): 0x30e01d8: i32 = V_MUL_HI_U32 0x30dfd38, 0x30df1c0 [ORD=16] [ID=46]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 18
  Height             : 18
  Predecessors:
   val SU(47): Latency=1
   val SU(40): Latency=1
  Successors:
   val SU(45): Latency=1

SU(47): 0x30dfd38: i32 = V_CVT_U32_F32_e32 0x30e29f8 [ORD=16] [ID=47]

  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 1
  Latency            : 1
  Depth              : 17
  Height             : 19
  Predecessors:
   val SU(48): Latency=1
  Successors:
   val SU(46): Latency=1
   val SU(51): Latency=1
   val SU(52): Latency=1
   val SU(55): Latency=1
   val SU(56): Latency=1

SU(48): 0x30e29f8: i32 = V_MUL_F32_e32 0x30e0300, 0x30e28d0 [ORD=16] [ID=48]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 16
  Height             : 20
  Predecessors:
   val SU(49): Latency=1
  Successors:
   val SU(47): Latency=1

SU(49): 0x30e28d0: i32 = V_RCP_IFLAG_F32_e32 0x30e1010 [ORD=16] [ID=49]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 15
  Height             : 21
  Predecessors:
   val SU(50): Latency=1
  Successors:
   val SU(48): Latency=1

SU(50): 0x30e1010: i32 = V_CVT_F32_U32_e32 0x30df1c0 [ORD=16] [ID=50]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 14
  Height             : 22
  Predecessors:
   val SU(40): Latency=1
  Successors:
   val SU(49): Latency=1

SU(51): 0x30e0678: i32 = S_ADD_I32 0x30dfd38, 0x30e0550 [ORD=16] [ID=51]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 22
  Height             : 14
  Predecessors:
   val SU(47): Latency=1
   val SU(52): Latency=1
  Successors:
   val SU(44): Latency=1

SU(52): 0x30e0550: i32 = V_MUL_HI_U32 0x30e08c8, 0x30dfd38 [ORD=16] [ID=52]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 21
  Height             : 15
  Predecessors:
   val SU(53): Latency=1
   val SU(47): Latency=1
  Successors:
   val SU(51): Latency=1
   val SU(56): Latency=1

SU(53): 0x30e08c8: i32 = V_CNDMASK_B32_e64 0x30dff88, 0x30de508, 0x30e1138 [ORD=16] [ID=53]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 20
  Height             : 16
  Predecessors:
   val SU(55): Latency=1
   val SU(54): Latency=1
   val SU(45): Latency=1
  Successors:
   val SU(52): Latency=1

SU(54): 0x30de508: i32 = S_SUB_I32 0x30da220, 0x30dff88 [ORD=16] [ID=54]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 19
  Height             : 17
  Predecessors:
   val SU(36): Latency=1
   val SU(55): Latency=1
  Successors:
   val SU(53): Latency=1

SU(55): 0x30dff88: i32 = S_MUL_I32 0x30dfd38, 0x30df1c0 [ORD=16] [ID=55]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 18
  Height             : 18
  Predecessors:
   val SU(47): Latency=1
   val SU(40): Latency=1
  Successors:
   val SU(53): Latency=1
   val SU(54): Latency=1

SU(56): 0x30e07a0: i32 = S_SUB_I32 0x30dfd38, 0x30e0550 [ORD=16] [ID=56]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 22
  Height             : 14
  Predecessors:
   val SU(47): Latency=1
   val SU(52): Latency=1
  Successors:
   val SU(44): Latency=1

SU(57): 0x30df098: i32 = S_XOR_B32 0x30dee48, 0x30e1ba0 [ORD=16] [ID=57]

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 11
  Height             : 13
  Predecessors:
   val SU(58): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(38): Latency=1
   val SU(43): Latency=1
   val SU(61): Latency=1

SU(58): 0x30dee48: i32 = S_ADD_I32 0x30dd748, 0x30e1ba0 [ORD=16] [ID=58]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 10
  Height             : 14
  Predecessors:
   val SU(5): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(57): Latency=1

SU(59): 0x30dc460: i32 = V_MOV_B32_e32 0x30dd3d0 [ID=59]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
   val SU(37): Latency=1
   val SU(65): Latency=1

SU(60): 0x30e1a78: i32 = S_ADD_I32 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=60]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 27
  Height             : 5
  Predecessors:
   val SU(61): Latency=1
   val SU(40): Latency=1
  Successors:
   val SU(34): Latency=1

SU(61): 0x30e0ee8: i32 = S_SUB_I32 0x30df098, 0x30e0dc0 [ORD=16] [ID=61]

  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 1
  Latency            : 1
  Depth              : 26
  Height             : 10
  Predecessors:
   val SU(57): Latency=1
   val SU(39): Latency=1
  Successors:
   val SU(60): Latency=1
   val SU(62): Latency=1
   val SU(66): Latency=1
   val SU(67): Latency=1

SU(62): 0x30e2558: i32 = V_CNDMASK_B32_e64 0x30e1950, 0x30e0ee8, 0x30e21e0 [ORD=16] [ID=62]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 31
  Height             : 5
  Predecessors:
   val SU(67): Latency=1
   val SU(61): Latency=1
   val SU(63): Latency=1
  Successors:
   val SU(34): Latency=1

SU(63): 0x30e21e0: i1 = V_CMP_EQ_I32_e64 0x30e1388, 0x30da220 [ORD=16] [ID=63]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 30
  Height             : 6
  Predecessors:
   val SU(64): Latency=1
   val SU(36): Latency=1
  Successors:
   val SU(62): Latency=1

SU(64): 0x30e1388: i32 = S_AND_B32 0x30e1700, 0x30e15d8 [ORD=16] [ID=64]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 29
  Height             : 7
  Predecessors:
   val SU(65): Latency=1
   val SU(37): Latency=1
  Successors:
   val SU(63): Latency=1

SU(65): 0x30e1700: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e1260 [ORD=16] [ID=65]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 28
  Height             : 8
  Predecessors:
   val SU(36): Latency=1
   val SU(59): Latency=1
   val SU(66): Latency=1
  Successors:
   val SU(64): Latency=1

SU(66): 0x30e1260: i1 = V_CMP_GE_U32_e64 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=66]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 27
  Height             : 9
  Predecessors:
   val SU(61): Latency=1
   val SU(40): Latency=1
  Successors:
   val SU(65): Latency=1

SU(67): 0x30e1950: i32 = S_SUB_I32 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=67]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 27
  Height             : 6
  Predecessors:
   val SU(61): Latency=1
   val SU(40): Latency=1
  Successors:
   val SU(62): Latency=1


Examining Available:
Height 0: SU(0): 0x30de3e0: ch = S_ENDPGM 0x30ddf60 [ORD=20] [ID=0]


*** Scheduling [0]: SU(0): 0x30de3e0: ch = S_ENDPGM 0x30ddf60 [ORD=20] [ID=0]


Examining Available:
Height 1: SU(1): 0x30ddf60: ch = TBUFFER_STORE_FORMAT_X 0x30e00b0, 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30ddd10, 0x30dadb0, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dde38:1<Mem:ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=1]


*** Scheduling [1]: SU(1): 0x30ddf60: ch = TBUFFER_STORE_FORMAT_X 0x30e00b0, 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30ddd10, 0x30dadb0, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dde38:1<Mem:ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=1]


Examining Available:
Height 2: SU(2): 0x30dde38: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30ddd10, 0x30dadb0, 0x30ddac0:1 [ORD=18] [ID=2]

Height 2: SU(30): 0x30e00b0: i32 = S_SUB_I32 0x30dfe60, 0x30e1ba0 [ORD=16] [ID=30]


*** Scheduling [2]: SU(2): 0x30dde38: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30ddd10, 0x30dadb0, 0x30ddac0:1 [ORD=18] [ID=2]


Examining Available:
Height 3: SU(29): 0x30ddd10: i32 = S_ADD_I32 0x30da7e8, 0x30dd180 [ORD=17] [ID=29]

Height 2: SU(30): 0x30e00b0: i32 = S_SUB_I32 0x30dfe60, 0x30e1ba0 [ORD=16] [ID=30]


*** Scheduling [3]: SU(29): 0x30ddd10: i32 = S_ADD_I32 0x30da7e8, 0x30dd180 [ORD=17] [ID=29]


Examining Available:
Height 2: SU(30): 0x30e00b0: i32 = S_SUB_I32 0x30dfe60, 0x30e1ba0 [ORD=16] [ID=30]


*** Scheduling [4]: SU(30): 0x30e00b0: i32 = S_SUB_I32 0x30dfe60, 0x30e1ba0 [ORD=16] [ID=30]


Examining Available:
Height 5: SU(33): 0x30dfe60: i32 = S_XOR_B32 0x30dca28, 0x30e1ba0 [ORD=16] [ID=33]


*** Scheduling [5]: SU(33): 0x30dfe60: i32 = S_XOR_B32 0x30dca28, 0x30e1ba0 [ORD=16] [ID=33]


Examining Available:
Height 6: SU(34): 0x30dca28: i32 = V_CNDMASK_B32_e64 0x30e2558, 0x30e1a78, 0x30e2308 [ORD=16] [ID=34]


*** Scheduling [6]: SU(34): 0x30dca28: i32 = V_CNDMASK_B32_e64 0x30e2558, 0x30e1a78, 0x30e2308 [ORD=16] [ID=34]


Examining Available:
  Comparing latency of SU (60) depth 27 vs SU (35) depth 28
Height 7: SU(35): 0x30e2308: i1 = V_CMP_EQ_I32_e64 0x30e15d8, 0x30da220 [ORD=16] [ID=35]

Height 7: SU(60): 0x30e1a78: i32 = S_ADD_I32 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=60]

Height 7: SU(62): 0x30e2558: i32 = V_CNDMASK_B32_e64 0x30e1950, 0x30e0ee8, 0x30e21e0 [ORD=16] [ID=62]

  Comparing latency of SU (60) depth 27 vs SU (35) depth 28

*** Scheduling [7]: SU(35): 0x30e2308: i1 = V_CMP_EQ_I32_e64 0x30e15d8, 0x30da220 [ORD=16] [ID=35]


Examining Available:
Height 7: SU(60): 0x30e1a78: i32 = S_ADD_I32 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=60]

Height 7: SU(62): 0x30e2558: i32 = V_CNDMASK_B32_e64 0x30e1950, 0x30e0ee8, 0x30e21e0 [ORD=16] [ID=62]


*** Scheduling [8]: SU(60): 0x30e1a78: i32 = S_ADD_I32 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=60]


Examining Available:
Height 7: SU(62): 0x30e2558: i32 = V_CNDMASK_B32_e64 0x30e1950, 0x30e0ee8, 0x30e21e0 [ORD=16] [ID=62]


*** Scheduling [9]: SU(62): 0x30e2558: i32 = V_CNDMASK_B32_e64 0x30e1950, 0x30e0ee8, 0x30e21e0 [ORD=16] [ID=62]


Examining Available:
Height 10: SU(67): 0x30e1950: i32 = S_SUB_I32 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=67]

Height 10: SU(63): 0x30e21e0: i1 = V_CMP_EQ_I32_e64 0x30e1388, 0x30da220 [ORD=16] [ID=63]


*** Scheduling [10]: SU(67): 0x30e1950: i32 = S_SUB_I32 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=67]


Examining Available:
Height 10: SU(63): 0x30e21e0: i1 = V_CMP_EQ_I32_e64 0x30e1388, 0x30da220 [ORD=16] [ID=63]


*** Scheduling [11]: SU(63): 0x30e21e0: i1 = V_CMP_EQ_I32_e64 0x30e1388, 0x30da220 [ORD=16] [ID=63]


Examining Available:
Height 12: SU(64): 0x30e1388: i32 = S_AND_B32 0x30e1700, 0x30e15d8 [ORD=16] [ID=64]


*** Scheduling [12]: SU(64): 0x30e1388: i32 = S_AND_B32 0x30e1700, 0x30e15d8 [ORD=16] [ID=64]


Examining Available:
  Comparing latency of SU (65) depth 28 vs SU (37) depth 27
Height 13: SU(65): 0x30e1700: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e1260 [ORD=16] [ID=65]

Height 13: SU(37): 0x30e15d8: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e14b0 [ORD=16] [ID=37]

  Comparing latency of SU (65) depth 28 vs SU (37) depth 27

*** Scheduling [13]: SU(65): 0x30e1700: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e1260 [ORD=16] [ID=65]


Examining Available:
Height 14: SU(66): 0x30e1260: i1 = V_CMP_GE_U32_e64 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=66]

Height 13: SU(37): 0x30e15d8: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e14b0 [ORD=16] [ID=37]


*** Scheduling [14]: SU(66): 0x30e1260: i1 = V_CMP_GE_U32_e64 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=66]


Examining Available:
Height 15: SU(61): 0x30e0ee8: i32 = S_SUB_I32 0x30df098, 0x30e0dc0 [ORD=16] [ID=61]

Height 13: SU(37): 0x30e15d8: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e14b0 [ORD=16] [ID=37]


*** Scheduling [15]: SU(61): 0x30e0ee8: i32 = S_SUB_I32 0x30df098, 0x30e0dc0 [ORD=16] [ID=61]


Examining Available:
Height 13: SU(37): 0x30e15d8: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e14b0 [ORD=16] [ID=37]


*** Scheduling [16]: SU(37): 0x30e15d8: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e14b0 [ORD=16] [ID=37]


Examining Available:
Height 17: SU(59): 0x30dc460: i32 = V_MOV_B32_e32 0x30dd3d0 [ID=59]

Height 17: SU(38): 0x30e14b0: i1 = V_CMP_GE_U32_e64 0x30df098, 0x30e0dc0 [ORD=16] [ID=38]


*** Scheduling [17]: SU(59): 0x30dc460: i32 = V_MOV_B32_e32 0x30dd3d0 [ID=59]


Examining Available:
Height 17: SU(38): 0x30e14b0: i1 = V_CMP_GE_U32_e64 0x30df098, 0x30e0dc0 [ORD=16] [ID=38]


*** Scheduling [18]: SU(38): 0x30e14b0: i1 = V_CMP_GE_U32_e64 0x30df098, 0x30e0dc0 [ORD=16] [ID=38]


Examining Available:
Height 19: SU(39): 0x30e0dc0: i32 = S_MUL_I32 0x30e09f0, 0x30df1c0 [ORD=16] [ID=39]


*** Scheduling [19]: SU(39): 0x30e0dc0: i32 = S_MUL_I32 0x30e09f0, 0x30df1c0 [ORD=16] [ID=39]


Examining Available:
Height 20: SU(43): 0x30e09f0: i32 = V_MUL_HI_U32 0x30e1828, 0x30df098 [ORD=16] [ID=43]


*** Scheduling [20]: SU(43): 0x30e09f0: i32 = V_MUL_HI_U32 0x30e1828, 0x30df098 [ORD=16] [ID=43]


Examining Available:
Height 21: SU(57): 0x30df098: i32 = S_XOR_B32 0x30dee48, 0x30e1ba0 [ORD=16] [ID=57]

Height 21: SU(44): 0x30e1828: i32 = V_CNDMASK_B32_e64 0x30e07a0, 0x30e0678, 0x30e1138 [ORD=16] [ID=44]


*** Scheduling [21]: SU(57): 0x30df098: i32 = S_XOR_B32 0x30dee48, 0x30e1ba0 [ORD=16] [ID=57]


Examining Available:
Height 22: SU(58): 0x30dee48: i32 = S_ADD_I32 0x30dd748, 0x30e1ba0 [ORD=16] [ID=58]

Height 21: SU(44): 0x30e1828: i32 = V_CNDMASK_B32_e64 0x30e07a0, 0x30e0678, 0x30e1138 [ORD=16] [ID=44]


*** Scheduling [22]: SU(58): 0x30dee48: i32 = S_ADD_I32 0x30dd748, 0x30e1ba0 [ORD=16] [ID=58]


Examining Available:
Height 21: SU(44): 0x30e1828: i32 = V_CNDMASK_B32_e64 0x30e07a0, 0x30e0678, 0x30e1138 [ORD=16] [ID=44]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [23]: SU(44): 0x30e1828: i32 = V_CNDMASK_B32_e64 0x30e07a0, 0x30e0678, 0x30e1138 [ORD=16] [ID=44]


Examining Available:
Height 24: SU(56): 0x30e07a0: i32 = S_SUB_I32 0x30dfd38, 0x30e0550 [ORD=16] [ID=56]

Height 24: SU(51): 0x30e0678: i32 = S_ADD_I32 0x30dfd38, 0x30e0550 [ORD=16] [ID=51]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [24]: SU(56): 0x30e07a0: i32 = S_SUB_I32 0x30dfd38, 0x30e0550 [ORD=16] [ID=56]


Examining Available:
Height 24: SU(51): 0x30e0678: i32 = S_ADD_I32 0x30dfd38, 0x30e0550 [ORD=16] [ID=51]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [25]: SU(51): 0x30e0678: i32 = S_ADD_I32 0x30dfd38, 0x30e0550 [ORD=16] [ID=51]


Examining Available:
Height 26: SU(52): 0x30e0550: i32 = V_MUL_HI_U32 0x30e08c8, 0x30dfd38 [ORD=16] [ID=52]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [26]: SU(52): 0x30e0550: i32 = V_MUL_HI_U32 0x30e08c8, 0x30dfd38 [ORD=16] [ID=52]


Examining Available:
Height 27: SU(53): 0x30e08c8: i32 = V_CNDMASK_B32_e64 0x30dff88, 0x30de508, 0x30e1138 [ORD=16] [ID=53]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [27]: SU(53): 0x30e08c8: i32 = V_CNDMASK_B32_e64 0x30dff88, 0x30de508, 0x30e1138 [ORD=16] [ID=53]


Examining Available:
Height 28: SU(54): 0x30de508: i32 = S_SUB_I32 0x30da220, 0x30dff88 [ORD=16] [ID=54]

Height 28: SU(45): 0x30e1138: i1 = V_CMP_EQ_I32_e64 0x30e01d8, 0x30da220 [ORD=16] [ID=45]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [28]: SU(54): 0x30de508: i32 = S_SUB_I32 0x30da220, 0x30dff88 [ORD=16] [ID=54]


Examining Available:
Height 29: SU(55): 0x30dff88: i32 = S_MUL_I32 0x30dfd38, 0x30df1c0 [ORD=16] [ID=55]

Height 28: SU(45): 0x30e1138: i1 = V_CMP_EQ_I32_e64 0x30e01d8, 0x30da220 [ORD=16] [ID=45]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [29]: SU(55): 0x30dff88: i32 = S_MUL_I32 0x30dfd38, 0x30df1c0 [ORD=16] [ID=55]


Examining Available:
Height 28: SU(45): 0x30e1138: i1 = V_CMP_EQ_I32_e64 0x30e01d8, 0x30da220 [ORD=16] [ID=45]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [30]: SU(45): 0x30e1138: i1 = V_CMP_EQ_I32_e64 0x30e01d8, 0x30da220 [ORD=16] [ID=45]


Examining Available:
Height 31: SU(36): 0x30da220: i32 = S_MOV_B32 0x30e2430 [ID=36]

Height 31: SU(46): 0x30e01d8: i32 = V_MUL_HI_U32 0x30dfd38, 0x30df1c0 [ORD=16] [ID=46]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [31]: SU(36): 0x30da220: i32 = S_MOV_B32 0x30e2430 [ID=36]


Examining Available:
Height 31: SU(46): 0x30e01d8: i32 = V_MUL_HI_U32 0x30dfd38, 0x30df1c0 [ORD=16] [ID=46]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [32]: SU(46): 0x30e01d8: i32 = V_MUL_HI_U32 0x30dfd38, 0x30df1c0 [ORD=16] [ID=46]


Examining Available:
Height 33: SU(47): 0x30dfd38: i32 = V_CVT_U32_F32_e32 0x30e29f8 [ORD=16] [ID=47]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [33]: SU(47): 0x30dfd38: i32 = V_CVT_U32_F32_e32 0x30e29f8 [ORD=16] [ID=47]


Examining Available:
Height 34: SU(48): 0x30e29f8: i32 = V_MUL_F32_e32 0x30e0300, 0x30e28d0 [ORD=16] [ID=48]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [34]: SU(48): 0x30e29f8: i32 = V_MUL_F32_e32 0x30e0300, 0x30e28d0 [ORD=16] [ID=48]


Examining Available:
Height 35: SU(49): 0x30e28d0: i32 = V_RCP_IFLAG_F32_e32 0x30e1010 [ORD=16] [ID=49]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [35]: SU(49): 0x30e28d0: i32 = V_RCP_IFLAG_F32_e32 0x30e1010 [ORD=16] [ID=49]


Examining Available:
Height 36: SU(50): 0x30e1010: i32 = V_CVT_F32_U32_e32 0x30df1c0 [ORD=16] [ID=50]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [36]: SU(50): 0x30e1010: i32 = V_CVT_F32_U32_e32 0x30df1c0 [ORD=16] [ID=50]


Examining Available:
Height 37: SU(40): 0x30df1c0: i32 = S_XOR_B32 0x30def70, 0x30dc588 [ORD=16] [ID=40]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [37]: SU(40): 0x30df1c0: i32 = S_XOR_B32 0x30def70, 0x30dc588 [ORD=16] [ID=40]


Examining Available:
Height 38: SU(42): 0x30def70: i32 = S_ADD_I32 0x30ddac0, 0x30dc588 [ORD=16] [ID=42]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [38]: SU(42): 0x30def70: i32 = S_ADD_I32 0x30ddac0, 0x30dc588 [ORD=16] [ID=42]


Examining Available:
Height 39: SU(41): 0x30dc588: i32 = S_ASHR_I32 0x30ddac0, 0x30e0428 [ORD=15] [ID=41]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [39]: SU(41): 0x30dc588: i32 = S_ASHR_I32 0x30ddac0, 0x30e0428 [ORD=15] [ID=41]


Examining Available:
Height 40: SU(3): 0x30ddac0: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd870, 0x30dc0e8, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd998:1<Mem:LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=3]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [40]: SU(3): 0x30ddac0: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd870, 0x30dc0e8, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd998:1<Mem:LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=3]


Examining Available:
Height 41: SU(4): 0x30dd998: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd870, 0x30dc0e8, 0x30dd748:1 [ORD=14] [ID=4]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [41]: SU(4): 0x30dd998: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd870, 0x30dc0e8, 0x30dd748:1 [ORD=14] [ID=4]


Examining Available:
Height 42: SU(25): 0x30dd870: i32 = S_ADD_I32 0x30da598, 0x30dd180 [ORD=13] [ID=25]

Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [42]: SU(25): 0x30dd870: i32 = S_ADD_I32 0x30da598, 0x30dd180 [ORD=13] [ID=25]


Examining Available:
Height 23: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


*** Scheduling [43]: SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]


Examining Available:
Height 44: SU(32): 0x30e0428: i32 = S_MOV_B32 0x30da6c0 [ID=32]

Height 44: SU(5): 0x30dd748: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd2a8, 0x30dc338, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd4f8:1<Mem:LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=5]


*** Scheduling [44]: SU(32): 0x30e0428: i32 = S_MOV_B32 0x30da6c0 [ID=32]


Examining Available:
Height 44: SU(5): 0x30dd748: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd2a8, 0x30dc338, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd4f8:1<Mem:LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=5]


*** Scheduling [45]: SU(5): 0x30dd748: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd2a8, 0x30dc338, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd4f8:1<Mem:LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=5]


Examining Available:
Height 46: SU(6): 0x30dd4f8: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd2a8, 0x30dc338, 0x30dc338:1 [ORD=11] [ID=6]


*** Scheduling [46]: SU(6): 0x30dd4f8: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd2a8, 0x30dc338, 0x30dc338:1 [ORD=11] [ID=6]


Examining Available:
Height 47: SU(10): 0x30dd2a8: i32 = S_ADD_I32 0x30da348, 0x30dd180 [ORD=10] [ID=10]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [47]: SU(10): 0x30dd2a8: i32 = S_ADD_I32 0x30da348, 0x30dd180 [ORD=10] [ID=10]


Examining Available:
Height 48: SU(11): 0x30dd180: i32 = S_LSHL_B32 0x30dcc78, 0x30dcda0 [ORD=10] [ID=11]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [48]: SU(11): 0x30dd180: i32 = S_LSHL_B32 0x30dcc78, 0x30dcda0 [ORD=10] [ID=11]


Examining Available:
Height 49: SU(12): 0x30dcda0: i32 = S_MOV_B32 0x30e2b20 [ID=12]

Height 49: SU(13): 0x30dcc78: i32 = S_ADD_I32 0x30de630, 0x30dc900 [ORD=9] [ID=13]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [49]: SU(12): 0x30dcda0: i32 = S_MOV_B32 0x30e2b20 [ID=12]


Examining Available:
Height 49: SU(13): 0x30dcc78: i32 = S_ADD_I32 0x30de630, 0x30dc900 [ORD=9] [ID=13]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [50]: SU(13): 0x30dcc78: i32 = S_ADD_I32 0x30de630, 0x30dc900 [ORD=9] [ID=13]


Examining Available:
Height 51: SU(20): 0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8 [ID=20]

Height 51: SU(14): 0x30dc900: i32 = S_MUL_I32 0x30dead0, 0x30debf8 [ORD=7] [ID=14]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [51]: SU(20): 0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8 [ID=20]


Examining Available:
Height 51: SU(14): 0x30dc900: i32 = S_MUL_I32 0x30dead0, 0x30debf8 [ORD=7] [ID=14]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [52]: SU(14): 0x30dc900: i32 = S_MUL_I32 0x30dead0, 0x30debf8 [ORD=7] [ID=14]


Examining Available:
Height 53: SU(15): 0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8 [ID=15]

Height 53: SU(16): 0x30dead0: i32 = S_MIN_U32 0x30de880, 0x30de9a8 [ORD=6] [ID=16]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [53]: SU(15): 0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8 [ID=15]


Examining Available:
Height 53: SU(16): 0x30dead0: i32 = S_MIN_U32 0x30de880, 0x30de9a8 [ORD=6] [ID=16]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [54]: SU(16): 0x30dead0: i32 = S_MIN_U32 0x30de880, 0x30de9a8 [ORD=6] [ID=16]


Examining Available:
Height 55: SU(17): 0x30de9a8: i32 = S_MOV_B32 0x30dd620 [ID=17]

Height 55: SU(18): 0x30de880: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30de758, 0x30daa38, 0x3072c40 [ORD=6] [ID=18]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [55]: SU(17): 0x30de9a8: i32 = S_MOV_B32 0x30dd620 [ID=17]


Examining Available:
Height 55: SU(18): 0x30de880: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30de758, 0x30daa38, 0x3072c40 [ORD=6] [ID=18]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [56]: SU(18): 0x30de880: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30de758, 0x30daa38, 0x3072c40 [ORD=6] [ID=18]


Examining Available:
Height 57: SU(19): 0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6] [ID=19]

Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [57]: SU(19): 0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6] [ID=19]


Examining Available:
Height 47: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


*** Scheduling [58]: SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]


Examining Available:
Height 59: SU(8): 0x30dc210: i32 = V_MOV_B32_e32 0x30e2c48 [ID=8]

Height 59: SU(23): 0x30dc0e8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dbfc0, 0x30dadb0:1 [ORD=3] [ID=23]


*** Scheduling [59]: SU(8): 0x30dc210: i32 = V_MOV_B32_e32 0x30e2c48 [ID=8]


Examining Available:
Height 59: SU(23): 0x30dc0e8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dbfc0, 0x30dadb0:1 [ORD=3] [ID=23]


*** Scheduling [60]: SU(23): 0x30dc0e8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dbfc0, 0x30dadb0:1 [ORD=3] [ID=23]


Examining Available:
Height 61: SU(24): 0x30dbfc0: i32 = V_MOV_B32_e32 0x30e2d70 [ID=24]

Height 61: SU(26): 0x30dadb0: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dac88, 0x30da910 [ORD=2] [ID=26]


*** Scheduling [61]: SU(24): 0x30dbfc0: i32 = V_MOV_B32_e32 0x30e2d70 [ID=24]


Examining Available:
Height 61: SU(26): 0x30dadb0: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dac88, 0x30da910 [ORD=2] [ID=26]


*** Scheduling [62]: SU(26): 0x30dadb0: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dac88, 0x30da910 [ORD=2] [ID=26]


Examining Available:
Height 62: SU(27): 0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=27]

Height 63: SU(9): 0x30dab60: i32 = V_MOV_B32_e32 0x30e2fc0 [ID=9]

Height 63: SU(28): 0x30dac88: i32 = V_MOV_B32_e32 0x30e2e98 [ID=28]


*** Scheduling [63]: SU(27): 0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=27]


Examining Available:
Height 63: SU(9): 0x30dab60: i32 = V_MOV_B32_e32 0x30e2fc0 [ID=9]

Height 63: SU(28): 0x30dac88: i32 = V_MOV_B32_e32 0x30e2e98 [ID=28]

Height 64: SU(21): 0x30da7e8: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30da470, 0x3072c40, 0x30da598:2 [ORD=1] [ID=21]

    0x30da348: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30e2430, 0x3072c40 [ORD=1] [ID=21]

    0x30da598: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30daa38, 0x3072c40, 0x30da348:2 [ORD=1] [ID=21]


*** Scheduling [64]: SU(9): 0x30dab60: i32 = V_MOV_B32_e32 0x30e2fc0 [ID=9]


Examining Available:
Height 63: SU(28): 0x30dac88: i32 = V_MOV_B32_e32 0x30e2e98 [ID=28]

Height 64: SU(21): 0x30da7e8: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30da470, 0x3072c40, 0x30da598:2 [ORD=1] [ID=21]

    0x30da348: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30e2430, 0x3072c40 [ORD=1] [ID=21]

    0x30da598: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30daa38, 0x3072c40, 0x30da348:2 [ORD=1] [ID=21]


*** Scheduling [65]: SU(28): 0x30dac88: i32 = V_MOV_B32_e32 0x30e2e98 [ID=28]


Examining Available:
Height 64: SU(21): 0x30da7e8: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30da470, 0x3072c40, 0x30da598:2 [ORD=1] [ID=21]

    0x30da348: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30e2430, 0x3072c40 [ORD=1] [ID=21]

    0x30da598: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30daa38, 0x3072c40, 0x30da348:2 [ORD=1] [ID=21]


*** Scheduling [66]: SU(21): 0x30da7e8: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30da470, 0x3072c40, 0x30da598:2 [ORD=1] [ID=21]

    0x30da348: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30e2430, 0x3072c40 [ORD=1] [ID=21]

    0x30da598: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30daa38, 0x3072c40, 0x30da348:2 [ORD=1] [ID=21]


Examining Available:
Height 67: SU(22): 0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=22]


*** Scheduling [67]: SU(22): 0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=22]

*** Final schedule ***
SU(22): 0x30da0f8: v4i32,ch = CopyFromReg 0x3072c40, 0x30d9fd0 [ORD=1] [ID=22]

SU(21): 0x30da7e8: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30da470, 0x3072c40, 0x30da598:2 [ORD=1] [ID=21]

    0x30da348: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30e2430, 0x3072c40 [ORD=1] [ID=21]

    0x30da598: i32,ch,glue = S_BUFFER_LOAD_DWORD_IMM 0x30da0f8, 0x30daa38, 0x3072c40, 0x30da348:2 [ORD=1] [ID=21]

SU(28): 0x30dac88: i32 = V_MOV_B32_e32 0x30e2e98 [ID=28]

SU(9): 0x30dab60: i32 = V_MOV_B32_e32 0x30e2fc0 [ID=9]

SU(27): 0x30da910: ch = TokenFactor 0x30da348:1, 0x30da598:1, 0x30da7e8:1 [ORD=1] [ID=27]

SU(26): 0x30dadb0: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dac88, 0x30da910 [ORD=2] [ID=26]

SU(24): 0x30dbfc0: i32 = V_MOV_B32_e32 0x30e2d70 [ID=24]

SU(23): 0x30dc0e8: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dbfc0, 0x30dadb0:1 [ORD=3] [ID=23]

SU(8): 0x30dc210: i32 = V_MOV_B32_e32 0x30e2c48 [ID=8]

SU(7): 0x30dc338: v4i32,ch = SI_M2S_GET_UAV_DESC 0x30dab60, 0x30dc210, 0x30dc0e8:1 [ORD=4] [ID=7]

SU(19): 0x30de758: v4i32,ch = CopyFromReg 0x3072c40, 0x30dcb50 [ORD=6] [ID=19]

SU(18): 0x30de880: i32,ch = S_BUFFER_LOAD_DWORD_IMM 0x30de758, 0x30daa38, 0x3072c40 [ORD=6] [ID=18]

SU(17): 0x30de9a8: i32 = S_MOV_B32 0x30dd620 [ID=17]

SU(16): 0x30dead0: i32 = S_MIN_U32 0x30de880, 0x30de9a8 [ORD=6] [ID=16]

SU(15): 0x30debf8: i32,ch = CopyFromReg 0x3072c40, 0x30dc7d8 [ID=15]

SU(14): 0x30dc900: i32 = S_MUL_I32 0x30dead0, 0x30debf8 [ORD=7] [ID=14]

SU(20): 0x30de630: i32,ch = CopyFromReg 0x3072c40, 0x30ddbe8 [ID=20]

SU(13): 0x30dcc78: i32 = S_ADD_I32 0x30de630, 0x30dc900 [ORD=9] [ID=13]

SU(12): 0x30dcda0: i32 = S_MOV_B32 0x30e2b20 [ID=12]

SU(11): 0x30dd180: i32 = S_LSHL_B32 0x30dcc78, 0x30dcda0 [ORD=10] [ID=11]

SU(10): 0x30dd2a8: i32 = S_ADD_I32 0x30da348, 0x30dd180 [ORD=10] [ID=10]

SU(6): 0x30dd4f8: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd2a8, 0x30dc338, 0x30dc338:1 [ORD=11] [ID=6]

SU(5): 0x30dd748: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd2a8, 0x30dc338, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd4f8:1<Mem:LD4[%pac.arrayidx(addrspace=1)]> [ORD=12] [ID=5]

SU(32): 0x30e0428: i32 = S_MOV_B32 0x30da6c0 [ID=32]

SU(31): 0x30e1ba0: i32 = S_ASHR_I32 0x30dd748, 0x30e0428 [ORD=12] [ID=31]

SU(25): 0x30dd870: i32 = S_ADD_I32 0x30da598, 0x30dd180 [ORD=13] [ID=25]

SU(4): 0x30dd998: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30dd870, 0x30dc0e8, 0x30dd748:1 [ORD=14] [ID=4]

SU(3): 0x30ddac0: i32,ch = TBUFFER_LOAD_FORMAT_X 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30dd870, 0x30dc0e8, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dd998:1<Mem:LD4[%pac.arrayidx1(addrspace=1)]> [ORD=15] [ID=3]

SU(41): 0x30dc588: i32 = S_ASHR_I32 0x30ddac0, 0x30e0428 [ORD=15] [ID=41]

SU(42): 0x30def70: i32 = S_ADD_I32 0x30ddac0, 0x30dc588 [ORD=16] [ID=42]

SU(40): 0x30df1c0: i32 = S_XOR_B32 0x30def70, 0x30dc588 [ORD=16] [ID=40]

SU(50): 0x30e1010: i32 = V_CVT_F32_U32_e32 0x30df1c0 [ORD=16] [ID=50]

SU(49): 0x30e28d0: i32 = V_RCP_IFLAG_F32_e32 0x30e1010 [ORD=16] [ID=49]

SU(48): 0x30e29f8: i32 = V_MUL_F32_e32 0x30e0300, 0x30e28d0 [ORD=16] [ID=48]

SU(47): 0x30dfd38: i32 = V_CVT_U32_F32_e32 0x30e29f8 [ORD=16] [ID=47]

SU(46): 0x30e01d8: i32 = V_MUL_HI_U32 0x30dfd38, 0x30df1c0 [ORD=16] [ID=46]

SU(36): 0x30da220: i32 = S_MOV_B32 0x30e2430 [ID=36]

SU(45): 0x30e1138: i1 = V_CMP_EQ_I32_e64 0x30e01d8, 0x30da220 [ORD=16] [ID=45]

SU(55): 0x30dff88: i32 = S_MUL_I32 0x30dfd38, 0x30df1c0 [ORD=16] [ID=55]

SU(54): 0x30de508: i32 = S_SUB_I32 0x30da220, 0x30dff88 [ORD=16] [ID=54]

SU(53): 0x30e08c8: i32 = V_CNDMASK_B32_e64 0x30dff88, 0x30de508, 0x30e1138 [ORD=16] [ID=53]

SU(52): 0x30e0550: i32 = V_MUL_HI_U32 0x30e08c8, 0x30dfd38 [ORD=16] [ID=52]

SU(51): 0x30e0678: i32 = S_ADD_I32 0x30dfd38, 0x30e0550 [ORD=16] [ID=51]

SU(56): 0x30e07a0: i32 = S_SUB_I32 0x30dfd38, 0x30e0550 [ORD=16] [ID=56]

SU(44): 0x30e1828: i32 = V_CNDMASK_B32_e64 0x30e07a0, 0x30e0678, 0x30e1138 [ORD=16] [ID=44]

SU(58): 0x30dee48: i32 = S_ADD_I32 0x30dd748, 0x30e1ba0 [ORD=16] [ID=58]

SU(57): 0x30df098: i32 = S_XOR_B32 0x30dee48, 0x30e1ba0 [ORD=16] [ID=57]

SU(43): 0x30e09f0: i32 = V_MUL_HI_U32 0x30e1828, 0x30df098 [ORD=16] [ID=43]

SU(39): 0x30e0dc0: i32 = S_MUL_I32 0x30e09f0, 0x30df1c0 [ORD=16] [ID=39]

SU(38): 0x30e14b0: i1 = V_CMP_GE_U32_e64 0x30df098, 0x30e0dc0 [ORD=16] [ID=38]

SU(59): 0x30dc460: i32 = V_MOV_B32_e32 0x30dd3d0 [ID=59]

SU(37): 0x30e15d8: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e14b0 [ORD=16] [ID=37]

SU(61): 0x30e0ee8: i32 = S_SUB_I32 0x30df098, 0x30e0dc0 [ORD=16] [ID=61]

SU(66): 0x30e1260: i1 = V_CMP_GE_U32_e64 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=66]

SU(65): 0x30e1700: i32 = V_CNDMASK_B32_e64 0x30da220, 0x30dc460, 0x30e1260 [ORD=16] [ID=65]

SU(64): 0x30e1388: i32 = S_AND_B32 0x30e1700, 0x30e15d8 [ORD=16] [ID=64]

SU(63): 0x30e21e0: i1 = V_CMP_EQ_I32_e64 0x30e1388, 0x30da220 [ORD=16] [ID=63]

SU(67): 0x30e1950: i32 = S_SUB_I32 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=67]

SU(62): 0x30e2558: i32 = V_CNDMASK_B32_e64 0x30e1950, 0x30e0ee8, 0x30e21e0 [ORD=16] [ID=62]

SU(60): 0x30e1a78: i32 = S_ADD_I32 0x30e0ee8, 0x30df1c0 [ORD=16] [ID=60]

SU(35): 0x30e2308: i1 = V_CMP_EQ_I32_e64 0x30e15d8, 0x30da220 [ORD=16] [ID=35]

SU(34): 0x30dca28: i32 = V_CNDMASK_B32_e64 0x30e2558, 0x30e1a78, 0x30e2308 [ORD=16] [ID=34]

SU(33): 0x30dfe60: i32 = S_XOR_B32 0x30dca28, 0x30e1ba0 [ORD=16] [ID=33]

SU(30): 0x30e00b0: i32 = S_SUB_I32 0x30dfe60, 0x30e1ba0 [ORD=16] [ID=30]

SU(29): 0x30ddd10: i32 = S_ADD_I32 0x30da7e8, 0x30dd180 [ORD=17] [ID=29]

SU(2): 0x30dde38: i32,ch = SI_M2S_PAC_UAV_DESC_I32_GLOBAL 0x30ddd10, 0x30dadb0, 0x30ddac0:1 [ORD=18] [ID=2]

SU(1): 0x30ddf60: ch = TBUFFER_STORE_FORMAT_X 0x30e00b0, 0x30dc6b0, 0x30ded20, 0x30dfc10, 0x30dfc10, 0x30dfc10, 0x30e27a8, 0x30e2680, 0x30ddd10, 0x30dadb0, 0x30dfc10, 0x30dfc10, 0x30e2430, 0x30dde38:1<Mem:ST4[%pac.arrayidx2(addrspace=1)]> [ORD=19] [ID=1]

SU(0): 0x30de3e0: ch = S_ENDPGM 0x30ddf60 [ORD=20] [ID=0]


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, %vreg16<kill>, %SCC<imp-def,dead>; SReg_32:%vreg17,%vreg16 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg20<def> = COPY %vreg3; SReg_32:%vreg20 VGPR_32:%vreg3
	%vreg19<def> = S_ADD_I32 %vreg20, %vreg18<kill>, %SCC<imp-def,dead>; SReg_32:%vreg19,%vreg20,%vreg18
	%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
	%vreg22<def> = S_LSHL_B32 %vreg19<kill>, %vreg21<kill>, %SCC<imp-def,dead>; SReg_32:%vreg22,%vreg19,%vreg21
	%vreg23<def> = S_ADD_I32 %vreg5<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg23,%vreg22 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg23, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24,%vreg23 SReg_128:%vreg14
	%vreg26<def> = COPY %vreg23; VGPR_32:%vreg26 SReg_32:%vreg23
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg26, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg26 SReg_128:%vreg14
	%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
	%vreg29<def> = COPY %vreg25; SReg_32:%vreg29 VGPR_32:%vreg25
	%vreg28<def> = S_ASHR_I32 %vreg29, %vreg27, %SCC<imp-def,dead>; SReg_32:%vreg28,%vreg29,%vreg27
	%vreg30<def> = S_ADD_I32 %vreg6<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg30,%vreg22 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg30, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31,%vreg30 SReg_128:%vreg12
	%vreg33<def> = COPY %vreg30; VGPR_32:%vreg33 SReg_32:%vreg30
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg33, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg33 SReg_128:%vreg12
	%vreg35<def> = COPY %vreg32; SReg_32:%vreg35 VGPR_32:%vreg32
	%vreg34<def> = S_ASHR_I32 %vreg35, %vreg27, %SCC<imp-def,dead>; SReg_32:%vreg34,%vreg35,%vreg27
	%vreg37<def> = COPY %vreg32; SReg_32:%vreg37 VGPR_32:%vreg32
	%vreg36<def> = S_ADD_I32 %vreg37, %vreg34, %SCC<imp-def,dead>; SReg_32:%vreg36,%vreg37,%vreg34
	%vreg38<def> = S_XOR_B32 %vreg36<kill>, %vreg34, %SCC<imp-def,dead>; SReg_32:%vreg38,%vreg36,%vreg34
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg38, %EXEC<imp-use>; VGPR_32:%vreg39 SReg_32:%vreg38
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg38, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42 SReg_32:%vreg38
	%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, %vreg44, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43 SReg_32:%vreg44
	%vreg47<def> = COPY %vreg42; SReg_32:%vreg47 VGPR_32:%vreg42
	%vreg46<def> = S_MUL_I32 %vreg47, %vreg38; SReg_32:%vreg46,%vreg47,%vreg38
	%vreg48<def> = S_SUB_I32 %vreg44, %vreg46, %SCC<imp-def,dead>; SReg_32:%vreg48,%vreg44,%vreg46
	%vreg50<def> = COPY %vreg46; VGPR_32:%vreg50 SReg_32:%vreg46
	%vreg51<def> = COPY %vreg48<kill>; VGPR_32:%vreg51 SReg_32:%vreg48
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg50, %vreg51, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg50,%vreg51 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg54<def> = COPY %vreg42; SReg_32:%vreg54 VGPR_32:%vreg42
	%vreg55<def> = COPY %vreg52; SReg_32:%vreg55 VGPR_32:%vreg52
	%vreg53<def> = S_ADD_I32 %vreg54, %vreg55, %SCC<imp-def,dead>; SReg_32:%vreg53,%vreg54,%vreg55
	%vreg57<def> = COPY %vreg42; SReg_32:%vreg57 VGPR_32:%vreg42
	%vreg58<def> = COPY %vreg52; SReg_32:%vreg58 VGPR_32:%vreg52
	%vreg56<def> = S_SUB_I32 %vreg57, %vreg58, %SCC<imp-def,dead>; SReg_32:%vreg56,%vreg57,%vreg58
	%vreg60<def> = COPY %vreg56<kill>; VGPR_32:%vreg60 SReg_32:%vreg56
	%vreg61<def> = COPY %vreg53<kill>; VGPR_32:%vreg61 SReg_32:%vreg53
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg60, %vreg61, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg60,%vreg61 SReg_64:%vreg45
	%vreg63<def> = COPY %vreg25; SReg_32:%vreg63 VGPR_32:%vreg25
	%vreg62<def> = S_ADD_I32 %vreg63, %vreg28, %SCC<imp-def,dead>; SReg_32:%vreg62,%vreg63,%vreg28
	%vreg64<def> = S_XOR_B32 %vreg62<kill>, %vreg28, %SCC<imp-def,dead>; SReg_32:%vreg64,%vreg62,%vreg28
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg64, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59 SReg_32:%vreg64
	%vreg67<def> = COPY %vreg65; SReg_32:%vreg67 VGPR_32:%vreg65
	%vreg66<def> = S_MUL_I32 %vreg67<kill>, %vreg38; SReg_32:%vreg66,%vreg67,%vreg38
	%vreg69<def> = COPY %vreg66; VGPR_32:%vreg69 SReg_32:%vreg66
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg64, %vreg69, %EXEC<imp-use>; SReg_64:%vreg68 SReg_32:%vreg64 VGPR_32:%vreg69
	%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
	%vreg72<def> = COPY %vreg44; VGPR_32:%vreg72 SReg_32:%vreg44
	%vreg71<def> = V_CNDMASK_B32_e64 %vreg72, %vreg70, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71,%vreg72,%vreg70 SReg_64:%vreg68
	%vreg73<def> = S_SUB_I32 %vreg64, %vreg66, %SCC<imp-def,dead>; SReg_32:%vreg73,%vreg64,%vreg66
	%vreg75<def> = COPY %vreg38; VGPR_32:%vreg75 SReg_32:%vreg38
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg73, %vreg75, %EXEC<imp-use>; SReg_64:%vreg74 SReg_32:%vreg73 VGPR_32:%vreg75
	%vreg77<def> = COPY %vreg44; VGPR_32:%vreg77 SReg_32:%vreg44
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg77, %vreg70, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg77,%vreg70 SReg_64:%vreg74
	%vreg79<def> = COPY %vreg76; SReg_32:%vreg79 VGPR_32:%vreg76
	%vreg80<def> = COPY %vreg71; SReg_32:%vreg80 VGPR_32:%vreg71
	%vreg78<def> = S_AND_B32 %vreg79<kill>, %vreg80, %SCC<imp-def,dead>; SReg_32:%vreg78,%vreg79,%vreg80
	%vreg82<def> = COPY %vreg44; VGPR_32:%vreg82 SReg_32:%vreg44
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg78<kill>, %vreg82, %EXEC<imp-use>; SReg_64:%vreg81 SReg_32:%vreg78 VGPR_32:%vreg82
	%vreg83<def> = S_SUB_I32 %vreg73, %vreg38, %SCC<imp-def,dead>; SReg_32:%vreg83,%vreg73,%vreg38
	%vreg85<def> = COPY %vreg83<kill>; VGPR_32:%vreg85 SReg_32:%vreg83
	%vreg86<def> = COPY %vreg73; VGPR_32:%vreg86 SReg_32:%vreg73
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg85, %vreg86, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg85,%vreg86 SReg_64:%vreg81
	%vreg87<def> = S_ADD_I32 %vreg73, %vreg38, %SCC<imp-def,dead>; SReg_32:%vreg87,%vreg73,%vreg38
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, %vreg44, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71 SReg_32:%vreg44
	%vreg90<def> = COPY %vreg87<kill>; VGPR_32:%vreg90 SReg_32:%vreg87
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg90, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg90 SReg_64:%vreg88
	%vreg92<def> = COPY %vreg89; SReg_32:%vreg92 VGPR_32:%vreg89
	%vreg91<def> = S_XOR_B32 %vreg92<kill>, %vreg28, %SCC<imp-def,dead>; SReg_32:%vreg91,%vreg92,%vreg28
	%vreg93<def> = S_SUB_I32 %vreg91<kill>, %vreg28, %SCC<imp-def,dead>; SReg_32:%vreg93,%vreg91,%vreg28
	%vreg94<def> = S_ADD_I32 %vreg7<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg94,%vreg22 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg94, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95,%vreg94 SReg_128:%vreg10
	%vreg96<def> = COPY %vreg93; VGPR_32:%vreg96 SReg_32:%vreg93
	%vreg97<def> = COPY %vreg94; VGPR_32:%vreg97 SReg_32:%vreg94
	TBUFFER_STORE_FORMAT_X %vreg96<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg97, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg96,%vreg97 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After SI Lower i1 Copies ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, %vreg16<kill>, %SCC<imp-def,dead>; SReg_32:%vreg17,%vreg16 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg20<def> = COPY %vreg3; SReg_32:%vreg20 VGPR_32:%vreg3
	%vreg19<def> = S_ADD_I32 %vreg20, %vreg18<kill>, %SCC<imp-def,dead>; SReg_32:%vreg19,%vreg20,%vreg18
	%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
	%vreg22<def> = S_LSHL_B32 %vreg19<kill>, %vreg21<kill>, %SCC<imp-def,dead>; SReg_32:%vreg22,%vreg19,%vreg21
	%vreg23<def> = S_ADD_I32 %vreg5<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg23,%vreg22 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg23, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24,%vreg23 SReg_128:%vreg14
	%vreg26<def> = COPY %vreg23; VGPR_32:%vreg26 SReg_32:%vreg23
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg26, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg26 SReg_128:%vreg14
	%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
	%vreg29<def> = COPY %vreg25; SReg_32:%vreg29 VGPR_32:%vreg25
	%vreg28<def> = S_ASHR_I32 %vreg29, %vreg27, %SCC<imp-def,dead>; SReg_32:%vreg28,%vreg29,%vreg27
	%vreg30<def> = S_ADD_I32 %vreg6<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg30,%vreg22 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg30, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31,%vreg30 SReg_128:%vreg12
	%vreg33<def> = COPY %vreg30; VGPR_32:%vreg33 SReg_32:%vreg30
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg33, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg33 SReg_128:%vreg12
	%vreg35<def> = COPY %vreg32; SReg_32:%vreg35 VGPR_32:%vreg32
	%vreg34<def> = S_ASHR_I32 %vreg35, %vreg27, %SCC<imp-def,dead>; SReg_32:%vreg34,%vreg35,%vreg27
	%vreg37<def> = COPY %vreg32; SReg_32:%vreg37 VGPR_32:%vreg32
	%vreg36<def> = S_ADD_I32 %vreg37, %vreg34, %SCC<imp-def,dead>; SReg_32:%vreg36,%vreg37,%vreg34
	%vreg38<def> = S_XOR_B32 %vreg36<kill>, %vreg34, %SCC<imp-def,dead>; SReg_32:%vreg38,%vreg36,%vreg34
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg38, %EXEC<imp-use>; VGPR_32:%vreg39 SReg_32:%vreg38
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg38, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42 SReg_32:%vreg38
	%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, %vreg44, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43 SReg_32:%vreg44
	%vreg47<def> = COPY %vreg42; SReg_32:%vreg47 VGPR_32:%vreg42
	%vreg46<def> = S_MUL_I32 %vreg47, %vreg38; SReg_32:%vreg46,%vreg47,%vreg38
	%vreg48<def> = S_SUB_I32 %vreg44, %vreg46, %SCC<imp-def,dead>; SReg_32:%vreg48,%vreg44,%vreg46
	%vreg50<def> = COPY %vreg46; VGPR_32:%vreg50 SReg_32:%vreg46
	%vreg51<def> = COPY %vreg48<kill>; VGPR_32:%vreg51 SReg_32:%vreg48
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg50, %vreg51, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg50,%vreg51 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg54<def> = COPY %vreg42; SReg_32:%vreg54 VGPR_32:%vreg42
	%vreg55<def> = COPY %vreg52; SReg_32:%vreg55 VGPR_32:%vreg52
	%vreg53<def> = S_ADD_I32 %vreg54, %vreg55, %SCC<imp-def,dead>; SReg_32:%vreg53,%vreg54,%vreg55
	%vreg57<def> = COPY %vreg42; SReg_32:%vreg57 VGPR_32:%vreg42
	%vreg58<def> = COPY %vreg52; SReg_32:%vreg58 VGPR_32:%vreg52
	%vreg56<def> = S_SUB_I32 %vreg57, %vreg58, %SCC<imp-def,dead>; SReg_32:%vreg56,%vreg57,%vreg58
	%vreg60<def> = COPY %vreg56<kill>; VGPR_32:%vreg60 SReg_32:%vreg56
	%vreg61<def> = COPY %vreg53<kill>; VGPR_32:%vreg61 SReg_32:%vreg53
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg60, %vreg61, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg60,%vreg61 SReg_64:%vreg45
	%vreg63<def> = COPY %vreg25; SReg_32:%vreg63 VGPR_32:%vreg25
	%vreg62<def> = S_ADD_I32 %vreg63, %vreg28, %SCC<imp-def,dead>; SReg_32:%vreg62,%vreg63,%vreg28
	%vreg64<def> = S_XOR_B32 %vreg62<kill>, %vreg28, %SCC<imp-def,dead>; SReg_32:%vreg64,%vreg62,%vreg28
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg64, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59 SReg_32:%vreg64
	%vreg67<def> = COPY %vreg65; SReg_32:%vreg67 VGPR_32:%vreg65
	%vreg66<def> = S_MUL_I32 %vreg67<kill>, %vreg38; SReg_32:%vreg66,%vreg67,%vreg38
	%vreg69<def> = COPY %vreg66; VGPR_32:%vreg69 SReg_32:%vreg66
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg64, %vreg69, %EXEC<imp-use>; SReg_64:%vreg68 SReg_32:%vreg64 VGPR_32:%vreg69
	%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
	%vreg72<def> = COPY %vreg44; VGPR_32:%vreg72 SReg_32:%vreg44
	%vreg71<def> = V_CNDMASK_B32_e64 %vreg72, %vreg70, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71,%vreg72,%vreg70 SReg_64:%vreg68
	%vreg73<def> = S_SUB_I32 %vreg64, %vreg66, %SCC<imp-def,dead>; SReg_32:%vreg73,%vreg64,%vreg66
	%vreg75<def> = COPY %vreg38; VGPR_32:%vreg75 SReg_32:%vreg38
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg73, %vreg75, %EXEC<imp-use>; SReg_64:%vreg74 SReg_32:%vreg73 VGPR_32:%vreg75
	%vreg77<def> = COPY %vreg44; VGPR_32:%vreg77 SReg_32:%vreg44
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg77, %vreg70, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg77,%vreg70 SReg_64:%vreg74
	%vreg79<def> = COPY %vreg76; SReg_32:%vreg79 VGPR_32:%vreg76
	%vreg80<def> = COPY %vreg71; SReg_32:%vreg80 VGPR_32:%vreg71
	%vreg78<def> = S_AND_B32 %vreg79<kill>, %vreg80, %SCC<imp-def,dead>; SReg_32:%vreg78,%vreg79,%vreg80
	%vreg82<def> = COPY %vreg44; VGPR_32:%vreg82 SReg_32:%vreg44
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg78<kill>, %vreg82, %EXEC<imp-use>; SReg_64:%vreg81 SReg_32:%vreg78 VGPR_32:%vreg82
	%vreg83<def> = S_SUB_I32 %vreg73, %vreg38, %SCC<imp-def,dead>; SReg_32:%vreg83,%vreg73,%vreg38
	%vreg85<def> = COPY %vreg83<kill>; VGPR_32:%vreg85 SReg_32:%vreg83
	%vreg86<def> = COPY %vreg73; VGPR_32:%vreg86 SReg_32:%vreg73
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg85, %vreg86, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg85,%vreg86 SReg_64:%vreg81
	%vreg87<def> = S_ADD_I32 %vreg73, %vreg38, %SCC<imp-def,dead>; SReg_32:%vreg87,%vreg73,%vreg38
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, %vreg44, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71 SReg_32:%vreg44
	%vreg90<def> = COPY %vreg87<kill>; VGPR_32:%vreg90 SReg_32:%vreg87
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg90, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg90 SReg_64:%vreg88
	%vreg92<def> = COPY %vreg89; SReg_32:%vreg92 VGPR_32:%vreg89
	%vreg91<def> = S_XOR_B32 %vreg92<kill>, %vreg28, %SCC<imp-def,dead>; SReg_32:%vreg91,%vreg92,%vreg28
	%vreg93<def> = S_SUB_I32 %vreg91<kill>, %vreg28, %SCC<imp-def,dead>; SReg_32:%vreg93,%vreg91,%vreg28
	%vreg94<def> = S_ADD_I32 %vreg7<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg94,%vreg22 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg94, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95,%vreg94 SReg_128:%vreg10
	%vreg96<def> = COPY %vreg93; VGPR_32:%vreg96 SReg_32:%vreg93
	%vreg97<def> = COPY %vreg94; VGPR_32:%vreg97 SReg_32:%vreg94
	TBUFFER_STORE_FORMAT_X %vreg96<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg97, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg96,%vreg97 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

Fixing VGPR -> SGPR copy: %vreg20<def> = COPY %vreg3; SReg_32:%vreg20 VGPR_32:%vreg3
Fixing VGPR -> SGPR copy: %vreg29<def> = COPY %vreg25; SReg_32:%vreg29 VGPR_32:%vreg25
Fixing VGPR -> SGPR copy: %vreg35<def> = COPY %vreg32; SReg_32:%vreg35 VGPR_32:%vreg32
Fixing VGPR -> SGPR copy: %vreg37<def> = COPY %vreg32; SReg_32:%vreg37 VGPR_32:%vreg32
Fixing VGPR -> SGPR copy: %vreg47<def> = COPY %vreg42; SReg_32:%vreg47 VGPR_32:%vreg42
Fixing VGPR -> SGPR copy: %vreg54<def> = COPY %vreg42; SReg_32:%vreg54 VGPR_32:%vreg42
Fixing VGPR -> SGPR copy: %vreg55<def> = COPY %vreg52; SReg_32:%vreg55 VGPR_32:%vreg52
Fixing VGPR -> SGPR copy: %vreg57<def> = COPY %vreg42; SReg_32:%vreg57 VGPR_32:%vreg42
Fixing VGPR -> SGPR copy: %vreg58<def> = COPY %vreg52; SReg_32:%vreg58 VGPR_32:%vreg52
Fixing VGPR -> SGPR copy: %vreg63<def> = COPY %vreg25; SReg_32:%vreg63 VGPR_32:%vreg25
Fixing VGPR -> SGPR copy: %vreg67<def> = COPY %vreg65; SReg_32:%vreg67 VGPR_32:%vreg65
Fixing VGPR -> SGPR copy: %vreg79<def> = COPY %vreg76; SReg_32:%vreg79 VGPR_32:%vreg76
Fixing VGPR -> SGPR copy: %vreg80<def> = COPY %vreg71; SReg_32:%vreg80 VGPR_32:%vreg71
Fixing VGPR -> SGPR copy: %vreg92<def> = COPY %vreg89; SReg_32:%vreg92 VGPR_32:%vreg89
Folded source from %vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
 into OpNo 2 of %vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15

Folded source from %vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
 into OpNo 2 of %vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18

Folded source from %vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
 into OpNo 1 of %vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99

Folded source from %vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
 into OpNo 8 of %vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14

Folded source from %vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
 into OpNo 1 of %vreg105<def> = V_ASHRREV_I32_e32 31, %vreg104, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg104

Folded source from %vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
 into OpNo 1 of %vreg114<def> = V_ASHRREV_I32_e32 31, %vreg113, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg113

Folded source from %vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
 into OpNo 2 of %vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25

Folded source from %vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
 into OpNo 8 of %vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12

Folded source from %vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
 into OpNo 2 of %vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32

Folded source from %vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
 into OpNo 1 of %vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114

Folded source from %vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
 into OpNo 2 of %vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43

Folded source from %vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
 into OpNo 1 of %vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117

Folded source from %vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
 into OpNo 1 of %vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72

Folded source from %vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
 into OpNo 1 of %vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77

Folded source from %vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
 into OpNo 1 of %vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82

Folded source from %vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
 into OpNo 2 of %vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71

Folded source from %vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
 into OpNo 1 of %vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115

Folded source from %vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
 into OpNo 1 of %vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg51, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg51 SReg_64:%vreg45

Folded source from %vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
 into OpNo 2 of %vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45

Folded source from %vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
 into OpNo 2 of %vreg123<def> = V_ADD_I32_e32 %vreg124, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg124,%vreg42

Folded source from %vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
 into OpNo 1 of %vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42

Folded source from %vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
 into OpNo 2 of %vreg126<def> = V_SUBREV_I32_e32 %vreg127, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg127,%vreg42

Folded source from %vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
 into OpNo 1 of %vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42

Folded source from %vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
 into OpNo 1 of %vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg61, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg61 SReg_64:%vreg45

Folded source from %vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
 into OpNo 2 of %vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45

Folded source from %vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
 into OpNo 1 of %vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105

Folded source from %vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
 into OpNo 1 of %vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115

Folded source from %vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
 into OpNo 2 of %vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116

Folded source from %vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
 into OpNo 2 of %vreg71<def> = V_CNDMASK_B32_e64 %vreg72, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71,%vreg72 SReg_64:%vreg68

Folded source from %vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
 into OpNo 2 of %vreg76<def> = V_CNDMASK_B32_e64 %vreg77, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg77 SReg_64:%vreg74

Folded source from %vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
 into OpNo 1 of %vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68

Folded source from %vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
 into OpNo 2 of %vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115

Folded source from %vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
 into OpNo 1 of %vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74

Folded source from %vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
 into OpNo 2 of %vreg131<def> = V_AND_B32_e32 %vreg132, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg132,%vreg76

Folded source from %vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
 into OpNo 1 of %vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76

Folded source from %vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
 into OpNo 2 of %vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131

Folded source from %vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
 into OpNo 1 of %vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg86, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg86 SReg_64:%vreg81

Folded source from %vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
 into OpNo 2 of %vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81

Folded source from %vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
 into OpNo 2 of %vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88

Folded source from %vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
 into OpNo 1 of %vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105

Folded source from %vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
 into OpNo 0 of TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg97, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg97 SReg_128:%vreg10

Folded source from %vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
 into OpNo 8 of TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10

# *** IR Dump After SI Fold Operands ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
	%vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
	%vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
	%vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
	%vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
	%vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
	%vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
	%vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
	%vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	%vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
	%vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
	%vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
	%vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
	%vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
	%vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
	%vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
	%vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
	%vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
	%vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	%vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
	%vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Tail Duplication ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
	%vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
	%vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
	%vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
	%vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
	%vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
	%vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
	%vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
	%vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	%vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
	%vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
	%vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
	%vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
	%vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
	%vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
	%vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
	%vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
	%vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
	%vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	%vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
	%vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
144B		%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
160B		%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
176B		%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
192B		%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
208B		%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
224B		%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
240B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
256B		%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
272B		%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
288B		%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
304B		%vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
320B		%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
336B		%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
352B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
368B		%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
384B		%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
400B		%vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
416B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
432B		%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
448B		%vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
464B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
480B		%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
496B		%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
512B		%vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
528B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
544B		%vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
560B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
576B		%vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
592B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
608B		%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
624B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
640B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
656B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
672B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
688B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
704B		%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
720B		%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
736B		%vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
752B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
768B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
784B		%vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
800B		%vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
816B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
832B		%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
848B		%vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
864B		%vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
880B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
896B		%vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
912B		%vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
928B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
944B		%vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
960B		%vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
976B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
992B		%vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
1008B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
1024B		%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
1040B		%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
1056B		%vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
1072B		%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
1088B		%vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
1104B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
1120B		%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
1136B		%vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
1152B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
1168B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
1184B		%vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
1200B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
1216B		%vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
1232B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
1248B		%vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
1264B		%vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
1280B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
1296B		%vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
1312B		%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
1328B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
1344B		%vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
1360B		%vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
1376B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
1392B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
1408B		%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
1424B		%vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
1440B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
1456B		%vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
1472B		%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
1488B		%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
1504B		%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
1520B		%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
1536B		%vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
1552B		%vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
1568B		TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
1584B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Slot index numbering ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
144B		%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
160B		%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
176B		%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
192B		%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
208B		%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
224B		%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
240B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
256B		%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
272B		%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
288B		%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
304B		%vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
320B		%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
336B		%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
352B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
368B		%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
384B		%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
400B		%vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
416B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
432B		%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
448B		%vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
464B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
480B		%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
496B		%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
512B		%vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
528B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
544B		%vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
560B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
576B		%vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
592B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
608B		%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
624B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
640B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
656B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
672B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
688B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
704B		%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
720B		%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
736B		%vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
752B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
768B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
784B		%vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
800B		%vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
816B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
832B		%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
848B		%vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
864B		%vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
880B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
896B		%vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
912B		%vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
928B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
944B		%vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
960B		%vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
976B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
992B		%vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
1008B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
1024B		%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
1040B		%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
1056B		%vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
1072B		%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
1088B		%vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
1104B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
1120B		%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
1136B		%vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
1152B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
1168B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
1184B		%vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
1200B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
1216B		%vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
1232B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
1248B		%vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
1264B		%vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
1280B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
1296B		%vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
1312B		%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
1328B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
1344B		%vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
1360B		%vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
1376B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
1392B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
1408B		%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
1424B		%vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
1440B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
1456B		%vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
1472B		%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
1488B		%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
1504B		%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
1520B		%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
1536B		%vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
1552B		%vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
1568B		TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
1584B		S_ENDPGM

# End machine code for function remainder_intint.

********** Stack Coloring **********
********** Function: remainder_intint
# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
	%vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
	%vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
	%vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
	%vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
	%vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
	%vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
	%vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
	%vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	%vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
	%vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
	%vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
	%vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
	%vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
	%vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
	%vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
	%vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
	%vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
	%vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	%vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
	%vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

DeadMachineInstructionElim: DELETING: %vreg97<def> = COPY %vreg101; VGPR_32:%vreg97,%vreg101
DeadMachineInstructionElim: DELETING: %vreg96<def> = COPY %vreg106; VGPR_32:%vreg96,%vreg106
DeadMachineInstructionElim: DELETING: %vreg133<def> = COPY %vreg89; VGPR_32:%vreg133,%vreg89
DeadMachineInstructionElim: DELETING: %vreg90<def> = COPY %vreg110; VGPR_32:%vreg90,%vreg110
DeadMachineInstructionElim: DELETING: %vreg86<def> = COPY %vreg109; VGPR_32:%vreg86,%vreg109
DeadMachineInstructionElim: DELETING: %vreg85<def> = COPY %vreg111; VGPR_32:%vreg85,%vreg111
DeadMachineInstructionElim: DELETING: %vreg82<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg82
DeadMachineInstructionElim: DELETING: %vreg132<def> = COPY %vreg71; VGPR_32:%vreg132,%vreg71
DeadMachineInstructionElim: DELETING: %vreg130<def> = COPY %vreg76; VGPR_32:%vreg130,%vreg76
DeadMachineInstructionElim: DELETING: %vreg77<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg77
DeadMachineInstructionElim: DELETING: %vreg75<def> = COPY %vreg115; VGPR_32:%vreg75,%vreg115
DeadMachineInstructionElim: DELETING: %vreg72<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg72
DeadMachineInstructionElim: DELETING: %vreg70<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg70
DeadMachineInstructionElim: DELETING: %vreg69<def> = COPY %vreg116; VGPR_32:%vreg69,%vreg116
DeadMachineInstructionElim: DELETING: %vreg129<def> = COPY %vreg65; VGPR_32:%vreg129,%vreg65
DeadMachineInstructionElim: DELETING: %vreg128<def> = COPY %vreg25; VGPR_32:%vreg128,%vreg25
DeadMachineInstructionElim: DELETING: %vreg61<def> = COPY %vreg123; VGPR_32:%vreg61,%vreg123
DeadMachineInstructionElim: DELETING: %vreg60<def> = COPY %vreg126; VGPR_32:%vreg60,%vreg126
DeadMachineInstructionElim: DELETING: %vreg127<def> = COPY %vreg52; VGPR_32:%vreg127,%vreg52
DeadMachineInstructionElim: DELETING: %vreg125<def> = COPY %vreg42; VGPR_32:%vreg125,%vreg42
DeadMachineInstructionElim: DELETING: %vreg124<def> = COPY %vreg52; VGPR_32:%vreg124,%vreg52
DeadMachineInstructionElim: DELETING: %vreg122<def> = COPY %vreg42; VGPR_32:%vreg122,%vreg42
DeadMachineInstructionElim: DELETING: %vreg51<def> = COPY %vreg118; VGPR_32:%vreg51,%vreg118
DeadMachineInstructionElim: DELETING: %vreg50<def> = COPY %vreg117; VGPR_32:%vreg50,%vreg117
DeadMachineInstructionElim: DELETING: %vreg121<def> = COPY %vreg42; VGPR_32:%vreg121,%vreg42
DeadMachineInstructionElim: DELETING: %vreg44<def> = S_MOV_B32 0; SReg_32:%vreg44
DeadMachineInstructionElim: DELETING: %vreg120<def> = COPY %vreg32; VGPR_32:%vreg120,%vreg32
DeadMachineInstructionElim: DELETING: %vreg113<def> = COPY %vreg32; VGPR_32:%vreg113,%vreg32
DeadMachineInstructionElim: DELETING: %vreg33<def> = COPY %vreg102; VGPR_32:%vreg33,%vreg102
DeadMachineInstructionElim: DELETING: %vreg104<def> = COPY %vreg25; VGPR_32:%vreg104,%vreg25
DeadMachineInstructionElim: DELETING: %vreg27<def> = S_MOV_B32 31; SReg_32:%vreg27
DeadMachineInstructionElim: DELETING: %vreg26<def> = COPY %vreg103; VGPR_32:%vreg26,%vreg103
DeadMachineInstructionElim: DELETING: %vreg21<def> = S_MOV_B32 2; SReg_32:%vreg21
DeadMachineInstructionElim: DELETING: %vreg98<def> = COPY %vreg3; VGPR_32:%vreg98,%vreg3
DeadMachineInstructionElim: DELETING: %vreg16<def> = S_MOV_B32 65535; SReg_32:%vreg16
# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

******** Pre-regalloc Machine LICM: remainder_intint ********
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 %vreg43<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 %vreg131<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 %vreg71, 0, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

Entering: entry
Exiting: entry
# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.


block-frequency: remainder_intint
=================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: remainder_intint
 - BB0[entry]: float = 1.0, int = 8

******** Machine Sinking ********
# *** IR Dump After Machine code sinking ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

********** PEEPHOLE OPTIMIZER **********
********** Function: remainder_intint
# *** IR Dump After Peephole Optimizations ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg8<def> = V_MOV_B32_e32 96, %EXEC<imp-use>; VGPR_32:%vreg8
	%vreg9<def> = V_MOV_B32_e32 1, %EXEC<imp-use>; VGPR_32:%vreg9
	%vreg10<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg8<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg10 VGPR_32:%vreg9,%vreg8
	%vreg11<def> = V_MOV_B32_e32 88, %EXEC<imp-use>; VGPR_32:%vreg11
	%vreg12<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg11<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg12 VGPR_32:%vreg9,%vreg11
	%vreg13<def> = V_MOV_B32_e32 80, %EXEC<imp-use>; VGPR_32:%vreg13
	%vreg14<def> = SI_M2S_GET_UAV_DESC %vreg9, %vreg13<kill>, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_128:%vreg14 VGPR_32:%vreg9,%vreg13
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg24<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg103, %vreg14, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg24 VGPR_32:%vreg103 SReg_128:%vreg14
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg31<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg102, %vreg12, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg31 VGPR_32:%vreg102 SReg_128:%vreg12
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	%vreg95<def> = SI_M2S_PAC_UAV_DESC_I32_GLOBAL %vreg101, %vreg10, %EXEC<imp-def,dead>, %EXEC<imp-use>; SReg_32:%vreg95 VGPR_32:%vreg101 SReg_128:%vreg10
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
	%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
	%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
	%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg134<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg134
	%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
	%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
	%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134<kill>, 80; SReg_128:%vreg14 SReg_64:%vreg134
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4<kill>; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103<kill>, %vreg14<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102<kill>, %vreg12<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32<kill>, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114<kill>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43<kill>, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117<kill>, %vreg118<kill>, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52<kill>, %vreg42<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126<kill>, %vreg123<kill>, %vreg45<kill>, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116<kill>, %vreg108<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131<kill>, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111<kill>, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115<kill>, %vreg109<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71<kill>, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110<kill>, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101<kill>, %vreg10<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134<kill>, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4<kill>; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103<kill>, %vreg14<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102<kill>, %vreg12<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32<kill>, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114<kill>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43<kill>, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117<kill>, %vreg118<kill>, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52<kill>, %vreg42<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126<kill>, %vreg123<kill>, %vreg45<kill>, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116<kill>, %vreg108<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131<kill>, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111<kill>, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115<kill>, %vreg109<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71<kill>, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110<kill>, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101<kill>, %vreg10<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Slot index numbering ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134<kill>, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4<kill>; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103<kill>, %vreg14<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102<kill>, %vreg12<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32<kill>, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114<kill>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43<kill>, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117<kill>, %vreg118<kill>, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52<kill>, %vreg42<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126<kill>, %vreg123<kill>, %vreg45<kill>, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116<kill>, %vreg108<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131<kill>, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111<kill>, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115<kill>, %vreg109<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71<kill>, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110<kill>, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101<kill>, %vreg10<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

Computing live-in reg-units in ABI blocks.
0B	BB#0 SGPR4#0 SGPR5#0 SGPR6#0 SGPR7#0 SGPR8#0 SGPR9#0 SGPR10#0 SGPR11#0 VGPR0#0 SGPR12#0 SGPR2#0 SGPR3#0 SGPR2#0 SGPR3#0 SGPR2#0 SGPR3#0
Created 12 new intervals.
********** INTERVALS **********
SGPR2 [0B,128r:0)  0@0B-phi
SGPR3 [0B,128r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg1 [64r,192r:0)  0@64r
%vreg2 [48r,112r:0)  0@48r
%vreg3 [32r,240r:0)  0@32r
%vreg4 [16r,224r:0)  0@16r
%vreg5 [80r,272r:0)  0@80r
%vreg6 [96r,320r:0)  0@96r
%vreg7 [112r,896r:0)  0@112r
%vreg10 [144r,912r:0)  0@144r
%vreg12 [160r,336r:0)  0@160r
%vreg14 [176r,288r:0)  0@176r
%vreg15 [192r,208r:0)  0@192r
%vreg17 [208r,224r:0)  0@208r
%vreg18 [224r,240r:0)  0@224r
%vreg25 [288r,608r:0)  0@288r
%vreg32 [336r,368r:0)  0@336r
%vreg39 [400r,416r:0)  0@400r
%vreg40 [416r,432r:0)  0@416r
%vreg41 [432r,448r:0)  0@432r
%vreg42 [448r,576r:0)  0@448r
%vreg43 [464r,480r:0)  0@464r
%vreg45 [480r,592r:0)  0@480r
%vreg49 [528r,544r:0)  0@528r
%vreg52 [544r,576r:0)  0@544r
%vreg59 [592r,640r:0)  0@592r
%vreg65 [640r,656r:0)  0@640r
%vreg68 [672r,688r:0)  0@672r
%vreg71 [688r,832r:0)  0@688r
%vreg74 [720r,736r:0)  0@720r
%vreg76 [736r,752r:0)  0@736r
%vreg81 [768r,800r:0)  0@768r
%vreg84 [800r,848r:0)  0@800r
%vreg88 [832r,848r:0)  0@832r
%vreg89 [848r,864r:0)  0@848r
%vreg99 [240r,256r:0)  0@240r
%vreg100 [256r,896r:0)  0@256r
%vreg101 [896r,912r:0)  0@896r
%vreg102 [320r,336r:0)  0@320r
%vreg103 [272r,288r:0)  0@272r
%vreg105 [304r,880r:0)  0@304r
%vreg106 [880r,912r:0)  0@880r
%vreg107 [864r,880r:0)  0@864r
%vreg108 [624r,704r:0)  0@624r
%vreg109 [704r,816r:0)  0@704r
%vreg110 [816r,848r:0)  0@816r
%vreg111 [784r,800r:0)  0@784r
%vreg112 [608r,624r:0)  0@608r
%vreg114 [352r,384r:0)  0@352r
%vreg115 [384r,816r:0)  0@384r
%vreg116 [656r,704r:0)  0@656r
%vreg117 [496r,528r:0)  0@496r
%vreg118 [512r,528r:0)  0@512r
%vreg119 [368r,384r:0)  0@368r
%vreg123 [560r,592r:0)  0@560r
%vreg126 [576r,592r:0)  0@576r
%vreg131 [752r,768r:0)  0@752r
%vreg134 [128r,176r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After SI Fix SGPR live ranges ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
	%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
	%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
	%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

********** PROCESS IMPLICIT DEFS **********
********** Function: remainder_intint
# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
	%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
	%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
	%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
	%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
	%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
	%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg134<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg134
	%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
	%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
	%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134<kill>, 80; SReg_128:%vreg14 SReg_64:%vreg134
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4<kill>; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103<kill>, %vreg14<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102<kill>, %vreg12<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32<kill>, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114<kill>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43<kill>, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117<kill>, %vreg118<kill>, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52<kill>, %vreg42<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126<kill>, %vreg123<kill>, %vreg45<kill>, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116<kill>, %vreg108<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131<kill>, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111<kill>, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115<kill>, %vreg109<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71<kill>, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110<kill>, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101<kill>, %vreg10<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg134<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg134
	%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
	%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
	%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134<kill>, 80; SReg_128:%vreg14 SReg_64:%vreg134
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4<kill>; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103<kill>, %vreg14<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102<kill>, %vreg12<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32<kill>, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114<kill>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43<kill>, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117<kill>, %vreg118<kill>, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52<kill>, %vreg42<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126<kill>, %vreg123<kill>, %vreg45<kill>, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116<kill>, %vreg108<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131<kill>, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111<kill>, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115<kill>, %vreg109<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71<kill>, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110<kill>, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101<kill>, %vreg10<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

********** REWRITING TWO-ADDR INSTRS **********
********** Function: remainder_intint
# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg134<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg134
	%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
	%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
	%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134<kill>, 80; SReg_128:%vreg14 SReg_64:%vreg134
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4<kill>; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103<kill>, %vreg14<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102<kill>, %vreg12<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32<kill>, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114<kill>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43<kill>, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117<kill>, %vreg118<kill>, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52<kill>, %vreg42<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126<kill>, %vreg123<kill>, %vreg45<kill>, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116<kill>, %vreg108<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131<kill>, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111<kill>, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115<kill>, %vreg109<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71<kill>, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110<kill>, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101<kill>, %vreg10<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134<kill>, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4<kill>; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103<kill>, %vreg14<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102<kill>, %vreg12<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32<kill>, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114<kill>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43<kill>, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117<kill>, %vreg118<kill>, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52<kill>, %vreg42<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126<kill>, %vreg123<kill>, %vreg45<kill>, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116<kill>, %vreg108<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131<kill>, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111<kill>, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115<kill>, %vreg109<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71<kill>, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110<kill>, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101<kill>, %vreg10<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Slot index numbering ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12<kill>; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0<kill>; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11<kill>; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7<kill>; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3<kill>; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134<kill>, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4<kill>; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103<kill>, %vreg14<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102<kill>, %vreg12<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32<kill>, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114<kill>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43<kill>, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117<kill>, %vreg118<kill>, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52<kill>, %vreg42<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126<kill>, %vreg123<kill>, %vreg45<kill>, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116<kill>, %vreg108<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131<kill>, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111<kill>, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115<kill>, %vreg109<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71<kill>, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110<kill>, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101<kill>, %vreg10<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

Computing live-in reg-units in ABI blocks.
0B	BB#0 SGPR4#0 SGPR5#0 SGPR6#0 SGPR7#0 SGPR8#0 SGPR9#0 SGPR10#0 SGPR11#0 VGPR0#0 SGPR12#0 SGPR2#0 SGPR3#0 SGPR2#0 SGPR3#0 SGPR2#0 SGPR3#0
Created 12 new intervals.
********** INTERVALS **********
SGPR2 [0B,128r:0)  0@0B-phi
SGPR3 [0B,128r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg1 [64r,192r:0)  0@64r
%vreg2 [48r,112r:0)  0@48r
%vreg3 [32r,240r:0)  0@32r
%vreg4 [16r,224r:0)  0@16r
%vreg5 [80r,272r:0)  0@80r
%vreg6 [96r,320r:0)  0@96r
%vreg7 [112r,896r:0)  0@112r
%vreg10 [144r,912r:0)  0@144r
%vreg12 [160r,336r:0)  0@160r
%vreg14 [176r,288r:0)  0@176r
%vreg15 [192r,208r:0)  0@192r
%vreg17 [208r,224r:0)  0@208r
%vreg18 [224r,240r:0)  0@224r
%vreg25 [288r,608r:0)  0@288r
%vreg32 [336r,368r:0)  0@336r
%vreg39 [400r,416r:0)  0@400r
%vreg40 [416r,432r:0)  0@416r
%vreg41 [432r,448r:0)  0@432r
%vreg42 [448r,576r:0)  0@448r
%vreg43 [464r,480r:0)  0@464r
%vreg45 [480r,592r:0)  0@480r
%vreg49 [528r,544r:0)  0@528r
%vreg52 [544r,576r:0)  0@544r
%vreg59 [592r,640r:0)  0@592r
%vreg65 [640r,656r:0)  0@640r
%vreg68 [672r,688r:0)  0@672r
%vreg71 [688r,832r:0)  0@688r
%vreg74 [720r,736r:0)  0@720r
%vreg76 [736r,752r:0)  0@736r
%vreg81 [768r,800r:0)  0@768r
%vreg84 [800r,848r:0)  0@800r
%vreg88 [832r,848r:0)  0@832r
%vreg89 [848r,864r:0)  0@848r
%vreg99 [240r,256r:0)  0@240r
%vreg100 [256r,896r:0)  0@256r
%vreg101 [896r,912r:0)  0@896r
%vreg102 [320r,336r:0)  0@320r
%vreg103 [272r,288r:0)  0@272r
%vreg105 [304r,880r:0)  0@304r
%vreg106 [880r,912r:0)  0@880r
%vreg107 [864r,880r:0)  0@864r
%vreg108 [624r,704r:0)  0@624r
%vreg109 [704r,816r:0)  0@704r
%vreg110 [816r,848r:0)  0@816r
%vreg111 [784r,800r:0)  0@784r
%vreg112 [608r,624r:0)  0@608r
%vreg114 [352r,384r:0)  0@352r
%vreg115 [384r,816r:0)  0@384r
%vreg116 [656r,704r:0)  0@656r
%vreg117 [496r,528r:0)  0@496r
%vreg118 [512r,528r:0)  0@512r
%vreg119 [368r,384r:0)  0@368r
%vreg123 [560r,592r:0)  0@560r
%vreg126 [576r,592r:0)  0@576r
%vreg131 [752r,768r:0)  0@752r
%vreg134 [128r,176r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

********** SIMPLE REGISTER COALESCING **********
********** Function: remainder_intint
********** JOINING INTERVALS ***********
entry:
16B	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	Considering merging %vreg4 with %SGPR12
	Can only merge into reserved registers.
32B	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	Considering merging %vreg3 with %VGPR0
	Can only merge into reserved registers.
48B	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	Considering merging %vreg2 with %SGPR8_SGPR9_SGPR10_SGPR11
	Can only merge into reserved registers.
64B	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	Considering merging %vreg1 with %SGPR4_SGPR5_SGPR6_SGPR7
	Can only merge into reserved registers.
128B	%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
	Considering merging %vreg134 with %SGPR2_SGPR3
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
SGPR2 [0B,128r:0)  0@0B-phi
SGPR3 [0B,128r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg1 [64r,192r:0)  0@64r
%vreg2 [48r,112r:0)  0@48r
%vreg3 [32r,240r:0)  0@32r
%vreg4 [16r,224r:0)  0@16r
%vreg5 [80r,272r:0)  0@80r
%vreg6 [96r,320r:0)  0@96r
%vreg7 [112r,896r:0)  0@112r
%vreg10 [144r,912r:0)  0@144r
%vreg12 [160r,336r:0)  0@160r
%vreg14 [176r,288r:0)  0@176r
%vreg15 [192r,208r:0)  0@192r
%vreg17 [208r,224r:0)  0@208r
%vreg18 [224r,240r:0)  0@224r
%vreg25 [288r,608r:0)  0@288r
%vreg32 [336r,368r:0)  0@336r
%vreg39 [400r,416r:0)  0@400r
%vreg40 [416r,432r:0)  0@416r
%vreg41 [432r,448r:0)  0@432r
%vreg42 [448r,576r:0)  0@448r
%vreg43 [464r,480r:0)  0@464r
%vreg45 [480r,592r:0)  0@480r
%vreg49 [528r,544r:0)  0@528r
%vreg52 [544r,576r:0)  0@544r
%vreg59 [592r,640r:0)  0@592r
%vreg65 [640r,656r:0)  0@640r
%vreg68 [672r,688r:0)  0@672r
%vreg71 [688r,832r:0)  0@688r
%vreg74 [720r,736r:0)  0@720r
%vreg76 [736r,752r:0)  0@736r
%vreg81 [768r,800r:0)  0@768r
%vreg84 [800r,848r:0)  0@800r
%vreg88 [832r,848r:0)  0@832r
%vreg89 [848r,864r:0)  0@848r
%vreg99 [240r,256r:0)  0@240r
%vreg100 [256r,896r:0)  0@256r
%vreg101 [896r,912r:0)  0@896r
%vreg102 [320r,336r:0)  0@320r
%vreg103 [272r,288r:0)  0@272r
%vreg105 [304r,880r:0)  0@304r
%vreg106 [880r,912r:0)  0@880r
%vreg107 [864r,880r:0)  0@864r
%vreg108 [624r,704r:0)  0@624r
%vreg109 [704r,816r:0)  0@704r
%vreg110 [816r,848r:0)  0@816r
%vreg111 [784r,800r:0)  0@784r
%vreg112 [608r,624r:0)  0@608r
%vreg114 [352r,384r:0)  0@352r
%vreg115 [384r,816r:0)  0@384r
%vreg116 [656r,704r:0)  0@656r
%vreg117 [496r,528r:0)  0@496r
%vreg118 [512r,528r:0)  0@512r
%vreg119 [368r,384r:0)  0@368r
%vreg123 [560r,592r:0)  0@560r
%vreg126 [576r,592r:0)  0@576r
%vreg131 [752r,768r:0)  0@752r
%vreg134 [128r,176r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
16B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
32B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
80B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
96B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
112B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
144B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
160B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
272B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
288B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
304B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
480B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
560B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
576B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
592B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
640B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
656B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
688B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
736B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
752B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
768B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
800B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
816B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

Before MISsched:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
	%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
	%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
	%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
	%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
	%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
	%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
	%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
	%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
	%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
	%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
	%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
	%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
	%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
	%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
	%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
	%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
	%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
	%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
	%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
	%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
	%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
	%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
	%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
	%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
	%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
	%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
	%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
	%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
	%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
	%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
	%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
	%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
	%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
	%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
	%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
	%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
	%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
	%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
	%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
	%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
	%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
	%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
	%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
	%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
	%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
	%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
	%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
	%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
	%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
	%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
	%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
	%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
	%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
	%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
	%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
	%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
	TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
	S_ENDPGM

# End machine code for function remainder_intint.

AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
********** MI Scheduling **********
remainder_intint:BB#0 entry
  From: %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
    To: S_ENDPGM
 RegionInstrs: 57 Remaining: 0
Max Pressure: SGPR_32=19
SReg_32=20
VGPR_32=7
VS_32=21
Live In: SGPR2 SGPR3 SGPR4 SGPR5 SGPR6 SGPR7 SGPR8 SGPR9 SGPR10 SGPR11 VGPR0 SGPR12 
Live Out: 
Live Thru: 
AllocationOrder(R600_Predicate_Bit) = [ %PREDICATE_BIT ]
AllocationOrder(R600_Predicate) = [ %PRED_SEL_OFF %PRED_SEL_ZERO %PRED_SEL_ONE ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_W) = [ %V01_W %V23_W ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_X) = [ %V01_X %V23_X ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y) = [ %V01_Y %V23_Y ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z) = [ %V01_Z %V23_Z ]
AllocationOrder(R600_Reg64Vertical) = [ %V01_X %V01_Y %V01_Z %V01_W %V23_X %V23_Y %V23_Z %V23_W ]
AllocationOrder(R600_ArrayBase) = [ %ArrayBase448 %ArrayBase449 %ArrayBase450 %ArrayBase451 %ArrayBase452 %ArrayBase453 %ArrayBase454 %ArrayBase455 %ArrayBase456 %ArrayBase457 %ArrayBase458 %ArrayBase459 %ArrayBase460 %ArrayBase461 %ArrayBase462 %ArrayBase463 %ArrayBase464 %ArrayBase465 %ArrayBase466 %ArrayBase467 %ArrayBase468 %ArrayBase469 %ArrayBase470 %ArrayBase471 %ArrayBase472 %ArrayBase473 %ArrayBase474 %ArrayBase475 %ArrayBase476 %ArrayBase477 %ArrayBase478 %ArrayBase479 %ArrayBase480 ]
AllocationOrder(SGPR_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 ]
AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
AllocationOrder(R600_TReg32_W) = [ %T0_W %T1_W %T2_W %T3_W %T4_W %T5_W %T6_W %T7_W %T8_W %T9_W %T10_W %T11_W %T12_W %T13_W %T14_W %T15_W %T16_W %T17_W %T18_W %T19_W %T20_W %T21_W %T22_W %T23_W %T24_W %T25_W %T26_W %T27_W %T28_W %T29_W %T30_W %T31_W %T32_W %T33_W %T34_W %T35_W %T36_W %T37_W %T38_W %T39_W %T40_W %T41_W %T42_W %T43_W %T44_W %T45_W %T46_W %T47_W %T48_W %T49_W %T50_W %T51_W %T52_W %T53_W %T54_W %T55_W %T56_W %T57_W %T58_W %T59_W %T60_W %T61_W %T62_W %T63_W %T64_W %T65_W %T66_W %T67_W %T68_W %T69_W %T70_W %T71_W %T72_W %T73_W %T74_W %T75_W %T76_W %T77_W %T78_W %T79_W %T80_W %T81_W %T82_W %T83_W %T84_W %T85_W %T86_W %T87_W %T88_W %T89_W %T90_W %T91_W %T92_W %T93_W %T94_W %T95_W %T96_W %T97_W %T98_W %T99_W %T100_W %T101_W %T102_W %T103_W %T104_W %T105_W %T106_W %T107_W %T108_W %T109_W %T110_W %T111_W %T112_W %T113_W %T114_W %T115_W %T116_W %T117_W %T118_W %T119_W %T120_W %T121_W %T122_W %T123_W %T124_W %T125_W %T126_W %T127_W ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_Z) = [ %T0_Z %T1_Z %T2_Z %T3_Z %T4_Z %T5_Z %T6_Z %T7_Z %T8_Z %T9_Z %T10_Z %T11_Z %T12_Z %T13_Z %T14_Z %T15_Z %T16_Z %T17_Z %T18_Z %T19_Z %T20_Z %T21_Z %T22_Z %T23_Z %T24_Z %T25_Z %T26_Z %T27_Z %T28_Z %T29_Z %T30_Z %T31_Z %T32_Z %T33_Z %T34_Z %T35_Z %T36_Z %T37_Z %T38_Z %T39_Z %T40_Z %T41_Z %T42_Z %T43_Z %T44_Z %T45_Z %T46_Z %T47_Z %T48_Z %T49_Z %T50_Z %T51_Z %T52_Z %T53_Z %T54_Z %T55_Z %T56_Z %T57_Z %T58_Z %T59_Z %T60_Z %T61_Z %T62_Z %T63_Z %T64_Z %T65_Z %T66_Z %T67_Z %T68_Z %T69_Z %T70_Z %T71_Z %T72_Z %T73_Z %T74_Z %T75_Z %T76_Z %T77_Z %T78_Z %T79_Z %T80_Z %T81_Z %T82_Z %T83_Z %T84_Z %T85_Z %T86_Z %T87_Z %T88_Z %T89_Z %T90_Z %T91_Z %T92_Z %T93_Z %T94_Z %T95_Z %T96_Z %T97_Z %T98_Z %T99_Z %T100_Z %T101_Z %T102_Z %T103_Z %T104_Z %T105_Z %T106_Z %T107_Z %T108_Z %T109_Z %T110_Z %T111_Z %T112_Z %T113_Z %T114_Z %T115_Z %T116_Z %T117_Z %T118_Z %T119_Z %T120_Z %T121_Z %T122_Z %T123_Z %T124_Z %T125_Z %T126_Z %T127_Z ]
AllocationOrder(R600_Reg64) = [ %T0_XY %T1_XY %T2_XY %T3_XY %T4_XY %T5_XY %T6_XY %T7_XY %T8_XY %T9_XY %T10_XY %T11_XY %T12_XY %T13_XY %T14_XY %T15_XY %T16_XY %T17_XY %T18_XY %T19_XY %T20_XY %T21_XY %T22_XY %T23_XY %T24_XY %T25_XY %T26_XY %T27_XY %T28_XY %T29_XY %T30_XY %T31_XY %T32_XY %T33_XY %T34_XY %T35_XY %T36_XY %T37_XY %T38_XY %T39_XY %T40_XY %T41_XY %T42_XY %T43_XY %T44_XY %T45_XY %T46_XY %T47_XY %T48_XY %T49_XY %T50_XY %T51_XY %T52_XY %T53_XY %T54_XY %T55_XY %T56_XY %T57_XY %T58_XY %T59_XY %T60_XY %T61_XY %T62_XY %T63_XY ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(R600_Reg64) = [ %T0_XY %T1_XY %T2_XY %T3_XY %T4_XY %T5_XY %T6_XY %T7_XY %T8_XY %T9_XY %T10_XY %T11_XY %T12_XY %T13_XY %T14_XY %T15_XY %T16_XY %T17_XY %T18_XY %T19_XY %T20_XY %T21_XY %T22_XY %T23_XY %T24_XY %T25_XY %T26_XY %T27_XY %T28_XY %T29_XY %T30_XY %T31_XY %T32_XY %T33_XY %T34_XY %T35_XY %T36_XY %T37_XY %T38_XY %T39_XY %T40_XY %T41_XY %T42_XY %T43_XY %T44_XY %T45_XY %T46_XY %T47_XY %T48_XY %T49_XY %T50_XY %T51_XY %T52_XY %T53_XY %T54_XY %T55_XY %T56_XY %T57_XY %T58_XY %T59_XY %T60_XY %T61_XY %T62_XY %T63_XY ]
AllocationOrder(R600_TReg32_W) = [ %T0_W %T1_W %T2_W %T3_W %T4_W %T5_W %T6_W %T7_W %T8_W %T9_W %T10_W %T11_W %T12_W %T13_W %T14_W %T15_W %T16_W %T17_W %T18_W %T19_W %T20_W %T21_W %T22_W %T23_W %T24_W %T25_W %T26_W %T27_W %T28_W %T29_W %T30_W %T31_W %T32_W %T33_W %T34_W %T35_W %T36_W %T37_W %T38_W %T39_W %T40_W %T41_W %T42_W %T43_W %T44_W %T45_W %T46_W %T47_W %T48_W %T49_W %T50_W %T51_W %T52_W %T53_W %T54_W %T55_W %T56_W %T57_W %T58_W %T59_W %T60_W %T61_W %T62_W %T63_W %T64_W %T65_W %T66_W %T67_W %T68_W %T69_W %T70_W %T71_W %T72_W %T73_W %T74_W %T75_W %T76_W %T77_W %T78_W %T79_W %T80_W %T81_W %T82_W %T83_W %T84_W %T85_W %T86_W %T87_W %T88_W %T89_W %T90_W %T91_W %T92_W %T93_W %T94_W %T95_W %T96_W %T97_W %T98_W %T99_W %T100_W %T101_W %T102_W %T103_W %T104_W %T105_W %T106_W %T107_W %T108_W %T109_W %T110_W %T111_W %T112_W %T113_W %T114_W %T115_W %T116_W %T117_W %T118_W %T119_W %T120_W %T121_W %T122_W %T123_W %T124_W %T125_W %T126_W %T127_W ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_Z) = [ %T0_Z %T1_Z %T2_Z %T3_Z %T4_Z %T5_Z %T6_Z %T7_Z %T8_Z %T9_Z %T10_Z %T11_Z %T12_Z %T13_Z %T14_Z %T15_Z %T16_Z %T17_Z %T18_Z %T19_Z %T20_Z %T21_Z %T22_Z %T23_Z %T24_Z %T25_Z %T26_Z %T27_Z %T28_Z %T29_Z %T30_Z %T31_Z %T32_Z %T33_Z %T34_Z %T35_Z %T36_Z %T37_Z %T38_Z %T39_Z %T40_Z %T41_Z %T42_Z %T43_Z %T44_Z %T45_Z %T46_Z %T47_Z %T48_Z %T49_Z %T50_Z %T51_Z %T52_Z %T53_Z %T54_Z %T55_Z %T56_Z %T57_Z %T58_Z %T59_Z %T60_Z %T61_Z %T62_Z %T63_Z %T64_Z %T65_Z %T66_Z %T67_Z %T68_Z %T69_Z %T70_Z %T71_Z %T72_Z %T73_Z %T74_Z %T75_Z %T76_Z %T77_Z %T78_Z %T79_Z %T80_Z %T81_Z %T82_Z %T83_Z %T84_Z %T85_Z %T86_Z %T87_Z %T88_Z %T89_Z %T90_Z %T91_Z %T92_Z %T93_Z %T94_Z %T95_Z %T96_Z %T97_Z %T98_Z %T99_Z %T100_Z %T101_Z %T102_Z %T103_Z %T104_Z %T105_Z %T106_Z %T107_Z %T108_Z %T109_Z %T110_Z %T111_Z %T112_Z %T113_Z %T114_Z %T115_Z %T116_Z %T117_Z %T118_Z %T119_Z %T120_Z %T121_Z %T122_Z %T123_Z %T124_Z %T125_Z %T126_Z %T127_Z ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(VGPR_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 ]
AllocationOrder(VS_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
VS_32 Limit 18 Actual 21
AllocationOrder(R600_TReg32) = [ %T0_X %T0_Y %T0_Z %T0_W %T1_X %T1_Y %T1_Z %T1_W %T2_X %T2_Y %T2_Z %T2_W %T3_X %T3_Y %T3_Z %T3_W %T4_X %T4_Y %T4_Z %T4_W %T5_X %T5_Y %T5_Z %T5_W %T6_X %T6_Y %T6_Z %T6_W %T7_X %T7_Y %T7_Z %T7_W %T8_X %T8_Y %T8_Z %T8_W %T9_X %T9_Y %T9_Z %T9_W %T10_X %T10_Y %T10_Z %T10_W %T11_X %T11_Y %T11_Z %T11_W %T12_X %T12_Y %T12_Z %T12_W %T13_X %T13_Y %T13_Z %T13_W %T14_X %T14_Y %T14_Z %T14_W %T15_X %T15_Y %T15_Z %T15_W %T16_X %T16_Y %T16_Z %T16_W %T17_X %T17_Y %T17_Z %T17_W %T18_X %T18_Y %T18_Z %T18_W %T19_X %T19_Y %T19_Z %T19_W %T20_X %T20_Y %T20_Z %T20_W %T21_X %T21_Y %T21_Z %T21_W %T22_X %T22_Y %T22_Z %T22_W %T23_X %T23_Y %T23_Z %T23_W %T24_X %T24_Y %T24_Z %T24_W %T25_X %T25_Y %T25_Z %T25_W %T26_X %T26_Y %T26_Z %T26_W %T27_X %T27_Y %T27_Z %T27_W %T28_X %T28_Y %T28_Z %T28_W %T29_X %T29_Y %T29_Z %T29_W %T30_X %T30_Y %T30_Z %T30_W %T31_X %T31_Y %T31_Z %T31_W %T32_X %T32_Y %T32_Z %T32_W %T33_X %T33_Y %T33_Z %T33_W %T34_X %T34_Y %T34_Z %T34_W %T35_X %T35_Y %T35_Z %T35_W %T36_X %T36_Y %T36_Z %T36_W %T37_X %T37_Y %T37_Z %T37_W %T38_X %T38_Y %T38_Z %T38_W %T39_X %T39_Y %T39_Z %T39_W %T40_X %T40_Y %T40_Z %T40_W %T41_X %T41_Y %T41_Z %T41_W %T42_X %T42_Y %T42_Z %T42_W %T43_X %T43_Y %T43_Z %T43_W %T44_X %T44_Y %T44_Z %T44_W %T45_X %T45_Y %T45_Z %T45_W %T46_X %T46_Y %T46_Z %T46_W %T47_X %T47_Y %T47_Z %T47_W %T48_X %T48_Y %T48_Z %T48_W %T49_X %T49_Y %T49_Z %T49_W %T50_X %T50_Y %T50_Z %T50_W %T51_X %T51_Y %T51_Z %T51_W %T52_X %T52_Y %T52_Z %T52_W %T53_X %T53_Y %T53_Z %T53_W %T54_X %T54_Y %T54_Z %T54_W %T55_X %T55_Y %T55_Z %T55_W %T56_X %T56_Y %T56_Z %T56_W %T57_X %T57_Y %T57_Z %T57_W %T58_X %T58_Y %T58_Z %T58_W %T59_X %T59_Y %T59_Z %T59_W %T60_X %T60_Y %T60_Z %T60_W %T61_X %T61_Y %T61_Z %T61_W %T62_X %T62_Y %T62_Z %T62_W %T63_X %T63_Y %T63_Z %T63_W %T64_X %T64_Y %T64_Z %T64_W %T65_X %T65_Y %T65_Z %T65_W %T66_X %T66_Y %T66_Z %T66_W %T67_X %T67_Y %T67_Z %T67_W %T68_X %T68_Y %T68_Z %T68_W %T69_X %T69_Y %T69_Z %T69_W %T70_X %T70_Y %T70_Z %T70_W %T71_X %T71_Y %T71_Z %T71_W %T72_X %T72_Y %T72_Z %T72_W %T73_X %T73_Y %T73_Z %T73_W %T74_X %T74_Y %T74_Z %T74_W %T75_X %T75_Y %T75_Z %T75_W %T76_X %T76_Y %T76_Z %T76_W %T77_X %T77_Y %T77_Z %T77_W %T78_X %T78_Y %T78_Z %T78_W %T79_X %T79_Y %T79_Z %T79_W %T80_X %T80_Y %T80_Z %T80_W %T81_X %T81_Y %T81_Z %T81_W %T82_X %T82_Y %T82_Z %T82_W %T83_X %T83_Y %T83_Z %T83_W %T84_X %T84_Y %T84_Z %T84_W %T85_X %T85_Y %T85_Z %T85_W %T86_X %T86_Y %T86_Z %T86_W %T87_X %T87_Y %T87_Z %T87_W %T88_X %T88_Y %T88_Z %T88_W %T89_X %T89_Y %T89_Z %T89_W %T90_X %T90_Y %T90_Z %T90_W %T91_X %T91_Y %T91_Z %T91_W %T92_X %T92_Y %T92_Z %T92_W %T93_X %T93_Y %T93_Z %T93_W %T94_X %T94_Y %T94_Z %T94_W %T95_X %T95_Y %T95_Z %T95_W %T96_X %T96_Y %T96_Z %T96_W %T97_X %T97_Y %T97_Z %T97_W %T98_X %T98_Y %T98_Z %T98_W %T99_X %T99_Y %T99_Z %T99_W %T100_X %T100_Y %T100_Z %T100_W %T101_X %T101_Y %T101_Z %T101_W %T102_X %T102_Y %T102_Z %T102_W %T103_X %T103_Y %T103_Z %T103_W %T104_X %T104_Y %T104_Z %T104_W %T105_X %T105_Y %T105_Z %T105_W %T106_X %T106_Y %T106_Z %T106_W %T107_X %T107_Y %T107_Z %T107_W %T108_X %T108_Y %T108_Z %T108_W %T109_X %T109_Y %T109_Z %T109_W %T110_X %T110_Y %T110_Z %T110_W %T111_X %T111_Y %T111_Z %T111_W %T112_X %T112_Y %T112_Z %T112_W %T113_X %T113_Y %T113_Z %T113_W %T114_X %T114_Y %T114_Z %T114_W %T115_X %T115_Y %T115_Z %T115_W %T116_X %T116_Y %T116_Z %T116_W %T117_X %T117_Y %T117_Z %T117_W %T118_X %T118_Y %T118_Z %T118_W %T119_X %T119_Y %T119_Z %T119_W %T120_X %T120_Y %T120_Z %T120_W %T121_X %T121_Y %T121_Z %T121_W %T122_X %T122_Y %T122_Z %T122_W %T123_X %T123_Y %T123_Z %T123_W %T124_X %T124_Y %T124_Z %T124_W %T125_X %T125_Y %T125_Z %T125_W %T126_X %T126_Y %T126_Z %T126_W %T127_X %T127_Y %T127_Z %T127_W %AR_X ]
AllocationOrder(R600_Reg32) = [ %T0_X %T0_Y %T0_Z %T0_W %T1_X %T1_Y %T1_Z %T1_W %T2_X %T2_Y %T2_Z %T2_W %T3_X %T3_Y %T3_Z %T3_W %T4_X %T4_Y %T4_Z %T4_W %T5_X %T5_Y %T5_Z %T5_W %T6_X %T6_Y %T6_Z %T6_W %T7_X %T7_Y %T7_Z %T7_W %T8_X %T8_Y %T8_Z %T8_W %T9_X %T9_Y %T9_Z %T9_W %T10_X %T10_Y %T10_Z %T10_W %T11_X %T11_Y %T11_Z %T11_W %T12_X %T12_Y %T12_Z %T12_W %T13_X %T13_Y %T13_Z %T13_W %T14_X %T14_Y %T14_Z %T14_W %T15_X %T15_Y %T15_Z %T15_W %T16_X %T16_Y %T16_Z %T16_W %T17_X %T17_Y %T17_Z %T17_W %T18_X %T18_Y %T18_Z %T18_W %T19_X %T19_Y %T19_Z %T19_W %T20_X %T20_Y %T20_Z %T20_W %T21_X %T21_Y %T21_Z %T21_W %T22_X %T22_Y %T22_Z %T22_W %T23_X %T23_Y %T23_Z %T23_W %T24_X %T24_Y %T24_Z %T24_W %T25_X %T25_Y %T25_Z %T25_W %T26_X %T26_Y %T26_Z %T26_W %T27_X %T27_Y %T27_Z %T27_W %T28_X %T28_Y %T28_Z %T28_W %T29_X %T29_Y %T29_Z %T29_W %T30_X %T30_Y %T30_Z %T30_W %T31_X %T31_Y %T31_Z %T31_W %T32_X %T32_Y %T32_Z %T32_W %T33_X %T33_Y %T33_Z %T33_W %T34_X %T34_Y %T34_Z %T34_W %T35_X %T35_Y %T35_Z %T35_W %T36_X %T36_Y %T36_Z %T36_W %T37_X %T37_Y %T37_Z %T37_W %T38_X %T38_Y %T38_Z %T38_W %T39_X %T39_Y %T39_Z %T39_W %T40_X %T40_Y %T40_Z %T40_W %T41_X %T41_Y %T41_Z %T41_W %T42_X %T42_Y %T42_Z %T42_W %T43_X %T43_Y %T43_Z %T43_W %T44_X %T44_Y %T44_Z %T44_W %T45_X %T45_Y %T45_Z %T45_W %T46_X %T46_Y %T46_Z %T46_W %T47_X %T47_Y %T47_Z %T47_W %T48_X %T48_Y %T48_Z %T48_W %T49_X %T49_Y %T49_Z %T49_W %T50_X %T50_Y %T50_Z %T50_W %T51_X %T51_Y %T51_Z %T51_W %T52_X %T52_Y %T52_Z %T52_W %T53_X %T53_Y %T53_Z %T53_W %T54_X %T54_Y %T54_Z %T54_W %T55_X %T55_Y %T55_Z %T55_W %T56_X %T56_Y %T56_Z %T56_W %T57_X %T57_Y %T57_Z %T57_W %T58_X %T58_Y %T58_Z %T58_W %T59_X %T59_Y %T59_Z %T59_W %T60_X %T60_Y %T60_Z %T60_W %T61_X %T61_Y %T61_Z %T61_W %T62_X %T62_Y %T62_Z %T62_W %T63_X %T63_Y %T63_Z %T63_W %T64_X %T64_Y %T64_Z %T64_W %T65_X %T65_Y %T65_Z %T65_W %T66_X %T66_Y %T66_Z %T66_W %T67_X %T67_Y %T67_Z %T67_W %T68_X %T68_Y %T68_Z %T68_W %T69_X %T69_Y %T69_Z %T69_W %T70_X %T70_Y %T70_Z %T70_W %T71_X %T71_Y %T71_Z %T71_W %T72_X %T72_Y %T72_Z %T72_W %T73_X %T73_Y %T73_Z %T73_W %T74_X %T74_Y %T74_Z %T74_W %T75_X %T75_Y %T75_Z %T75_W %T76_X %T76_Y %T76_Z %T76_W %T77_X %T77_Y %T77_Z %T77_W %T78_X %T78_Y %T78_Z %T78_W %T79_X %T79_Y %T79_Z %T79_W %T80_X %T80_Y %T80_Z %T80_W %T81_X %T81_Y %T81_Z %T81_W %T82_X %T82_Y %T82_Z %T82_W %T83_X %T83_Y %T83_Z %T83_W %T84_X %T84_Y %T84_Z %T84_W %T85_X %T85_Y %T85_Z %T85_W %T86_X %T86_Y %T86_Z %T86_W %T87_X %T87_Y %T87_Z %T87_W %T88_X %T88_Y %T88_Z %T88_W %T89_X %T89_Y %T89_Z %T89_W %T90_X %T90_Y %T90_Z %T90_W %T91_X %T91_Y %T91_Z %T91_W %T92_X %T92_Y %T92_Z %T92_W %T93_X %T93_Y %T93_Z %T93_W %T94_X %T94_Y %T94_Z %T94_W %T95_X %T95_Y %T95_Z %T95_W %T96_X %T96_Y %T96_Z %T96_W %T97_X %T97_Y %T97_Z %T97_W %T98_X %T98_Y %T98_Z %T98_W %T99_X %T99_Y %T99_Z %T99_W %T100_X %T100_Y %T100_Z %T100_W %T101_X %T101_Y %T101_Z %T101_W %T102_X %T102_Y %T102_Z %T102_W %T103_X %T103_Y %T103_Z %T103_W %T104_X %T104_Y %T104_Z %T104_W %T105_X %T105_Y %T105_Z %T105_W %T106_X %T106_Y %T106_Z %T106_W %T107_X %T107_Y %T107_Z %T107_W %T108_X %T108_Y %T108_Z %T108_W %T109_X %T109_Y %T109_Z %T109_W %T110_X %T110_Y %T110_Z %T110_W %T111_X %T111_Y %T111_Z %T111_W %T112_X %T112_Y %T112_Z %T112_W %T113_X %T113_Y %T113_Z %T113_W %T114_X %T114_Y %T114_Z %T114_W %T115_X %T115_Y %T115_Z %T115_W %T116_X %T116_Y %T116_Z %T116_W %T117_X %T117_Y %T117_Z %T117_W %T118_X %T118_Y %T118_Z %T118_W %T119_X %T119_Y %T119_Z %T119_W %T120_X %T120_Y %T120_Z %T120_W %T121_X %T121_Y %T121_Z %T121_W %T122_X %T122_Y %T122_Z %T122_W %T123_X %T123_Y %T123_Z %T123_W %T124_X %T124_Y %T124_Z %T124_W %T125_X %T125_Y %T125_Z %T125_W %T126_X %T126_Y %T126_Z %T126_W %T127_X %T127_Y %T127_Z %T127_W %AR_X %ArrayBase448 %ArrayBase449 %ArrayBase450 %ArrayBase451 %ArrayBase452 %ArrayBase453 %ArrayBase454 %ArrayBase455 %ArrayBase456 %ArrayBase457 %ArrayBase458 %ArrayBase459 %ArrayBase460 %ArrayBase461 %ArrayBase462 %ArrayBase463 %ArrayBase464 %ArrayBase465 %ArrayBase466 %ArrayBase467 %ArrayBase468 %ArrayBase469 %ArrayBase470 %ArrayBase471 %ArrayBase472 %ArrayBase473 %ArrayBase474 %ArrayBase475 %ArrayBase476 %ArrayBase477 %ArrayBase478 %ArrayBase479 %ArrayBase480 %Addr0_X %Addr1_X %Addr2_X %Addr3_X %Addr4_X %Addr5_X %Addr6_X %Addr7_X %Addr8_X %Addr9_X %Addr10_X %Addr11_X %Addr12_X %Addr13_X %Addr14_X %Addr15_X %Addr16_X %Addr17_X %Addr18_X %Addr19_X %Addr20_X %Addr21_X %Addr22_X %Addr23_X %Addr24_X %Addr25_X %Addr26_X %Addr27_X %Addr28_X %Addr29_X %Addr30_X %Addr31_X %Addr32_X %Addr33_X %Addr34_X %Addr35_X %Addr36_X %Addr37_X %Addr38_X %Addr39_X %Addr40_X %Addr41_X %Addr42_X %Addr43_X %Addr44_X %Addr45_X %Addr46_X %Addr47_X %Addr48_X %Addr49_X %Addr50_X %Addr51_X %Addr52_X %Addr53_X %Addr54_X %Addr55_X %Addr56_X %Addr57_X %Addr58_X %Addr59_X %Addr60_X %Addr61_X %Addr62_X %Addr63_X %Addr64_X %Addr65_X %Addr66_X %Addr67_X %Addr68_X %Addr69_X %Addr70_X %Addr71_X %Addr72_X %Addr73_X %Addr74_X %Addr75_X %Addr76_X %Addr77_X %Addr78_X %Addr79_X %Addr80_X %Addr81_X %Addr82_X %Addr83_X %Addr84_X %Addr85_X %Addr86_X %Addr87_X %Addr88_X %Addr89_X %Addr90_X %Addr91_X %Addr92_X %Addr93_X %Addr94_X %Addr95_X %Addr96_X %Addr97_X %Addr98_X %Addr99_X %Addr100_X %Addr101_X %Addr102_X %Addr103_X %Addr104_X %Addr105_X %Addr106_X %Addr107_X %Addr108_X %Addr109_X %Addr110_X %Addr111_X %Addr112_X %Addr113_X %Addr114_X %Addr115_X %Addr116_X %Addr117_X %Addr118_X %Addr119_X %Addr120_X %Addr121_X %Addr122_X %Addr123_X %Addr124_X %Addr125_X %Addr126_X %Addr127_X %KC0_128_X %KC0_128_Y %KC0_128_Z %KC0_128_W %KC0_129_X %KC0_129_Y %KC0_129_Z %KC0_129_W %KC0_130_X %KC0_130_Y %KC0_130_Z %KC0_130_W %KC0_131_X %KC0_131_Y %KC0_131_Z %KC0_131_W %KC0_132_X %KC0_132_Y %KC0_132_Z %KC0_132_W %KC0_133_X %KC0_133_Y %KC0_133_Z %KC0_133_W %KC0_134_X %KC0_134_Y %KC0_134_Z %KC0_134_W %KC0_135_X %KC0_135_Y %KC0_135_Z %KC0_135_W %KC0_136_X %KC0_136_Y %KC0_136_Z %KC0_136_W %KC0_137_X %KC0_137_Y %KC0_137_Z %KC0_137_W %KC0_138_X %KC0_138_Y %KC0_138_Z %KC0_138_W %KC0_139_X %KC0_139_Y %KC0_139_Z %KC0_139_W %KC0_140_X %KC0_140_Y %KC0_140_Z %KC0_140_W %KC0_141_X %KC0_141_Y %KC0_141_Z %KC0_141_W %KC0_142_X %KC0_142_Y %KC0_142_Z %KC0_142_W %KC0_143_X %KC0_143_Y %KC0_143_Z %KC0_143_W %KC0_144_X %KC0_144_Y %KC0_144_Z %KC0_144_W %KC0_145_X %KC0_145_Y %KC0_145_Z %KC0_145_W %KC0_146_X %KC0_146_Y %KC0_146_Z %KC0_146_W %KC0_147_X %KC0_147_Y %KC0_147_Z %KC0_147_W %KC0_148_X %KC0_148_Y %KC0_148_Z %KC0_148_W %KC0_149_X %KC0_149_Y %KC0_149_Z %KC0_149_W %KC0_150_X %KC0_150_Y %KC0_150_Z %KC0_150_W %KC0_151_X %KC0_151_Y %KC0_151_Z %KC0_151_W %KC0_152_X %KC0_152_Y %KC0_152_Z %KC0_152_W %KC0_153_X %KC0_153_Y %KC0_153_Z %KC0_153_W %KC0_154_X %KC0_154_Y %KC0_154_Z %KC0_154_W %KC0_155_X %KC0_155_Y %KC0_155_Z %KC0_155_W %KC0_156_X %KC0_156_Y %KC0_156_Z %KC0_156_W %KC0_157_X %KC0_157_Y %KC0_157_Z %KC0_157_W %KC0_158_X %KC0_158_Y %KC0_158_Z %KC0_158_W %KC0_159_X %KC0_159_Y %KC0_159_Z %KC0_159_W %KC1_160_X %KC1_160_Y %KC1_160_Z %KC1_160_W %KC1_161_X %KC1_161_Y %KC1_161_Z %KC1_161_W %KC1_162_X %KC1_162_Y %KC1_162_Z %KC1_162_W %KC1_163_X %KC1_163_Y %KC1_163_Z %KC1_163_W %KC1_164_X %KC1_164_Y %KC1_164_Z %KC1_164_W %KC1_165_X %KC1_165_Y %KC1_165_Z %KC1_165_W %KC1_166_X %KC1_166_Y %KC1_166_Z %KC1_166_W %KC1_167_X %KC1_167_Y %KC1_167_Z %KC1_167_W %KC1_168_X %KC1_168_Y %KC1_168_Z %KC1_168_W %KC1_169_X %KC1_169_Y %KC1_169_Z %KC1_169_W %KC1_170_X %KC1_170_Y %KC1_170_Z %KC1_170_W %KC1_171_X %KC1_171_Y %KC1_171_Z %KC1_171_W %KC1_172_X %KC1_172_Y %KC1_172_Z %KC1_172_W %KC1_173_X %KC1_173_Y %KC1_173_Z %KC1_173_W %KC1_174_X %KC1_174_Y %KC1_174_Z %KC1_174_W %KC1_175_X %KC1_175_Y %KC1_175_Z %KC1_175_W %KC1_176_X %KC1_176_Y %KC1_176_Z %KC1_176_W %KC1_177_X %KC1_177_Y %KC1_177_Z %KC1_177_W %KC1_178_X %KC1_178_Y %KC1_178_Z %KC1_178_W %KC1_179_X %KC1_179_Y %KC1_179_Z %KC1_179_W %KC1_180_X %KC1_180_Y %KC1_180_Z %KC1_180_W %KC1_181_X %KC1_181_Y %KC1_181_Z %KC1_181_W %KC1_182_X %KC1_182_Y %KC1_182_Z %KC1_182_W %KC1_183_X %KC1_183_Y %KC1_183_Z %KC1_183_W %KC1_184_X %KC1_184_Y %KC1_184_Z %KC1_184_W %KC1_185_X %KC1_185_Y %KC1_185_Z %KC1_185_W %KC1_186_X %KC1_186_Y %KC1_186_Z %KC1_186_W %KC1_187_X %KC1_187_Y %KC1_187_Z %KC1_187_W %KC1_188_X %KC1_188_Y %KC1_188_Z %KC1_188_W %KC1_189_X %KC1_189_Y %KC1_189_Z %KC1_189_W %KC1_190_X %KC1_190_Y %KC1_190_Z %KC1_190_W %KC1_191_X %KC1_191_Y %KC1_191_Z %KC1_191_W %ZERO %HALF %ONE %ONE_INT %PV_X %ALU_LITERAL_X %NEG_ONE %NEG_HALF %ALU_CONST %ALU_PARAM %OQAP ]
Excess PSets: VS_32 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 499
  Successors:
   val SU(13): Latency=0 Reg=%vreg4

SU(1):   %vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 498
  Successors:
   val SU(14): Latency=0 Reg=%vreg3

SU(2):   %vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 510
  Successors:
   val SU(6): Latency=0 Reg=%vreg2
   val SU(5): Latency=0 Reg=%vreg2
   val SU(4): Latency=0 Reg=%vreg2

SU(3):   %vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 510
  Successors:
   val SU(11): Latency=0 Reg=%vreg1

SU(4):   %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 510
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg2
  Successors:
   val SU(16): Latency=10 Reg=%vreg5
   ch  SU(5): Latency=0

SU(5):   %vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 510
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg2
   ch  SU(4): Latency=0
  Successors:
   val SU(19): Latency=10 Reg=%vreg6
   ch  SU(6): Latency=0

SU(6):   %vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 510
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg2
   ch  SU(5): Latency=0
  Successors:
   val SU(55): Latency=10 Reg=%vreg7
   ch  SU(8): Latency=0

SU(7):   %vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 510
  Successors:
   val SU(10): Latency=0 Reg=%vreg134
   val SU(9): Latency=0 Reg=%vreg134
   val SU(8): Latency=0 Reg=%vreg134

SU(8):   %vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 510
  Predecessors:
   val SU(7): Latency=0 Reg=%vreg134
   ch  SU(6): Latency=0
  Successors:
   val SU(56): Latency=10 Reg=%vreg10
   ch  SU(9): Latency=0

SU(9):   %vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 510
  Predecessors:
   val SU(7): Latency=0 Reg=%vreg134
   ch  SU(8): Latency=0
  Successors:
   val SU(20): Latency=10 Reg=%vreg12
   ch  SU(10): Latency=0

SU(10):   %vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 510
  Predecessors:
   val SU(7): Latency=0 Reg=%vreg134
   ch  SU(9): Latency=0
  Successors:
   val SU(17): Latency=10 Reg=%vreg14
   ch  SU(11): Latency=0

SU(11):   %vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 510
  Predecessors:
   val SU(3): Latency=0 Reg=%vreg1
   ch  SU(10): Latency=0
  Successors:
   val SU(12): Latency=10 Reg=%vreg15
   ch  SU(56): Latency=0
   ch  SU(20): Latency=0
   ch  SU(17): Latency=0

SU(12):   %vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 500
  Predecessors:
   val SU(11): Latency=10 Reg=%vreg15
  Successors:
   val SU(13): Latency=1 Reg=%vreg17

SU(13):   %vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 499
  Predecessors:
   val SU(12): Latency=1 Reg=%vreg17
   val SU(0): Latency=0 Reg=%vreg4
  Successors:
   val SU(14): Latency=1 Reg=%vreg18

SU(14):   %vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 498
  Predecessors:
   val SU(13): Latency=1 Reg=%vreg18
   val SU(1): Latency=0 Reg=%vreg3
  Successors:
   val SU(15): Latency=1 Reg=%vreg99

SU(15):   %vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 497
  Predecessors:
   val SU(14): Latency=1 Reg=%vreg99
  Successors:
   val SU(55): Latency=1 Reg=%vreg100
   val SU(19): Latency=1 Reg=%vreg100
   val SU(16): Latency=1 Reg=%vreg100

SU(16):   %vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 471
  Predecessors:
   val SU(15): Latency=1 Reg=%vreg100
   val SU(4): Latency=10 Reg=%vreg5
  Successors:
   val SU(17): Latency=1 Reg=%vreg103

SU(17):   %vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 450
  Depth              : 15
  Height             : 470
  Predecessors:
   val SU(16): Latency=1 Reg=%vreg103
   val SU(10): Latency=10 Reg=%vreg14
   ch  SU(11): Latency=0
  Successors:
   val SU(37): Latency=450 Reg=%vreg25
   val SU(18): Latency=450 Reg=%vreg25
   ch  SU(56): Latency=0

SU(18):   %vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 465
  Height             : 20
  Predecessors:
   val SU(17): Latency=450 Reg=%vreg25
  Successors:
   val SU(54): Latency=1 Reg=%vreg105
   val SU(53): Latency=1 Reg=%vreg105
   val SU(38): Latency=1 Reg=%vreg105
   val SU(37): Latency=1 Reg=%vreg105

SU(19):   %vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 496
  Predecessors:
   val SU(15): Latency=1 Reg=%vreg100
   val SU(5): Latency=10 Reg=%vreg6
  Successors:
   val SU(20): Latency=1 Reg=%vreg102

SU(20):   %vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 450
  Depth              : 15
  Height             : 495
  Predecessors:
   val SU(19): Latency=1 Reg=%vreg102
   val SU(9): Latency=10 Reg=%vreg12
   ch  SU(11): Latency=0
  Successors:
   val SU(22): Latency=450 Reg=%vreg32
   val SU(21): Latency=450 Reg=%vreg32
   ch  SU(56): Latency=0

SU(21):   %vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 465
  Height             : 45
  Predecessors:
   val SU(20): Latency=450 Reg=%vreg32
  Successors:
   val SU(23): Latency=1 Reg=%vreg114
   val SU(22): Latency=1 Reg=%vreg114

SU(22):   %vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 466
  Height             : 44
  Predecessors:
   val SU(21): Latency=1 Reg=%vreg114
   val SU(20): Latency=450 Reg=%vreg32
  Successors:
   val SU(23): Latency=1 Reg=%vreg119

SU(23):   %vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 467
  Height             : 43
  Predecessors:
   val SU(22): Latency=1 Reg=%vreg119
   val SU(21): Latency=1 Reg=%vreg114
  Successors:
   val SU(50): Latency=1 Reg=%vreg115
   val SU(48): Latency=1 Reg=%vreg115
   val SU(44): Latency=1 Reg=%vreg115
   val SU(40): Latency=1 Reg=%vreg115
   val SU(30): Latency=1 Reg=%vreg115
   val SU(28): Latency=1 Reg=%vreg115
   val SU(24): Latency=1 Reg=%vreg115

SU(24):   %vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 468
  Height             : 42
  Predecessors:
   val SU(23): Latency=1 Reg=%vreg115
  Successors:
   val SU(25): Latency=4 Reg=%vreg39

SU(25):   %vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 472
  Height             : 38
  Predecessors:
   val SU(24): Latency=4 Reg=%vreg39
  Successors:
   val SU(26): Latency=4 Reg=%vreg40

SU(26):   %vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 476
  Height             : 34
  Predecessors:
   val SU(25): Latency=4 Reg=%vreg40
  Successors:
   val SU(27): Latency=1 Reg=%vreg41

SU(27):   %vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 477
  Height             : 33
  Predecessors:
   val SU(26): Latency=1 Reg=%vreg41
  Successors:
   val SU(35): Latency=4 Reg=%vreg42
   val SU(34): Latency=4 Reg=%vreg42
   val SU(33): Latency=4 Reg=%vreg42
   val SU(30): Latency=4 Reg=%vreg42
   val SU(28): Latency=4 Reg=%vreg42

SU(28):   %vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 481
  Height             : 29
  Predecessors:
   val SU(27): Latency=4 Reg=%vreg42
   val SU(23): Latency=1 Reg=%vreg115
  Successors:
   val SU(29): Latency=4 Reg=%vreg43

SU(29):   %vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 485
  Height             : 25
  Predecessors:
   val SU(28): Latency=4 Reg=%vreg43
  Successors:
   val SU(36): Latency=1 Reg=%vreg45
   val SU(32): Latency=1 Reg=%vreg45

SU(30):   %vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 481
  Height             : 29
  Predecessors:
   val SU(27): Latency=4 Reg=%vreg42
   val SU(23): Latency=1 Reg=%vreg115
  Successors:
   val SU(32): Latency=4 Reg=%vreg117
   val SU(31): Latency=4 Reg=%vreg117

SU(31):   %vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 485
  Height             : 25
  Predecessors:
   val SU(30): Latency=4 Reg=%vreg117
  Successors:
   val SU(32): Latency=1 Reg=%vreg118

SU(32):   %vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 486
  Height             : 24
  Predecessors:
   val SU(29): Latency=1 Reg=%vreg45
   val SU(31): Latency=1 Reg=%vreg118
   val SU(30): Latency=4 Reg=%vreg117
  Successors:
   val SU(33): Latency=1 Reg=%vreg49

SU(33):   %vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 487
  Height             : 23
  Predecessors:
   val SU(32): Latency=1 Reg=%vreg49
   val SU(27): Latency=4 Reg=%vreg42
  Successors:
   val SU(35): Latency=4 Reg=%vreg52
   val SU(34): Latency=4 Reg=%vreg52

SU(34):   %vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 491
  Height             : 19
  Predecessors:
   val SU(33): Latency=4 Reg=%vreg52
   val SU(27): Latency=4 Reg=%vreg42
  Successors:
   val SU(36): Latency=1 Reg=%vreg123

SU(35):   %vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 491
  Height             : 19
  Predecessors:
   val SU(33): Latency=4 Reg=%vreg52
   val SU(27): Latency=4 Reg=%vreg42
  Successors:
   val SU(36): Latency=1 Reg=%vreg126

SU(36):   %vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 492
  Height             : 18
  Predecessors:
   val SU(35): Latency=1 Reg=%vreg126
   val SU(34): Latency=1 Reg=%vreg123
   val SU(29): Latency=1 Reg=%vreg45
  Successors:
   val SU(39): Latency=1 Reg=%vreg59

SU(37):   %vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 466
  Height             : 19
  Predecessors:
   val SU(18): Latency=1 Reg=%vreg105
   val SU(17): Latency=450 Reg=%vreg25
  Successors:
   val SU(38): Latency=1 Reg=%vreg112

SU(38):   %vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 467
  Height             : 18
  Predecessors:
   val SU(37): Latency=1 Reg=%vreg112
   val SU(18): Latency=1 Reg=%vreg105
  Successors:
   val SU(43): Latency=1 Reg=%vreg108
   val SU(41): Latency=1 Reg=%vreg108
   val SU(39): Latency=1 Reg=%vreg108

SU(39):   %vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 493
  Height             : 17
  Predecessors:
   val SU(36): Latency=1 Reg=%vreg59
   val SU(38): Latency=1 Reg=%vreg108
  Successors:
   val SU(40): Latency=4 Reg=%vreg65

SU(40):   %vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 497
  Height             : 13
  Predecessors:
   val SU(39): Latency=4 Reg=%vreg65
   val SU(23): Latency=1 Reg=%vreg115
  Successors:
   val SU(43): Latency=4 Reg=%vreg116
   val SU(41): Latency=4 Reg=%vreg116

SU(41):   %vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 501
  Height             : 8
  Predecessors:
   val SU(40): Latency=4 Reg=%vreg116
   val SU(38): Latency=1 Reg=%vreg108
  Successors:
   val SU(42): Latency=1 Reg=%vreg68

SU(42):   %vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 502
  Height             : 7
  Predecessors:
   val SU(41): Latency=1 Reg=%vreg68
  Successors:
   val SU(51): Latency=1 Reg=%vreg71
   val SU(46): Latency=1 Reg=%vreg71

SU(43):   %vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 501
  Height             : 9
  Predecessors:
   val SU(40): Latency=4 Reg=%vreg116
   val SU(38): Latency=1 Reg=%vreg108
  Successors:
   val SU(50): Latency=1 Reg=%vreg109
   val SU(49): Latency=1 Reg=%vreg109
   val SU(48): Latency=1 Reg=%vreg109
   val SU(44): Latency=1 Reg=%vreg109

SU(44):   %vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 502
  Height             : 8
  Predecessors:
   val SU(43): Latency=1 Reg=%vreg109
   val SU(23): Latency=1 Reg=%vreg115
  Successors:
   val SU(45): Latency=1 Reg=%vreg74

SU(45):   %vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 503
  Height             : 7
  Predecessors:
   val SU(44): Latency=1 Reg=%vreg74
  Successors:
   val SU(46): Latency=1 Reg=%vreg76

SU(46):   %vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 504
  Height             : 6
  Predecessors:
   val SU(45): Latency=1 Reg=%vreg76
   val SU(42): Latency=1 Reg=%vreg71
  Successors:
   val SU(47): Latency=1 Reg=%vreg131

SU(47):   %vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 505
  Height             : 5
  Predecessors:
   val SU(46): Latency=1 Reg=%vreg131
  Successors:
   val SU(49): Latency=1 Reg=%vreg81

SU(48):   %vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 502
  Height             : 5
  Predecessors:
   val SU(43): Latency=1 Reg=%vreg109
   val SU(23): Latency=1 Reg=%vreg115
  Successors:
   val SU(49): Latency=1 Reg=%vreg111

SU(49):   %vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 506
  Height             : 4
  Predecessors:
   val SU(47): Latency=1 Reg=%vreg81
   val SU(43): Latency=1 Reg=%vreg109
   val SU(48): Latency=1 Reg=%vreg111
  Successors:
   val SU(52): Latency=1 Reg=%vreg84

SU(50):   %vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 502
  Height             : 4
  Predecessors:
   val SU(43): Latency=1 Reg=%vreg109
   val SU(23): Latency=1 Reg=%vreg115
  Successors:
   val SU(52): Latency=1 Reg=%vreg110

SU(51):   %vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 503
  Height             : 4
  Predecessors:
   val SU(42): Latency=1 Reg=%vreg71
  Successors:
   val SU(52): Latency=1 Reg=%vreg88

SU(52):   %vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 507
  Height             : 3
  Predecessors:
   val SU(49): Latency=1 Reg=%vreg84
   val SU(50): Latency=1 Reg=%vreg110
   val SU(51): Latency=1 Reg=%vreg88
  Successors:
   val SU(53): Latency=1 Reg=%vreg89

SU(53):   %vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 508
  Height             : 2
  Predecessors:
   val SU(52): Latency=1 Reg=%vreg89
   val SU(18): Latency=1 Reg=%vreg105
  Successors:
   val SU(54): Latency=1 Reg=%vreg107

SU(54):   %vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 509
  Height             : 1
  Predecessors:
   val SU(53): Latency=1 Reg=%vreg107
   val SU(18): Latency=1 Reg=%vreg105
  Successors:
   val SU(56): Latency=1 Reg=%vreg106

SU(55):   %vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
   val SU(15): Latency=1 Reg=%vreg100
   val SU(6): Latency=10 Reg=%vreg7
  Successors:
   val SU(56): Latency=1 Reg=%vreg101

SU(56):   TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 450
  Depth              : 510
  Height             : 0
  Predecessors:
   val SU(54): Latency=1 Reg=%vreg106
   val SU(55): Latency=1 Reg=%vreg101
   val SU(8): Latency=10 Reg=%vreg10
   ch  SU(20): Latency=0
   ch  SU(17): Latency=0
   ch  SU(11): Latency=0

Critical Path(GS-RR ): 510
Pick Bot NOCAND
Scheduling SU(56) TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
  LiveReg: %vreg106
  UpdateRegP: SU(56) TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
  LiveReg: %vreg101
  UpdateRegP: SU(56) TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
  LiveReg: %vreg10
  UpdateRegP: SU(56) TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
  Ready @0c
  HWVMEM +1x217u
  BotQ.A TopLatency SU(56) 510c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
BotQ.A RemLatency SU(54) 509c
  TopQ.A + Remain MOps: 51
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 54 55 
  SU(54) ORDER                              
  SU(55) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(55) %vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
  LiveReg: %vreg7
  UpdateRegP: SU(55) %vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
  LiveReg: %vreg100
  UpdateRegP: SU(55) %vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
  UpdateRegP: SU(19) %vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
  UpdateRegP: SU(16) %vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
  Ready @1c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(55) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(54) %vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
  LiveReg: %vreg107
  UpdateRegP: SU(54) %vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
  LiveReg: %vreg105
  UpdateRegP: SU(54) %vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
  UpdateRegP: SU(53) %vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
  UpdateRegP: SU(38) %vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
  UpdateRegP: SU(37) %vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
  Ready @2c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(54) 509c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(53) %vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
  LiveReg: %vreg89
  UpdateRegP: SU(53) %vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
  Ready @3c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(53) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(52) %vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
  LiveReg: %vreg84
  UpdateRegP: SU(52) %vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
  LiveReg: %vreg110
  UpdateRegP: SU(52) %vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
  LiveReg: %vreg88
  UpdateRegP: SU(52) %vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
  Ready @4c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(52) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
BotQ.A RemLatency SU(49) 506c
  TopQ.A + Remain MOps: 47
  BotQ.A RemainingLatency 506 + 5c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 49 50 51 
  SU(49) ORDER                              
  SU(50) REG-CRIT   VS_32:1                    
  SU(51) REG-CRIT                           
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(51) %vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
  LiveReg: %vreg71
  UpdateRegP: SU(51) %vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
  UpdateRegP: SU(46) %vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
  Ready @5c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(51) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.A RemLatency SU(49) 506c
  TopQ.A + Remain MOps: 46
  BotQ.A RemainingLatency 506 + 6c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 49 50 
  SU(49) ORDER                              
  SU(50) REG-CRIT                           
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(50) %vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
  LiveReg: %vreg115
  UpdateRegP: SU(50) %vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
  UpdateRegP: SU(48) %vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
  UpdateRegP: SU(44) %vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
  UpdateRegP: SU(40) %vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
  UpdateRegP: SU(30) %vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
  UpdateRegP: SU(28) %vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
  UpdateRegP: SU(24) %vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
  LiveReg: %vreg109
  UpdateRegP: SU(50) %vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
  UpdateRegP: SU(49) %vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
  UpdateRegP: SU(48) %vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
  UpdateRegP: SU(44) %vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
  Ready @6c
  HWVALU +1x3255u
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(49) %vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
  LiveReg: %vreg111
  UpdateRegP: SU(49) %vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
  LiveReg: %vreg81
  UpdateRegP: SU(49) %vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
  Ready @7c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(49) 506c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.A RemLatency SU(47) 505c
  TopQ.A + Remain MOps: 44
  BotQ.A RemainingLatency 505 + 8c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 47 48 
  SU(47) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(47) %vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
handleMove 768B -> 792B: %vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
     %vreg81:	[768r,800r:0)  0@768r
        -->	[792r,800r:0)  0@792r
     %vreg131:	[752r,768r:0)  0@752r
        -->	[752r,792r:0)  0@752r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg131
  UpdateRegP: SU(47) %vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
  Ready @8c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(47) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
BotQ.A RemLatency SU(46) 504c
  TopQ.A + Remain MOps: 43
  BotQ.A RemainingLatency 504 + 9c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 48 46 
  SU(48) ORDER                              
  SU(46) BOT-PATH                  504 cycles 
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(46) %vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
handleMove 752B -> 788B: %vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
     %vreg131:	[752r,792r:0)  0@752r
        -->	[788r,792r:0)  0@788r
     %vreg71:	[688r,832r:0)  0@688r
        -->	[688r,832r:0)  0@688r
     %vreg76:	[736r,752r:0)  0@736r
        -->	[736r,788r:0)  0@736r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg76
  UpdateRegP: SU(46) %vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
  Ready @9c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(46) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
BotQ.A RemLatency SU(45) 503c
  TopQ.A + Remain MOps: 42
  BotQ.A RemainingLatency 503 + 10c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 48 45 42 
  SU(48) ORDER                              
  SU(45) BOT-PATH                  503 cycles 
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(45) %vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74

*** Renumbered SlotIndexes 784-824 ***
handleMove 736B -> 792B: %vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
     %vreg76:	[736r,800r:0)  0@736r
        -->	[792r,800r:0)  0@792r
     %vreg74:	[720r,736r:0)  0@720r
        -->	[720r,792r:0)  0@720r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg74
  UpdateRegP: SU(45) %vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
  Ready @10c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(45) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
BotQ.A RemLatency SU(48) 502c
  TopQ.A + Remain MOps: 41
  BotQ.A RemainingLatency 502 + 11c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 48 42 44 
  SU(48) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(48) %vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
  Ready @11c
  HWVALU +1x3255u
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
BotQ.A RemLatency SU(44) 502c
  TopQ.A + Remain MOps: 40
  BotQ.A RemainingLatency 502 + 12c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 44 42 
  SU(44) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(44) %vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
  Ready @12c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(44) 502c
  BotQ.A BotLatency SU(44) 8c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
BotQ.A RemLatency SU(42) 502c
  TopQ.A + Remain MOps: 39
  BotQ.A RemainingLatency 502 + 13c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 42 43 
  SU(42) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(42) %vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
handleMove 688B -> 712B: %vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
     %vreg71:	[688r,832r:0)  0@688r
        -->	[712r,832r:0)  0@712r
     %vreg68:	[672r,688r:0)  0@672r
        -->	[672r,712r:0)  0@672r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg68
  UpdateRegP: SU(42) %vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
  Ready @13c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(42) 502c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
BotQ.A RemLatency SU(43) 501c
  TopQ.A + Remain MOps: 38
  BotQ.A RemainingLatency 501 + 14c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 43 41 
  SU(43) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(43) %vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
  LiveReg: %vreg116
  UpdateRegP: SU(43) %vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
  UpdateRegP: SU(41) %vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
  LiveReg: %vreg108
  UpdateRegP: SU(43) %vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
  UpdateRegP: SU(41) %vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
  UpdateRegP: SU(39) %vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
  Ready @14c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(43) 9c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(41) %vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
  Ready @15c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(41) 501c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
BotQ.P: 40 
Cycle: 19 BotQ.A
Pick Bot NOCAND
Scheduling SU(40) %vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
  LiveReg: %vreg65
  UpdateRegP: SU(40) %vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
  Ready @19c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(40) 13c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 17
  Executed: 20c
  Critical: 17c, 17 MOps
  ExpectedLatency: 13c
  - Latency limited.
BotQ.P: 39 
Cycle: 23 BotQ.A
Pick Bot NOCAND
Scheduling SU(39) %vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
  LiveReg: %vreg59
  UpdateRegP: SU(39) %vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
  Ready @23c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(39) 17c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 18
  Executed: 24c
  Critical: 18c, 18 MOps
  ExpectedLatency: 17c
  - Latency limited.
BotQ.A RemLatency SU(36) 492c
  TopQ.A + Remain MOps: 34
  BotQ.A RemainingLatency 492 + 24c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 36 38 
  SU(36) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(36) %vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
handleMove 592B -> 632B: %vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
     %vreg59:	[592r,640r:0)  0@592r
        -->	[632r,640r:0)  0@632r
     %vreg126:	[576r,592r:0)  0@576r
        -->	[576r,632r:0)  0@576r
     %vreg123:	[560r,592r:0)  0@560r
        -->	[560r,632r:0)  0@560r
     %vreg45:	[480r,592r:0)  0@480r
        -->	[480r,632r:0)  0@480r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg126
  UpdateRegP: SU(36) %vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
  LiveReg: %vreg123
  UpdateRegP: SU(36) %vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
  LiveReg: %vreg45
  UpdateRegP: SU(36) %vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
  UpdateRegP: SU(32) %vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
  Ready @24c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(36) 18c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 19
  Executed: 25c
  Critical: 19c, 19 MOps
  ExpectedLatency: 18c
  - Latency limited.
BotQ.A RemLatency SU(35) 491c
  TopQ.A + Remain MOps: 33
  BotQ.A RemainingLatency 491 + 25c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 38 35 34 
  SU(38) ORDER                              
  SU(35) BOT-PATH                  491 cycles 
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(35) %vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
handleMove 576B -> 628B: %vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
     %vreg126:	[576r,632r:0)  0@576r
        -->	[628r,632r:0)  0@628r
     %vreg52:	[544r,576r:0)  0@544r
        -->	[544r,628r:0)  0@544r
     %vreg42:	[448r,576r:0)  0@448r
        -->	[448r,628r:0)  0@448r
     VCC_LO:	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[560r,560d:1)[608r,608d:4)[628r,628d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@628r 1@560r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
        -->	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[560r,560d:1)[608r,608d:4)[628r,628d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@628r 1@560r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
     VCC_HI:	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[560r,560d:1)[608r,608d:4)[628r,628d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@628r 1@560r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
        -->	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[560r,560d:1)[608r,608d:4)[628r,628d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@628r 1@560r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg52
  UpdateRegP: SU(35) %vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
  UpdateRegP: SU(34) %vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
  LiveReg: %vreg42
  UpdateRegP: SU(35) %vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
  UpdateRegP: SU(34) %vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
  UpdateRegP: SU(33) %vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
  UpdateRegP: SU(30) %vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
  UpdateRegP: SU(28) %vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
  Ready @25c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(35) 19c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 20
  Executed: 26c
  Critical: 20c, 20 MOps
  ExpectedLatency: 19c
  - Latency limited.
BotQ.A RemLatency SU(34) 491c
  TopQ.A + Remain MOps: 32
  BotQ.A RemainingLatency 491 + 26c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 38 34 
  SU(38) ORDER                              
  SU(34) BOT-PATH                  491 cycles 
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(34) %vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42

*** Renumbered SlotIndexes 624-664 ***
handleMove 560B -> 632B: %vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
     %vreg123:	[560r,648r:0)  0@560r
        -->	[632r,648r:0)  0@632r
     %vreg52:	[544r,640r:0)  0@544r
        -->	[544r,640r:0)  0@544r
     %vreg42:	[448r,640r:0)  0@448r
        -->	[448r,640r:0)  0@448r
     VCC_LO:	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[560r,560d:1)[608r,608d:4)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@560r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
        -->	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
     VCC_HI:	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[560r,560d:1)[608r,608d:4)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@560r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
        -->	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 16 <= 18(+ 0 livethru)
  Ready @26c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(34) 491c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 21
  Executed: 27c
  Critical: 21c, 21 MOps
  ExpectedLatency: 19c
  - Latency limited.
BotQ.P: 33 
Pick Bot NOCAND
Scheduling SU(38) %vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg112
  UpdateRegP: SU(38) %vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
  Ready @27c
  HWVALU +1x3255u
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 22
  Executed: 28c
  Critical: 22c, 22 MOps
  ExpectedLatency: 19c
  - Latency limited.
BotQ.P: 33 
Pick Bot NOCAND
Scheduling SU(37) %vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg25
  UpdateRegP: SU(37) %vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
  UpdateRegP: SU(18) %vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
  Ready @28c
  HWVALU +1x3255u
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 23
  Executed: 29c
  Critical: 23c, 23 MOps
  ExpectedLatency: 19c
  - Latency limited.
BotQ.P: 33 
Pick Bot NOCAND
Scheduling SU(18) %vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
handleMove 304B -> 552B: %vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
     %vreg105:	[304r,880r:0)  0@304r
        -->	[552r,880r:0)  0@552r
     %vreg25:	[288r,608r:0)  0@288r
        -->	[288r,608r:0)  0@288r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 16 <= 18(+ 0 livethru)
  Ready @29c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(18) 20c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 24
  Executed: 30c
  Critical: 24c, 24 MOps
  ExpectedLatency: 20c
  - Latency limited.
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(33) %vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg49
  UpdateRegP: SU(33) %vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
  Ready @30c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(33) 23c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 25
  Executed: 31c
  Critical: 25c, 25 MOps
  ExpectedLatency: 23c
  - Latency limited.
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(32) %vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg117
  UpdateRegP: SU(32) %vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
  UpdateRegP: SU(31) %vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
  LiveReg: %vreg118
  UpdateRegP: SU(32) %vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
  Ready @31c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(32) 24c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 26
  Executed: 32c
  Critical: 26c, 26 MOps
  ExpectedLatency: 24c
  - Latency limited.
BotQ.P: 17 
BotQ.A RemLatency SU(29) 485c
BotQ.A RemLatency SU(17) 15c
  TopQ.A + Remain MOps: 26
  BotQ.A RemainingLatency 485 + 32c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 29 31 
  SU(29) ORDER                              
  SU(31) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
  VS_32: 16 <= 18(+ 0 livethru)
  Ready @32c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(31) 25c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 27
  Executed: 33c
  Critical: 27c, 27 MOps
  ExpectedLatency: 25c
  - Latency limited.
BotQ.P: 17 30 
Pick Bot NOCAND
Scheduling SU(29) %vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
handleMove 480B -> 504B: %vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
     %vreg45:	[480r,648r:0)  0@480r
        -->	[504r,648r:0)  0@504r
     %vreg43:	[464r,480r:0)  0@464r
        -->	[464r,504r:0)  0@464r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg43
  UpdateRegP: SU(29) %vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
  Ready @33c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(29) 485c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 28
  Executed: 34c
  Critical: 28c, 28 MOps
  ExpectedLatency: 25c
  - Latency limited.
BotQ.P: 17 30 28 
Cycle: 36 BotQ.A
BotQ.P: 17 28 
Pick Bot NOCAND
Scheduling SU(30) %vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
  VS_32: 16 <= 18(+ 0 livethru)
  Ready @36c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(30) 29c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 29
  Executed: 37c
  Critical: 29c, 29 MOps
  ExpectedLatency: 29c
  - Latency limited.
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(28) %vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
  VS_32: 16 <= 18(+ 0 livethru)
  Ready @37c
  HWVALU +1x3255u
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 30
  Executed: 38c
  Critical: 30c, 30 MOps
  ExpectedLatency: 29c
  - Latency limited.
BotQ.P: 17 27 
Cycle: 41 BotQ.A
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(27) %vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg41
  UpdateRegP: SU(27) %vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
  Ready @41c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(27) 33c
  *** Max MOps 1 at cycle 41
Cycle: 42 BotQ.A
BotQ.A @42c
  Retired: 31
  Executed: 42c
  Critical: 31c, 31 MOps
  ExpectedLatency: 33c
  - Latency limited.
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(26) %vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg40
  UpdateRegP: SU(26) %vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
  Ready @42c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(26) 34c
  *** Max MOps 1 at cycle 42
Cycle: 43 BotQ.A
BotQ.A @43c
  Retired: 32
  Executed: 43c
  Critical: 32c, 32 MOps
  ExpectedLatency: 34c
  - Latency limited.
BotQ.P: 17 25 
Cycle: 46 BotQ.A
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(25) %vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg39
  UpdateRegP: SU(25) %vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
  Ready @46c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(25) 38c
  *** Max MOps 1 at cycle 46
Cycle: 47 BotQ.A
BotQ.A @47c
  Retired: 33
  Executed: 47c
  Critical: 33c, 33 MOps
  ExpectedLatency: 38c
  - Latency limited.
BotQ.P: 17 24 
Cycle: 50 BotQ.A
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(24) %vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
  VS_32: 16 <= 18(+ 0 livethru)
  Ready @50c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(24) 42c
  *** Max MOps 1 at cycle 50
Cycle: 51 BotQ.A
BotQ.A @51c
  Retired: 34
  Executed: 51c
  Critical: 34c, 34 MOps
  ExpectedLatency: 42c
  - Latency limited.
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(23) %vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg119
  UpdateRegP: SU(23) %vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
  LiveReg: %vreg114
  UpdateRegP: SU(23) %vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
  UpdateRegP: SU(22) %vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
  Ready @51c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(23) 43c
  *** Max MOps 1 at cycle 51
Cycle: 52 BotQ.A
BotQ.A @52c
  Retired: 35
  Executed: 52c
  Critical: 35c, 35 MOps
  ExpectedLatency: 43c
  - Latency limited.
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(22) %vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg32
  UpdateRegP: SU(22) %vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
  UpdateRegP: SU(21) %vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
  Ready @52c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(22) 44c
  *** Max MOps 1 at cycle 52
Cycle: 53 BotQ.A
BotQ.A @53c
  Retired: 36
  Executed: 53c
  Critical: 36c, 36 MOps
  ExpectedLatency: 44c
  - Latency limited.
BotQ.P: 17 
Pick Bot NOCAND
Scheduling SU(21) %vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
  VS_32: 16 <= 18(+ 0 livethru)
  Ready @53c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(21) 45c
  *** Max MOps 1 at cycle 53
Cycle: 54 BotQ.A
BotQ.A @54c
  Retired: 37
  Executed: 54c
  Critical: 37c, 37 MOps
  ExpectedLatency: 45c
  - Latency limited.
BotQ.P: 17 20 
Cycle: 479 BotQ.A
BotQ.P: 20 
Pick Bot NOCAND
Scheduling SU(17) %vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
handleMove 288B -> 344B: %vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
     %vreg25:	[288r,608r:0)  0@288r
        -->	[344r,608r:0)  0@344r
     %vreg103:	[272r,288r:0)  0@272r
        -->	[272r,344r:0)  0@272r
     %vreg14:	[176r,288r:0)  0@176r
        -->	[176r,344r:0)  0@176r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg103
  UpdateRegP: SU(17) %vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
  LiveReg: %vreg14
  UpdateRegP: SU(17) %vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
  Ready @479c
  HWVMEM +1x217u
  BotQ.A BotLatency SU(17) 470c
  *** Max MOps 1 at cycle 479
Cycle: 480 BotQ.A
BotQ.A @480c
  Retired: 38
  Executed: 480c
  Critical: 38c, 38 MOps
  ExpectedLatency: 470c
  - Latency limited.
BotQ.P: 20 
Pick Bot NOCAND
Scheduling SU(16) %vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
handleMove 272B -> 340B: %vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
     %vreg103:	[272r,344r:0)  0@272r
        -->	[340r,344r:0)  0@340r
     %vreg5:	[80r,272r:0)  0@80r
        -->	[80r,340r:0)  0@80r
     %vreg100:	[256r,896r:0)  0@256r
        -->	[256r,896r:0)  0@256r
     VCC_LO:	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
        -->	[240r,240d:12)[320r,320d:10)[340r,340d:9)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@340r 10@320r 11@896r 12@240r
     VCC_HI:	[240r,240d:12)[272r,272d:9)[320r,320d:10)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@272r 10@320r 11@896r 12@240r
        -->	[240r,240d:12)[320r,320d:10)[340r,340d:9)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@340r 10@320r 11@896r 12@240r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg5
  UpdateRegP: SU(16) %vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
  Ready @480c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(16) 471c
  *** Max MOps 1 at cycle 480
Cycle: 481 BotQ.A
BotQ.A @481c
  Retired: 39
  Executed: 481c
  Critical: 39c, 39 MOps
  ExpectedLatency: 471c
  - Latency limited.
BotQ.P: 20 
Cycle: 503 BotQ.A
Pick Bot NOCAND
Scheduling SU(20) %vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg102
  UpdateRegP: SU(20) %vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
  LiveReg: %vreg12
  UpdateRegP: SU(20) %vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
  Ready @503c
  HWVMEM +1x217u
  BotQ.A BotLatency SU(20) 495c
  *** Max MOps 1 at cycle 503
Cycle: 504 BotQ.A
BotQ.A @504c
  Retired: 40
  Executed: 504c
  Critical: 40c, 40 MOps
  ExpectedLatency: 495c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(19) %vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
  VS_32: 18 <= 18(+ 0 livethru)
  LiveReg: %vreg6
  UpdateRegP: SU(19) %vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
  Ready @504c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(19) 496c
  *** Max MOps 1 at cycle 504
Cycle: 505 BotQ.A
BotQ.A @505c
  Retired: 41
  Executed: 505c
  Critical: 41c, 41 MOps
  ExpectedLatency: 496c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(15) %vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
  VS_32: 18 <= 18(+ 0 livethru)
  LiveReg: %vreg99
  UpdateRegP: SU(15) %vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
  Ready @505c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(15) 497c
  *** Max MOps 1 at cycle 505
Cycle: 506 BotQ.A
BotQ.A @506c
  Retired: 42
  Executed: 506c
  Critical: 42c, 42 MOps
  ExpectedLatency: 497c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(14) %vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
  VS_32: 18 <= 18(+ 0 livethru)
  LiveReg: %vreg18
  UpdateRegP: SU(14) %vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
  LiveReg: %vreg3
  UpdateRegP: SU(14) %vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
  Ready @506c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(14) 498c
  *** Max MOps 1 at cycle 506
Cycle: 507 BotQ.A
BotQ.A @507c
  Retired: 43
  Executed: 507c
  Critical: 43c, 43 MOps
  ExpectedLatency: 498c
  - Latency limited.
BotQ.A RemLatency SU(13) 11c
  TopQ.A + Remain MOps: 9
  BotQ.A RemainingLatency 11 + 507c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 13 1 
  SU(13) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(13) %vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
  VS_32: 18 <= 18(+ 0 livethru)
  LiveReg: %vreg17
  UpdateRegP: SU(13) %vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
  LiveReg: %vreg4
  UpdateRegP: SU(13) %vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
  Ready @507c
  HWSALU +1x3255u
  BotQ.A BotLatency SU(13) 499c
  *** Max MOps 1 at cycle 507
Cycle: 508 BotQ.A
BotQ.A @508c
  Retired: 44
  Executed: 508c
  Critical: 44c, 44 MOps
  ExpectedLatency: 499c
  - Latency limited.
BotQ.A RemLatency SU(12) 10c
  TopQ.A + Remain MOps: 8
  BotQ.A RemainingLatency 10 + 508c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 1 12 0 
  SU(1) ORDER                              
  SU(12) PREG-COPY                         
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(12) %vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
  VS_32: 18 <= 18(+ 0 livethru)
  LiveReg: %vreg15
  UpdateRegP: SU(12) %vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
  Ready @508c
  HWSALU +1x3255u
  BotQ.A BotLatency SU(12) 500c
  *** Max MOps 1 at cycle 508
Cycle: 509 BotQ.A
BotQ.A @509c
  Retired: 45
  Executed: 509c
  Critical: 45c, 45 MOps
  ExpectedLatency: 500c
  - Latency limited.
BotQ.P: 11 
  TopQ.A + Remain MOps: 7
  BotQ.A RemainingLatency 9 + 509c > CritPath 510
TopQ.A RemLatency SU(2) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 1 0 
  SU(1) ORDER                              
TopQ.A: 0 1 2 3 7 
  SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
handleMove 32B -> 200B: %vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
     %vreg3:	[32r,240r:0)  0@32r
        -->	[200r,240r:0)  0@200r
     VGPR0:	[0B,32r:0)  0@0B-phi
        -->	[0B,200r:0)  0@0B-phi
  VS_32: 18 <= 18(+ 0 livethru)
  LiveReg: VGPR0
  Ready @509c
BotQ.A @509c
  Retired: 45
  Executed: 509c
  Critical: 45c, 45 MOps
  ExpectedLatency: 500c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(0) %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
handleMove 16B -> 196B: %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
     %vreg4:	[16r,224r:0)  0@16r
        -->	[196r,224r:0)  0@196r
     SGPR12:	[0B,16r:0)  0@0B-phi
        -->	[0B,196r:0)  0@0B-phi
  VS_32: 18 <= 18(+ 0 livethru)
  LiveReg: SGPR12
  Ready @509c
BotQ.A @509c
  Retired: 45
  Executed: 509c
  Critical: 45c, 45 MOps
  ExpectedLatency: 500c
  - Latency limited.
Cycle: 510 BotQ.A
BotQ.P: 11 
Cycle: 518 BotQ.A
Pick Bot NOCAND
Scheduling SU(11) %vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
  VS_32: 21 > 18(+ 0 livethru)
  LiveReg: %vreg1
  UpdateRegP: SU(11) %vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
  Ready @518c
  HWLGKM +1x105u
  BotQ.A BotLatency SU(11) 510c
  *** Max MOps 1 at cycle 518
Cycle: 519 BotQ.A
BotQ.A @519c
  Retired: 46
  Executed: 519c
  Critical: 46c, 46 MOps
  ExpectedLatency: 510c
  - Latency limited.
  TopQ.A + Remain MOps: 6
TopQ.A RemLatency SU(3) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 3 10 
  SU(3) ORDER                              
  SU(10) VS_32:-2
  SU(10) PREG-COPY                         
TopQ.A: 3 7 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(10) %vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
  VS_32: 21 > 18(+ 0 livethru)
  LiveReg: %vreg134
  UpdateRegP: SU(10) %vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
  UpdateRegP: SU(9) %vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
  UpdateRegP: SU(8) %vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
  Ready @519c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 519
Cycle: 520 BotQ.A
BotQ.A @520c
  Retired: 47
  Executed: 520c
  Critical: 47c, 47 MOps
  ExpectedLatency: 510c
  - Latency limited.
  TopQ.A + Remain MOps: 5
TopQ.A RemLatency SU(3) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 3 9 
  SU(3) ORDER                              
  SU(9) VS_32:-1
  SU(9) PREG-COPY                         
TopQ.A: 3 7 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(9) %vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
  VS_32: 21 > 18(+ 0 livethru)
  Ready @520c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 520
Cycle: 521 BotQ.A
BotQ.A @521c
  Retired: 48
  Executed: 521c
  Critical: 48c, 48 MOps
  ExpectedLatency: 510c
  - Latency limited.
  TopQ.A + Remain MOps: 4
TopQ.A RemLatency SU(3) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 3 8 
  SU(3) ORDER                              
  SU(8) PREG-COPY                         
TopQ.A: 3 7 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(8) %vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
  VS_32: 21 > 18(+ 0 livethru)
  Ready @521c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 521
Cycle: 522 BotQ.A
BotQ.A @522c
  Retired: 49
  Executed: 522c
  Critical: 49c, 49 MOps
  ExpectedLatency: 510c
  - Latency limited.
  TopQ.A + Remain MOps: 3
TopQ.A RemLatency SU(3) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 3 7 6 
  SU(3) ORDER                              
  SU(7) ORDER                              
  SU(6) PREG-COPY                         
TopQ.A: 3 7 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(6) %vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
handleMove 112B -> 136B: %vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
     %vreg7:	[112r,896r:0)  0@112r
        -->	[136r,896r:0)  0@136r
     %vreg2:	[48r,112r:0)  0@48r
        -->	[48r,136r:0)  0@48r
  VS_32: 21 > 18(+ 0 livethru)
  LiveReg: %vreg2
  UpdateRegP: SU(6) %vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
  UpdateRegP: SU(5) %vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
  UpdateRegP: SU(4) %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
  Ready @522c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 522
Cycle: 523 BotQ.A
BotQ.A @523c
  Retired: 50
  Executed: 523c
  Critical: 50c, 50 MOps
  ExpectedLatency: 510c
  - Latency limited.
  TopQ.A + Remain MOps: 2
TopQ.A RemLatency SU(3) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 3 7 5 
  SU(3) ORDER                              
  SU(7) ORDER                              
  SU(5) PREG-COPY                         
TopQ.A: 3 7 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(5) %vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
handleMove 96B -> 132B: %vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
     %vreg6:	[96r,320r:0)  0@96r
        -->	[132r,320r:0)  0@132r
     %vreg2:	[48r,136r:0)  0@48r
        -->	[48r,136r:0)  0@48r
  VS_32: 21 > 18(+ 0 livethru)
  Ready @523c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 523
Cycle: 524 BotQ.A
BotQ.A @524c
  Retired: 51
  Executed: 524c
  Critical: 51c, 51 MOps
  ExpectedLatency: 510c
  - Latency limited.
  TopQ.A + Remain MOps: 1
  BotQ.A RemainingLatency 0 + 524c > CritPath 510
TopQ.A RemLatency SU(3) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 3 7 4 
  SU(3) ORDER                              
  SU(7) ORDER                              
  SU(4) PREG-COPY                         
TopQ.A: 3 7 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(4) %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2

*** Renumbered SlotIndexes 128-168 ***
handleMove 80B -> 136B: %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
     %vreg5:	[80r,340r:0)  0@80r
        -->	[136r,340r:0)  0@136r
     %vreg2:	[48r,152r:0)  0@48r
        -->	[48r,152r:0)  0@48r
  VS_32: 21 > 18(+ 0 livethru)
  Ready @524c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 524
Cycle: 525 BotQ.A
BotQ.A @525c
  Retired: 52
  Executed: 525c
  Critical: 52c, 52 MOps
  ExpectedLatency: 510c
  - Latency limited.
  TopQ.A + Remain MOps: 0
  BotQ.A RemainingLatency 0 + 525c > CritPath 510
TopQ.A RemLatency SU(3) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 3 7 2 
  SU(3) ORDER                              
  SU(7) ORDER                              
TopQ.A: 3 7 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
  VS_32: 21 > 18(+ 0 livethru)
  LiveReg: SGPR2
  LiveReg: SGPR3
  Ready @525c
BotQ.A @525c
  Retired: 52
  Executed: 525c
  Critical: 52c, 52 MOps
  ExpectedLatency: 510c
  - Latency limited.
  TopQ.A + Remain MOps: 0
  BotQ.A RemainingLatency 0 + 525c > CritPath 510
TopQ.A RemLatency SU(3) 510c
  BotQ.A + Remain MOps: 52
BotQ.A: 3 2 
  SU(3) ORDER                              
TopQ.A: 3 2 
  SU(3) ORDER                              
  SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
  VS_32: 21 > 18(+ 0 livethru)
  LiveReg: SGPR4
  LiveReg: SGPR5
  LiveReg: SGPR6
  LiveReg: SGPR7
  Ready @525c
BotQ.A @525c
  Retired: 52
  Executed: 525c
  Critical: 52c, 52 MOps
  ExpectedLatency: 510c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(2) %vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
  VS_32: 21 > 18(+ 0 livethru)
  LiveReg: SGPR8
  LiveReg: SGPR9
  LiveReg: SGPR10
  LiveReg: SGPR11
  Ready @525c
BotQ.A @525c
  Retired: 52
  Executed: 525c
  Critical: 52c, 52 MOps
  ExpectedLatency: 510c
  - Latency limited.
*** Final schedule for BB#0 ***
SU(2):   %vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
SU(3):   %vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
SU(7):   %vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
SU(4):   %vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
SU(5):   %vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
SU(6):   %vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
SU(8):   %vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
SU(9):   %vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
SU(10):   %vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
SU(11):   %vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
SU(0):   %vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
SU(1):   %vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
SU(12):   %vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
SU(13):   %vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
SU(14):   %vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
SU(15):   %vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
SU(19):   %vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
SU(20):   %vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
SU(16):   %vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
SU(17):   %vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
SU(21):   %vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
SU(22):   %vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
SU(23):   %vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
SU(24):   %vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
SU(25):   %vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
SU(26):   %vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
SU(27):   %vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
SU(28):   %vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
SU(30):   %vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
SU(29):   %vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
SU(31):   %vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
SU(32):   %vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
SU(33):   %vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
SU(18):   %vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
SU(37):   %vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
SU(38):   %vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
SU(34):   %vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
SU(35):   %vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
SU(36):   %vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
SU(39):   %vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
SU(40):   %vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
SU(41):   %vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
SU(43):   %vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
SU(42):   %vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
SU(44):   %vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
SU(48):   %vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
SU(45):   %vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
SU(46):   %vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
SU(47):   %vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
SU(49):   %vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
SU(50):   %vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
SU(51):   %vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
SU(52):   %vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
SU(53):   %vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
SU(54):   %vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
SU(55):   %vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
SU(56):   TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10

********** INTERVALS **********
EXEC_LO EMPTY
EXEC_HI EMPTY
VCC_LO [240r,240d:12)[320r,320d:10)[340r,340d:9)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@340r 10@320r 11@896r 12@240r
VCC_HI [240r,240d:12)[320r,320d:10)[340r,340d:9)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@340r 10@320r 11@896r 12@240r
SGPR2 [0B,128r:0)  0@0B-phi
SGPR3 [0B,128r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,196r:0)  0@0B-phi
VGPR0 [0B,200r:0)  0@0B-phi
%vreg1 [64r,192r:0)  0@64r
%vreg2 [48r,152r:0)  0@48r
%vreg3 [200r,240r:0)  0@200r
%vreg4 [196r,224r:0)  0@196r
%vreg5 [136r,340r:0)  0@136r
%vreg6 [144r,320r:0)  0@144r
%vreg7 [152r,896r:0)  0@152r
%vreg10 [160r,912r:0)  0@160r
%vreg12 [168r,336r:0)  0@168r
%vreg14 [176r,344r:0)  0@176r
%vreg15 [192r,208r:0)  0@192r
%vreg17 [208r,224r:0)  0@208r
%vreg18 [224r,240r:0)  0@224r
%vreg25 [344r,608r:0)  0@344r
%vreg32 [336r,368r:0)  0@336r
%vreg39 [400r,416r:0)  0@400r
%vreg40 [416r,432r:0)  0@416r
%vreg41 [432r,448r:0)  0@432r
%vreg42 [448r,640r:0)  0@448r
%vreg43 [464r,504r:0)  0@464r
%vreg45 [504r,648r:0)  0@504r
%vreg49 [528r,544r:0)  0@528r
%vreg52 [544r,640r:0)  0@544r
%vreg59 [648r,656r:0)  0@648r
%vreg65 [656r,664r:0)  0@656r
%vreg68 [672r,712r:0)  0@672r
%vreg71 [712r,832r:0)  0@712r
%vreg74 [720r,792r:0)  0@720r
%vreg76 [792r,800r:0)  0@792r
%vreg81 [808r,816r:0)  0@808r
%vreg84 [816r,848r:0)  0@816r
%vreg88 [832r,848r:0)  0@832r
%vreg89 [848r,864r:0)  0@848r
%vreg99 [240r,256r:0)  0@240r
%vreg100 [256r,896r:0)  0@256r
%vreg101 [896r,912r:0)  0@896r
%vreg102 [320r,336r:0)  0@320r
%vreg103 [340r,344r:0)  0@340r
%vreg105 [552r,880r:0)  0@552r
%vreg106 [880r,912r:0)  0@880r
%vreg107 [864r,880r:0)  0@864r
%vreg108 [624r,704r:0)  0@624r
%vreg109 [704r,824r:0)  0@704r
%vreg110 [824r,848r:0)  0@824r
%vreg111 [784r,816r:0)  0@784r
%vreg112 [608r,624r:0)  0@608r
%vreg114 [352r,384r:0)  0@352r
%vreg115 [384r,824r:0)  0@384r
%vreg116 [664r,704r:0)  0@664r
%vreg117 [496r,528r:0)  0@496r
%vreg118 [512r,528r:0)  0@512r
%vreg119 [368r,384r:0)  0@368r
%vreg123 [632r,648r:0)  0@632r
%vreg126 [640r,648r:0)  0@640r
%vreg131 [800r,808r:0)  0@800r
%vreg134 [128r,176r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
136B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
144B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
152B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
160B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
168B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
196B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
200B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
340B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
344B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
504B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
552B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
632B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
640B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
648B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
656B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
664B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
712B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
792B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
800B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
808B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
816B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
824B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
136B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
144B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
152B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
160B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
168B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
196B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
200B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
340B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
344B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
504B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
552B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
632B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
640B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
648B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
656B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
664B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
712B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
792B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
800B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
808B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
816B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
824B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After SI Fix CF Live Intervals ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
136B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
144B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
152B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
160B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
168B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
196B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
200B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
340B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
344B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
504B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
552B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
632B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
640B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
648B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
656B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
664B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
712B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
792B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
800B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
808B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
816B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
824B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.


block-frequency: remainder_intint
=================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: remainder_intint
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
136B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
144B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
152B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
160B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
168B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
196B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
200B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
340B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
344B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
504B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
552B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
632B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
640B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
648B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
656B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
664B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
712B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
792B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
800B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
808B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
816B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
824B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
136B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
144B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
152B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
160B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
168B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
196B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
200B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
340B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
344B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
504B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
552B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
632B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
640B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
648B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
656B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
664B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
712B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
792B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
800B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
808B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
816B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
824B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
136B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
144B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
152B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
160B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
168B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
196B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
200B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
340B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
344B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
504B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
552B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
632B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
640B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
648B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
656B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
664B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
712B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
792B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
800B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
808B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
816B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
824B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
136B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
144B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
152B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
160B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
168B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
196B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
200B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
340B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
344B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
504B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
552B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
632B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
640B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
648B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
656B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
664B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
712B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
792B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
800B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
808B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
816B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
824B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.

********** GREEDY REGISTER ALLOCATION **********
********** Function: remainder_intint
********** Compute Spill Weights **********
********** Function: remainder_intint
********** INTERVALS **********
EXEC_LO EMPTY
EXEC_HI EMPTY
VCC_LO [240r,240d:12)[320r,320d:10)[340r,340d:9)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@340r 10@320r 11@896r 12@240r
VCC_HI [240r,240d:12)[320r,320d:10)[340r,340d:9)[368r,368d:2)[512r,512d:3)[608r,608d:4)[632r,632d:1)[640r,640d:0)[704r,704d:7)[784r,784d:5)[824r,824d:6)[880r,880d:8)[896r,896d:11)  0@640r 1@632r 2@368r 3@512r 4@608r 5@784r 6@824r 7@704r 8@880r 9@340r 10@320r 11@896r 12@240r
SGPR2 [0B,128r:0)  0@0B-phi
SGPR3 [0B,128r:0)  0@0B-phi
SGPR4 [0B,64r:0)  0@0B-phi
SGPR5 [0B,64r:0)  0@0B-phi
SGPR6 [0B,64r:0)  0@0B-phi
SGPR7 [0B,64r:0)  0@0B-phi
SGPR8 [0B,48r:0)  0@0B-phi
SGPR9 [0B,48r:0)  0@0B-phi
SGPR10 [0B,48r:0)  0@0B-phi
SGPR11 [0B,48r:0)  0@0B-phi
SGPR12 [0B,196r:0)  0@0B-phi
VGPR0 [0B,200r:0)  0@0B-phi
%vreg1 [64r,192r:0)  0@64r
%vreg2 [48r,152r:0)  0@48r
%vreg3 [200r,240r:0)  0@200r
%vreg4 [196r,224r:0)  0@196r
%vreg5 [136r,340r:0)  0@136r
%vreg6 [144r,320r:0)  0@144r
%vreg7 [152r,896r:0)  0@152r
%vreg10 [160r,912r:0)  0@160r
%vreg12 [168r,336r:0)  0@168r
%vreg14 [176r,344r:0)  0@176r
%vreg15 [192r,208r:0)  0@192r
%vreg17 [208r,224r:0)  0@208r
%vreg18 [224r,240r:0)  0@224r
%vreg25 [344r,608r:0)  0@344r
%vreg32 [336r,368r:0)  0@336r
%vreg39 [400r,416r:0)  0@400r
%vreg40 [416r,432r:0)  0@416r
%vreg41 [432r,448r:0)  0@432r
%vreg42 [448r,640r:0)  0@448r
%vreg43 [464r,504r:0)  0@464r
%vreg45 [504r,648r:0)  0@504r
%vreg49 [528r,544r:0)  0@528r
%vreg52 [544r,640r:0)  0@544r
%vreg59 [648r,656r:0)  0@648r
%vreg65 [656r,664r:0)  0@656r
%vreg68 [672r,712r:0)  0@672r
%vreg71 [712r,832r:0)  0@712r
%vreg74 [720r,792r:0)  0@720r
%vreg76 [792r,800r:0)  0@792r
%vreg81 [808r,816r:0)  0@808r
%vreg84 [816r,848r:0)  0@816r
%vreg88 [832r,848r:0)  0@832r
%vreg89 [848r,864r:0)  0@848r
%vreg99 [240r,256r:0)  0@240r
%vreg100 [256r,896r:0)  0@256r
%vreg101 [896r,912r:0)  0@896r
%vreg102 [320r,336r:0)  0@320r
%vreg103 [340r,344r:0)  0@340r
%vreg105 [552r,880r:0)  0@552r
%vreg106 [880r,912r:0)  0@880r
%vreg107 [864r,880r:0)  0@864r
%vreg108 [624r,704r:0)  0@624r
%vreg109 [704r,824r:0)  0@704r
%vreg110 [824r,848r:0)  0@824r
%vreg111 [784r,816r:0)  0@784r
%vreg112 [608r,624r:0)  0@608r
%vreg114 [352r,384r:0)  0@352r
%vreg115 [384r,824r:0)  0@384r
%vreg116 [664r,704r:0)  0@664r
%vreg117 [496r,528r:0)  0@496r
%vreg118 [512r,528r:0)  0@512r
%vreg119 [368r,384r:0)  0@368r
%vreg123 [632r,648r:0)  0@632r
%vreg126 [640r,648r:0)  0@640r
%vreg131 [800r,808r:0)  0@800r
%vreg134 [128r,176r:0)  0@128r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 in %vreg1, %SGPR8_SGPR9_SGPR10_SGPR11 in %vreg2, %VGPR0 in %vreg3, %SGPR12 in %vreg4, %SGPR2_SGPR3 in %vreg134

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %VGPR0 %SGPR12 %SGPR2_SGPR3 %SGPR2_SGPR3 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
136B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
144B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
152B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 8; SGPR_32:%vreg7 SReg_128:%vreg2
160B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
168B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1, 4; SGPR_32:%vreg15 SReg_128:%vreg1
196B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
200B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
208B		%vreg17<def> = S_MIN_U32 %vreg15, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17, %vreg4; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18, %vreg3, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102, %vreg12, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
340B		%vreg103<def> = V_ADD_I32_e32 %vreg5, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
344B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103, %vreg14, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119, %vreg114, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
504B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117, %vreg118, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
552B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
632B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
640B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
648B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126, %vreg123, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
656B		%vreg65<def> = V_MUL_HI_U32 %vreg59, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
664B		%vreg116<def> = V_MUL_LO_I32 %vreg65, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116, %vreg108, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
712B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
792B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
800B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
808B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
816B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111, %vreg109, %vreg81, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
824B		%vreg110<def> = V_ADD_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84, %vreg110, %vreg88, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106, 0, -1, 0, 0, 0, 4, 7, %vreg101, %vreg10, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM

# End machine code for function remainder_intint.


selectOrSplit SReg_128:%vreg2 [48r,152r:0)  0@48r w=8.015873e-03
AllocationOrder(SReg_128) = [ %SGPR0_SGPR1_SGPR2_SGPR3 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR12_SGPR13_SGPR14_SGPR15 %SGPR16_SGPR17_SGPR18_SGPR19 %SGPR20_SGPR21_SGPR22_SGPR23 %SGPR24_SGPR25_SGPR26_SGPR27 %SGPR28_SGPR29_SGPR30_SGPR31 %SGPR32_SGPR33_SGPR34_SGPR35 %SGPR36_SGPR37_SGPR38_SGPR39 %SGPR40_SGPR41_SGPR42_SGPR43 %SGPR44_SGPR45_SGPR46_SGPR47 %SGPR48_SGPR49_SGPR50_SGPR51 %SGPR52_SGPR53_SGPR54_SGPR55 %SGPR56_SGPR57_SGPR58_SGPR59 %SGPR60_SGPR61_SGPR62_SGPR63 %SGPR64_SGPR65_SGPR66_SGPR67 %SGPR68_SGPR69_SGPR70_SGPR71 %SGPR72_SGPR73_SGPR74_SGPR75 %SGPR76_SGPR77_SGPR78_SGPR79 %SGPR80_SGPR81_SGPR82_SGPR83 %SGPR84_SGPR85_SGPR86_SGPR87 %SGPR88_SGPR89_SGPR90_SGPR91 %SGPR92_SGPR93_SGPR94_SGPR95 %SGPR96_SGPR97_SGPR98_SGPR99 ]
hints: %SGPR8_SGPR9_SGPR10_SGPR11
assigning %vreg2 to %SGPR8_SGPR9_SGPR10_SGPR11: SGPR8 [48r,152r:0)  0@48r SGPR9 [48r,152r:0)  0@48r SGPR10 [48r,152r:0)  0@48r SGPR11 [48r,152r:0)  0@48r

selectOrSplit SReg_128:%vreg1 [64r,192r:0)  0@64r w=3.825758e-03
hints: %SGPR4_SGPR5_SGPR6_SGPR7
assigning %vreg1 to %SGPR4_SGPR5_SGPR6_SGPR7: SGPR4 [64r,192r:0)  0@64r SGPR5 [64r,192r:0)  0@64r SGPR6 [64r,192r:0)  0@64r SGPR7 [64r,192r:0)  0@64r

selectOrSplit SReg_64:%vreg134 [128r,176r:0)  0@128r w=9.017857e-03
AllocationOrder(SReg_64) = [ %SGPR0_SGPR1 %SGPR2_SGPR3 %SGPR4_SGPR5 %SGPR6_SGPR7 %SGPR8_SGPR9 %SGPR10_SGPR11 %SGPR12_SGPR13 %SGPR14_SGPR15 %SGPR16_SGPR17 %SGPR18_SGPR19 %SGPR20_SGPR21 %SGPR22_SGPR23 %SGPR24_SGPR25 %SGPR26_SGPR27 %SGPR28_SGPR29 %SGPR30_SGPR31 %SGPR32_SGPR33 %SGPR34_SGPR35 %SGPR36_SGPR37 %SGPR38_SGPR39 %SGPR40_SGPR41 %SGPR42_SGPR43 %SGPR44_SGPR45 %SGPR46_SGPR47 %SGPR48_SGPR49 %SGPR50_SGPR51 %SGPR52_SGPR53 %SGPR54_SGPR55 %SGPR56_SGPR57 %SGPR58_SGPR59 %SGPR60_SGPR61 %SGPR62_SGPR63 %SGPR64_SGPR65 %SGPR66_SGPR67 %SGPR68_SGPR69 %SGPR70_SGPR71 %SGPR72_SGPR73 %SGPR74_SGPR75 %SGPR76_SGPR77 %SGPR78_SGPR79 %SGPR80_SGPR81 %SGPR82_SGPR83 %SGPR84_SGPR85 %SGPR86_SGPR87 %SGPR88_SGPR89 %SGPR90_SGPR91 %SGPR92_SGPR93 %SGPR94_SGPR95 %SGPR96_SGPR97 %SGPR98_SGPR99 %SGPR100_SGPR101 %VCC ]
hints: %SGPR2_SGPR3
assigning %vreg134 to %SGPR2_SGPR3: SGPR2 [128r,176r:0)  0@128r SGPR3 [128r,176r:0)  0@128r

selectOrSplit SReg_32:%vreg4 [196r,224r:0)  0@196r w=4.719626e-03
AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
hints: %SGPR12
assigning %vreg4 to %SGPR12: SGPR12 [196r,224r:0)  0@196r

selectOrSplit VGPR_32:%vreg3 [200r,240r:0)  0@200r w=4.590909e-03
AllocationOrder(VGPR_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 ]
hints: %VGPR0
assigning %vreg3 to %VGPR0: VGPR0 [200r,240r:0)  0@200r

selectOrSplit SReg_64:%vreg45 [504r,648r:0)  0@504r w=5.514706e-03
hints: %VCC
missed hint %VCC
assigning %vreg45 to %SGPR0_SGPR1: SGPR0 [504r,648r:0)  0@504r SGPR1 [504r,648r:0)  0@504r

selectOrSplit SReg_64:%vreg68 [672r,712r:0)  0@672r w=4.545454e-03
hints: %VCC
missed hint %VCC
assigning %vreg68 to %SGPR0_SGPR1: SGPR0 [672r,712r:0)  0@672r SGPR1 [672r,712r:0)  0@672r

selectOrSplit SReg_64:%vreg74 [720r,792r:0)  0@720r w=4.237288e-03
hints: %VCC
missed hint %VCC
assigning %vreg74 to %SGPR0_SGPR1: SGPR0 [720r,792r:0)  0@720r SGPR1 [720r,792r:0)  0@720r

selectOrSplit SReg_64:%vreg81 [808r,816r:0)  0@808r w=inf
hints: %VCC
assigning %vreg81 to %VCC: VCC_LO [808r,816r:0)  0@808r VCC_HI [808r,816r:0)  0@808r

selectOrSplit SReg_64:%vreg88 [832r,848r:0)  0@832r w=inf
hints: %VCC
assigning %vreg88 to %VCC: VCC_LO [832r,848r:0)  0@832r VCC_HI [832r,848r:0)  0@832r

selectOrSplit SGPR_32:%vreg5 [136r,340r:0)  0@136r w=3.311258e-03
AllocationOrder(SGPR_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 ]
assigning %vreg5 to %SGPR0: SGPR0 [136r,340r:0)  0@136r

selectOrSplit SGPR_32:%vreg6 [144r,320r:0)  0@144r w=3.472222e-03
assigning %vreg6 to %SGPR1: SGPR1 [144r,320r:0)  0@144r

selectOrSplit SGPR_32:%vreg7 [152r,896r:0)  0@152r w=1.748252e-03
assigning %vreg7 to %SGPR8: SGPR8 [152r,896r:0)  0@152r

selectOrSplit SReg_128:%vreg10 [160r,912r:0)  0@160r w=1.736111e-03
assigning %vreg10 to %SGPR16_SGPR17_SGPR18_SGPR19: SGPR16 [160r,912r:0)  0@160r SGPR17 [160r,912r:0)  0@160r SGPR18 [160r,912r:0)  0@160r SGPR19 [160r,912r:0)  0@160r

selectOrSplit SReg_128:%vreg12 [168r,336r:0)  0@168r w=3.521127e-03
assigning %vreg12 to %SGPR20_SGPR21_SGPR22_SGPR23: SGPR20 [168r,336r:0)  0@168r SGPR21 [168r,336r:0)  0@168r SGPR22 [168r,336r:0)  0@168r SGPR23 [168r,336r:0)  0@168r

selectOrSplit SReg_128:%vreg14 [176r,344r:0)  0@176r w=3.521127e-03
assigning %vreg14 to %SGPR24_SGPR25_SGPR26_SGPR27: SGPR24 [176r,344r:0)  0@176r SGPR25 [176r,344r:0)  0@176r SGPR26 [176r,344r:0)  0@176r SGPR27 [176r,344r:0)  0@176r

selectOrSplit SGPR_32:%vreg15 [192r,208r:0)  0@192r w=4.807692e-03
assigning %vreg15 to %SGPR2: SGPR2 [192r,208r:0)  0@192r

selectOrSplit SReg_32:%vreg17 [208r,224r:0)  0@208r w=inf
assigning %vreg17 to %SGPR2: SGPR2 [208r,224r:0)  0@208r

selectOrSplit SReg_32:%vreg18 [224r,240r:0)  0@224r w=inf
assigning %vreg18 to %SGPR2: SGPR2 [224r,240r:0)  0@224r

selectOrSplit VGPR_32:%vreg99 [240r,256r:0)  0@240r w=inf
assigning %vreg99 to %VGPR0: VGPR0 [240r,256r:0)  0@240r

selectOrSplit VGPR_32:%vreg100 [256r,896r:0)  0@256r w=3.846154e-03
assigning %vreg100 to %VGPR0: VGPR0 [256r,896r:0)  0@256r

selectOrSplit VGPR_32:%vreg102 [320r,336r:0)  0@320r w=inf
assigning %vreg102 to %VGPR1: VGPR1 [320r,336r:0)  0@320r

selectOrSplit VGPR_32:%vreg32 [336r,368r:0)  0@336r w=6.944444e-03
assigning %vreg32 to %VGPR1: VGPR1 [336r,368r:0)  0@336r

selectOrSplit VGPR_32:%vreg103 [340r,344r:0)  0@340r w=inf
assigning %vreg103 to %VGPR2: VGPR2 [340r,344r:0)  0@340r

selectOrSplit VGPR_32:%vreg25 [344r,608r:0)  0@344r w=4.518072e-03
assigning %vreg25 to %VGPR2: VGPR2 [344r,608r:0)  0@344r

selectOrSplit VGPR_32:%vreg114 [352r,384r:0)  0@352r w=6.944444e-03
assigning %vreg114 to %VGPR3: VGPR3 [352r,384r:0)  0@352r

selectOrSplit VGPR_32:%vreg119 [368r,384r:0)  0@368r w=inf
assigning %vreg119 to %VGPR1: VGPR1 [368r,384r:0)  0@368r

selectOrSplit VGPR_32:%vreg115 [384r,824r:0)  0@384r w=9.523810e-03
assigning %vreg115 to %VGPR1: VGPR1 [384r,824r:0)  0@384r

selectOrSplit VGPR_32:%vreg39 [400r,416r:0)  0@400r w=inf
assigning %vreg39 to %VGPR3: VGPR3 [400r,416r:0)  0@400r

selectOrSplit VGPR_32:%vreg40 [416r,432r:0)  0@416r w=inf
assigning %vreg40 to %VGPR3: VGPR3 [416r,432r:0)  0@416r

selectOrSplit VGPR_32:%vreg41 [432r,448r:0)  0@432r w=inf
assigning %vreg41 to %VGPR3: VGPR3 [432r,448r:0)  0@432r

selectOrSplit VGPR_32:%vreg42 [448r,640r:0)  0@448r w=1.013513e-02
assigning %vreg42 to %VGPR3: VGPR3 [448r,640r:0)  0@448r

selectOrSplit VGPR_32:%vreg43 [464r,504r:0)  0@464r w=4.545454e-03
assigning %vreg43 to %VGPR4: VGPR4 [464r,504r:0)  0@464r

selectOrSplit VGPR_32:%vreg117 [496r,528r:0)  0@496r w=6.944444e-03
assigning %vreg117 to %VGPR5: VGPR5 [496r,528r:0)  0@496r

selectOrSplit VGPR_32:%vreg118 [512r,528r:0)  0@512r w=inf
assigning %vreg118 to %VGPR4: VGPR4 [512r,528r:0)  0@512r

selectOrSplit VGPR_32:%vreg49 [528r,544r:0)  0@528r w=inf
assigning %vreg49 to %VGPR4: VGPR4 [528r,544r:0)  0@528r

selectOrSplit VGPR_32:%vreg52 [544r,640r:0)  0@544r w=6.048387e-03
assigning %vreg52 to %VGPR4: VGPR4 [544r,640r:0)  0@544r

selectOrSplit VGPR_32:%vreg105 [552r,880r:0)  0@552r w=6.868132e-03
assigning %vreg105 to %VGPR5: VGPR5 [552r,880r:0)  0@552r

selectOrSplit VGPR_32:%vreg112 [608r,624r:0)  0@608r w=inf
assigning %vreg112 to %VGPR2: VGPR2 [608r,624r:0)  0@608r

selectOrSplit VGPR_32:%vreg108 [624r,704r:0)  0@624r w=8.333334e-03
assigning %vreg108 to %VGPR2: VGPR2 [624r,704r:0)  0@624r

selectOrSplit VGPR_32:%vreg123 [632r,648r:0)  0@632r w=4.807692e-03
assigning %vreg123 to %VGPR6: VGPR6 [632r,648r:0)  0@632r

selectOrSplit VGPR_32:%vreg126 [640r,648r:0)  0@640r w=inf
assigning %vreg126 to %VGPR3: VGPR3 [640r,648r:0)  0@640r

selectOrSplit VGPR_32:%vreg59 [648r,656r:0)  0@648r w=inf
assigning %vreg59 to %VGPR3: VGPR3 [648r,656r:0)  0@648r

selectOrSplit VGPR_32:%vreg65 [656r,664r:0)  0@656r w=inf
assigning %vreg65 to %VGPR3: VGPR3 [656r,664r:0)  0@656r

selectOrSplit VGPR_32:%vreg116 [664r,704r:0)  0@664r w=6.818182e-03
assigning %vreg116 to %VGPR3: VGPR3 [664r,704r:0)  0@664r

selectOrSplit VGPR_32:%vreg109 [704r,824r:0)  0@704r w=9.615385e-03
assigning %vreg109 to %VGPR2: VGPR2 [704r,824r:0)  0@704r

selectOrSplit VGPR_32:%vreg71 [712r,832r:0)  0@712r w=5.769231e-03
assigning %vreg71 to %VGPR3: VGPR3 [712r,832r:0)  0@712r

selectOrSplit VGPR_32:%vreg111 [784r,816r:0)  0@784r w=4.629630e-03
assigning %vreg111 to %VGPR4: VGPR4 [784r,816r:0)  0@784r

selectOrSplit VGPR_32:%vreg76 [792r,800r:0)  0@792r w=inf
assigning %vreg76 to %VGPR6: VGPR6 [792r,800r:0)  0@792r

selectOrSplit VGPR_32:%vreg131 [800r,808r:0)  0@800r w=inf
assigning %vreg131 to %VGPR6: VGPR6 [800r,808r:0)  0@800r

selectOrSplit VGPR_32:%vreg84 [816r,848r:0)  0@816r w=4.629630e-03
assigning %vreg84 to %VGPR4: VGPR4 [816r,848r:0)  0@816r

selectOrSplit VGPR_32:%vreg110 [824r,848r:0)  0@824r w=4.716981e-03
assigning %vreg110 to %VGPR1: VGPR1 [824r,848r:0)  0@824r

selectOrSplit VGPR_32:%vreg89 [848r,864r:0)  0@848r w=inf
assigning %vreg89 to %VGPR1: VGPR1 [848r,864r:0)  0@848r

selectOrSplit VGPR_32:%vreg107 [864r,880r:0)  0@864r w=inf
assigning %vreg107 to %VGPR1: VGPR1 [864r,880r:0)  0@864r

selectOrSplit VGPR_32:%vreg106 [880r,912r:0)  0@880r w=4.629630e-03
assigning %vreg106 to %VGPR1: VGPR1 [880r,912r:0)  0@880r

selectOrSplit VGPR_32:%vreg101 [896r,912r:0)  0@896r w=inf
assigning %vreg101 to %VGPR0: VGPR0 [896r,912r:0)  0@896r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: remainder_intint
********** REGISTER MAP **********
[%vreg1 -> %SGPR4_SGPR5_SGPR6_SGPR7] SReg_128
[%vreg2 -> %SGPR8_SGPR9_SGPR10_SGPR11] SReg_128
[%vreg3 -> %VGPR0] VGPR_32
[%vreg4 -> %SGPR12] SReg_32
[%vreg5 -> %SGPR0] SGPR_32
[%vreg6 -> %SGPR1] SGPR_32
[%vreg7 -> %SGPR8] SGPR_32
[%vreg10 -> %SGPR16_SGPR17_SGPR18_SGPR19] SReg_128
[%vreg12 -> %SGPR20_SGPR21_SGPR22_SGPR23] SReg_128
[%vreg14 -> %SGPR24_SGPR25_SGPR26_SGPR27] SReg_128
[%vreg15 -> %SGPR2] SGPR_32
[%vreg17 -> %SGPR2] SReg_32
[%vreg18 -> %SGPR2] SReg_32
[%vreg25 -> %VGPR2] VGPR_32
[%vreg32 -> %VGPR1] VGPR_32
[%vreg39 -> %VGPR3] VGPR_32
[%vreg40 -> %VGPR3] VGPR_32
[%vreg41 -> %VGPR3] VGPR_32
[%vreg42 -> %VGPR3] VGPR_32
[%vreg43 -> %VGPR4] VGPR_32
[%vreg45 -> %SGPR0_SGPR1] SReg_64
[%vreg49 -> %VGPR4] VGPR_32
[%vreg52 -> %VGPR4] VGPR_32
[%vreg59 -> %VGPR3] VGPR_32
[%vreg65 -> %VGPR3] VGPR_32
[%vreg68 -> %SGPR0_SGPR1] SReg_64
[%vreg71 -> %VGPR3] VGPR_32
[%vreg74 -> %SGPR0_SGPR1] SReg_64
[%vreg76 -> %VGPR6] VGPR_32
[%vreg81 -> %VCC] SReg_64
[%vreg84 -> %VGPR4] VGPR_32
[%vreg88 -> %VCC] SReg_64
[%vreg89 -> %VGPR1] VGPR_32
[%vreg99 -> %VGPR0] VGPR_32
[%vreg100 -> %VGPR0] VGPR_32
[%vreg101 -> %VGPR0] VGPR_32
[%vreg102 -> %VGPR1] VGPR_32
[%vreg103 -> %VGPR2] VGPR_32
[%vreg105 -> %VGPR5] VGPR_32
[%vreg106 -> %VGPR1] VGPR_32
[%vreg107 -> %VGPR1] VGPR_32
[%vreg108 -> %VGPR2] VGPR_32
[%vreg109 -> %VGPR2] VGPR_32
[%vreg110 -> %VGPR1] VGPR_32
[%vreg111 -> %VGPR4] VGPR_32
[%vreg112 -> %VGPR2] VGPR_32
[%vreg114 -> %VGPR3] VGPR_32
[%vreg115 -> %VGPR1] VGPR_32
[%vreg116 -> %VGPR3] VGPR_32
[%vreg117 -> %VGPR5] VGPR_32
[%vreg118 -> %VGPR4] VGPR_32
[%vreg119 -> %VGPR1] VGPR_32
[%vreg123 -> %VGPR6] VGPR_32
[%vreg126 -> %VGPR3] VGPR_32
[%vreg131 -> %VGPR6] VGPR_32
[%vreg134 -> %SGPR2_SGPR3] SReg_64

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
48B		%vreg2<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11; SReg_128:%vreg2
64B		%vreg1<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7; SReg_128:%vreg1
128B		%vreg134<def> = COPY %SGPR2_SGPR3; SReg_64:%vreg134
136B		%vreg5<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 0; SGPR_32:%vreg5 SReg_128:%vreg2
144B		%vreg6<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2, 4; SGPR_32:%vreg6 SReg_128:%vreg2
152B		%vreg7<def> = S_BUFFER_LOAD_DWORD_IMM %vreg2<kill>, 8; SGPR_32:%vreg7 SReg_128:%vreg2
160B		%vreg10<def> = S_LOAD_DWORDX4_IMM %vreg134, 96; SReg_128:%vreg10 SReg_64:%vreg134
168B		%vreg12<def> = S_LOAD_DWORDX4_IMM %vreg134, 88; SReg_128:%vreg12 SReg_64:%vreg134
176B		%vreg14<def> = S_LOAD_DWORDX4_IMM %vreg134<kill>, 80; SReg_128:%vreg14 SReg_64:%vreg134
192B		%vreg15<def> = S_BUFFER_LOAD_DWORD_IMM %vreg1<kill>, 4; SGPR_32:%vreg15 SReg_128:%vreg1
196B		%vreg4<def> = COPY %SGPR12; SReg_32:%vreg4
200B		%vreg3<def> = COPY %VGPR0; VGPR_32:%vreg3
208B		%vreg17<def> = S_MIN_U32 %vreg15<kill>, 65535, %SCC<imp-def,dead>; SReg_32:%vreg17 SGPR_32:%vreg15
224B		%vreg18<def> = S_MUL_I32 %vreg17<kill>, %vreg4<kill>; SReg_32:%vreg18,%vreg17,%vreg4
240B		%vreg99<def> = V_ADD_I32_e32 %vreg18<kill>, %vreg3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg3 SReg_32:%vreg18
256B		%vreg100<def> = V_LSHLREV_B32_e32 2, %vreg99<kill>, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg99
320B		%vreg102<def> = V_ADD_I32_e32 %vreg6<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg100 SGPR_32:%vreg6
336B		%vreg32<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg102<kill>, %vreg12<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)] VGPR_32:%vreg32,%vreg102 SReg_128:%vreg12
340B		%vreg103<def> = V_ADD_I32_e32 %vreg5<kill>, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg100 SGPR_32:%vreg5
344B		%vreg25<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %vreg103<kill>, %vreg14<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)] VGPR_32:%vreg25,%vreg103 SReg_128:%vreg14
352B		%vreg114<def> = V_ASHRREV_I32_e32 31, %vreg32, %EXEC<imp-use>; VGPR_32:%vreg114,%vreg32
368B		%vreg119<def> = V_ADD_I32_e32 %vreg32<kill>, %vreg114, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg119,%vreg32,%vreg114
384B		%vreg115<def> = V_XOR_B32_e32 %vreg119<kill>, %vreg114<kill>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg119,%vreg114
400B		%vreg39<def> = V_CVT_F32_U32_e32 %vreg115, %EXEC<imp-use>; VGPR_32:%vreg39,%vreg115
416B		%vreg40<def> = V_RCP_IFLAG_F32_e32 %vreg39<kill>, %EXEC<imp-use>; VGPR_32:%vreg40,%vreg39
432B		%vreg41<def> = V_MUL_F32_e32 1333788672, %vreg40<kill>, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg40
448B		%vreg42<def> = V_CVT_U32_F32_e32 %vreg41<kill>, %EXEC<imp-use>; VGPR_32:%vreg42,%vreg41
464B		%vreg43<def> = V_MUL_HI_U32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg43,%vreg42,%vreg115
496B		%vreg117<def> = V_MUL_LO_I32 %vreg42, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg117,%vreg42,%vreg115
504B		%vreg45<def> = V_CMP_EQ_I32_e64 0, %vreg43<kill>, %EXEC<imp-use>; SReg_64:%vreg45 VGPR_32:%vreg43
512B		%vreg118<def> = V_SUB_I32_e32 0, %vreg117, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg117
528B		%vreg49<def> = V_CNDMASK_B32_e64 %vreg117<kill>, %vreg118<kill>, %vreg45, %EXEC<imp-use>; VGPR_32:%vreg49,%vreg117,%vreg118 SReg_64:%vreg45
544B		%vreg52<def> = V_MUL_HI_U32 %vreg49<kill>, %vreg42, %EXEC<imp-use>; VGPR_32:%vreg52,%vreg49,%vreg42
552B		%vreg105<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg105,%vreg25
608B		%vreg112<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg105, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg112,%vreg25,%vreg105
624B		%vreg108<def> = V_XOR_B32_e32 %vreg112<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg112,%vreg105
632B		%vreg123<def> = V_ADD_I32_e32 %vreg52, %vreg42, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg52,%vreg42
640B		%vreg126<def> = V_SUBREV_I32_e32 %vreg52<kill>, %vreg42<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg126,%vreg52,%vreg42
648B		%vreg59<def> = V_CNDMASK_B32_e64 %vreg126<kill>, %vreg123<kill>, %vreg45<kill>, %EXEC<imp-use>; VGPR_32:%vreg59,%vreg126,%vreg123 SReg_64:%vreg45
656B		%vreg65<def> = V_MUL_HI_U32 %vreg59<kill>, %vreg108, %EXEC<imp-use>; VGPR_32:%vreg65,%vreg59,%vreg108
664B		%vreg116<def> = V_MUL_LO_I32 %vreg65<kill>, %vreg115, %EXEC<imp-use>; VGPR_32:%vreg116,%vreg65,%vreg115
672B		%vreg68<def> = V_CMP_GE_U32_e64 %vreg108, %vreg116, %EXEC<imp-use>; SReg_64:%vreg68 VGPR_32:%vreg108,%vreg116
704B		%vreg109<def> = V_SUBREV_I32_e32 %vreg116<kill>, %vreg108<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg116,%vreg108
712B		%vreg71<def> = V_CNDMASK_B32_e64 0, -1, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg71 SReg_64:%vreg68
720B		%vreg74<def> = V_CMP_GE_U32_e64 %vreg109, %vreg115, %EXEC<imp-use>; SReg_64:%vreg74 VGPR_32:%vreg109,%vreg115
784B		%vreg111<def> = V_SUBREV_I32_e32 %vreg115, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg115,%vreg109
792B		%vreg76<def> = V_CNDMASK_B32_e64 0, -1, %vreg74<kill>, %EXEC<imp-use>; VGPR_32:%vreg76 SReg_64:%vreg74
800B		%vreg131<def> = V_AND_B32_e32 %vreg71, %vreg76<kill>, %EXEC<imp-use>; VGPR_32:%vreg131,%vreg71,%vreg76
808B		%vreg81<def> = V_CMP_EQ_I32_e64 0, %vreg131<kill>, %EXEC<imp-use>; SReg_64:%vreg81 VGPR_32:%vreg131
816B		%vreg84<def> = V_CNDMASK_B32_e64 %vreg111<kill>, %vreg109, %vreg81<kill>, %EXEC<imp-use>; VGPR_32:%vreg84,%vreg111,%vreg109 SReg_64:%vreg81
824B		%vreg110<def> = V_ADD_I32_e32 %vreg115<kill>, %vreg109<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg115,%vreg109
832B		%vreg88<def> = V_CMP_EQ_I32_e64 0, %vreg71<kill>, %EXEC<imp-use>; SReg_64:%vreg88 VGPR_32:%vreg71
848B		%vreg89<def> = V_CNDMASK_B32_e64 %vreg84<kill>, %vreg110<kill>, %vreg88<kill>, %EXEC<imp-use>; VGPR_32:%vreg89,%vreg84,%vreg110 SReg_64:%vreg88
864B		%vreg107<def> = V_XOR_B32_e32 %vreg89<kill>, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg89,%vreg105
880B		%vreg106<def> = V_SUB_I32_e32 %vreg107<kill>, %vreg105<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg107,%vreg105
896B		%vreg101<def> = V_ADD_I32_e32 %vreg7<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg100 SGPR_32:%vreg7
912B		TBUFFER_STORE_FORMAT_X %vreg106<kill>, 0, -1, 0, 0, 0, 4, 7, %vreg101<kill>, %vreg10<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)] VGPR_32:%vreg106,%vreg101 SReg_128:%vreg10
928B		S_ENDPGM
> %SGPR8_SGPR9_SGPR10_SGPR11<def> = COPY %SGPR8_SGPR9_SGPR10_SGPR11
Deleting identity copy.
> %SGPR4_SGPR5_SGPR6_SGPR7<def> = COPY %SGPR4_SGPR5_SGPR6_SGPR7
Deleting identity copy.
> %SGPR2_SGPR3<def> = COPY %SGPR2_SGPR3
Deleting identity copy.
> %SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
> %SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
> %SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
> %SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
> %SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
> %SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
> %SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
> %SGPR12<def> = COPY %SGPR12
Deleting identity copy.
> %VGPR0<def> = COPY %VGPR0
Deleting identity copy.
> %SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
> %SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
> %VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
> %VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
> %VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
> %VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
> %VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
> %VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
> %VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
> %VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
> %VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
> %VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
> %VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
> %SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
> %VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
> %VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
> %VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
> %VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
> %VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
> %VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
> %VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
> %SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
> %VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
> %SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
> %VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
> %VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
> %VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR6<kill>, %EXEC<imp-use>
> %VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
> %VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR3<kill>, %EXEC<imp-use>
> %VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
> %VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
> %VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
> S_ENDPGM
# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
136B		%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
144B		%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
152B		%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
160B		%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
168B		%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
176B		%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
192B		%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
208B		%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
224B		%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
240B		%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
256B		%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
320B		%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
336B		%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
340B		%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
344B		%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
352B		%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
368B		%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
384B		%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
400B		%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
416B		%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
432B		%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
448B		%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
464B		%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
496B		%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
504B		%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
512B		%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
528B		%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
544B		%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
552B		%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
608B		%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
624B		%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
632B		%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
640B		%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
648B		%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
656B		%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
664B		%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
672B		%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
704B		%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
712B		%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
720B		%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
784B		%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
792B		%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
800B		%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
808B		%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR6<kill>, %EXEC<imp-use>
816B		%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
824B		%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
832B		%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR3<kill>, %EXEC<imp-use>
848B		%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
864B		%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
880B		%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
896B		%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
912B		TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
928B		S_ENDPGM

# End machine code for function remainder_intint.

********** Stack Slot Coloring **********
********** Function: remainder_intint
# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR6<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.

******** Post-regalloc Machine LICM: remainder_intint ********
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR6<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.

Shrinking %VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR6<kill>, %EXEC<imp-use>
e32 MI = V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>

Shrinking %VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR3<kill>, %EXEC<imp-use>
e32 MI = V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>


block-frequency: remainder_intint
=================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: remainder_intint
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.

MCP: CopyPropagateBlock entry
# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.

Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: remainder_intint
# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.


block-frequency: remainder_intint
=================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: remainder_intint
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.

********** COMPUTING STACKMAP LIVENESS: remainder_intint **********
# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR4_SGPR5_SGPR6_SGPR7, %SGPR8_SGPR9_SGPR10_SGPR11, %VGPR0, %SGPR12, %SGPR2_SGPR3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR12 %VGPR0 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR2_SGPR3
	%SGPR0<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 0
	%SGPR1<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11, 4
	%SGPR8<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR8_SGPR9_SGPR10_SGPR11<kill>, 8
	%SGPR16_SGPR17_SGPR18_SGPR19<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 96
	%SGPR20_SGPR21_SGPR22_SGPR23<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3, 88
	%SGPR24_SGPR25_SGPR26_SGPR27<def> = S_LOAD_DWORDX4_IMM %SGPR2_SGPR3<kill>, 80
	%SGPR2<def> = S_BUFFER_LOAD_DWORD_IMM %SGPR4_SGPR5_SGPR6_SGPR7<kill>, 4
	S_WAITCNT 127
	%SGPR2<def> = S_MIN_U32 %SGPR2<kill>, 65535, %SCC<imp-def,dead>
	%SGPR2<def> = S_MUL_I32 %SGPR2<kill>, %SGPR12<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR2<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_LSHLREV_B32_e32 2, %VGPR0<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %SGPR1<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR1<kill>, %SGPR20_SGPR21_SGPR22_SGPR23<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx1(addrspace=1)]
	%VGPR2<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = TBUFFER_LOAD_FORMAT_X 0, -1, 0, 0, 0, 4, 7, %VGPR2<kill>, %SGPR24_SGPR25_SGPR26_SGPR27<kill>, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%pac.arrayidx(addrspace=1)]
	S_WAITCNT 1905
	%VGPR3<def> = V_ASHRREV_I32_e32 31, %VGPR1, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_F32_U32_e32 %VGPR1, %EXEC<imp-use>
	%VGPR3<def> = V_RCP_IFLAG_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_F32_e32 1333788672, %VGPR3<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_CVT_U32_F32_e32 %VGPR3<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_LO_I32 %VGPR3, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_SUB_I32_e32 0, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR5<kill>, %VGPR4<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	S_WAITCNT 1904
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR4, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 %VGPR3<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_HI_U32 %VGPR3<kill>, %VGPR2, %EXEC<imp-use>
	%VGPR3<def> = V_MUL_LO_I32 %VGPR3<kill>, %VGPR1, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR3, %EXEC<imp-use>
	%VGPR2<def> = V_SUBREV_I32_e32 %VGPR3<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR2, %VGPR1, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR1, %VGPR2, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_AND_B32_e32 %VGPR3, %VGPR6<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR6<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR2, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_ADD_I32_e32 %VGPR1<kill>, %VGPR2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR3<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR1<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR1<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR1<def> = V_XOR_B32_e32 %VGPR1<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR1<def> = V_SUB_I32_e32 %VGPR1<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR8<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	TBUFFER_STORE_FORMAT_X %VGPR1<kill>, 0, -1, 0, 0, 0, 4, 7, %VGPR0<kill>, %SGPR16_SGPR17_SGPR18_SGPR19<kill>, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%pac.arrayidx2(addrspace=1)]
	S_ENDPGM

# End machine code for function remainder_intint.


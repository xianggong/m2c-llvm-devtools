Args: /home/xgong/Develop/llvm/build/bin/llc -march=amdgcn -mcpu=verde remainder_intint_ref.ll --print-after-all --debug 

Features:+promote-alloca,+fp64-denormals,
CPU:verde

Inliner visiting SCC: remainder_intint: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
Inliner visiting SCC: llvm.r600.read.tgid.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1
Inliner visiting SCC: llvm.r600.read.local.size.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1
Inliner visiting SCC: llvm.r600.read.tidig.x: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1
Inliner visiting SCC: llvm.SI.if: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare { i1, i64 } @llvm.SI.if(i1)
Inliner visiting SCC: llvm.SI.else: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare { i1, i64 } @llvm.SI.else(i64)
Inliner visiting SCC: llvm.SI.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.break(i64)
Inliner visiting SCC: llvm.SI.if.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.if.break(i1, i64)
Inliner visiting SCC: llvm.SI.else.break: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i64 @llvm.SI.else.break(i64, i64)
Inliner visiting SCC: llvm.SI.loop: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare i1 @llvm.SI.loop(i64)
Inliner visiting SCC: llvm.SI.end.cf: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
declare void @llvm.SI.end.cf(i64)
Inliner visiting SCC: INDIRECTNODE: 0 call sites.
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'remainder_intint_ref.ll'
target datalayout = "e-p:32:32-p1:64:64-p2:64:64-p3:32:32-p4:64:64-p5:32:32-p24:64:64-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64"
target triple = "amdgcn-unknown-unknown-unknown"

; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1

declare { i1, i64 } @llvm.SI.if(i1)

declare { i1, i64 } @llvm.SI.else(i64)

declare i64 @llvm.SI.break(i64)

declare i64 @llvm.SI.if.break(i1, i64)

declare i64 @llvm.SI.else.break(i64, i64)

declare i1 @llvm.SI.loop(i64)

declare void @llvm.SI.end.cf(i64)

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="verde" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "target-cpu"="verde" }
attributes #2 = { nounwind readnone }

!opencl.kernels = !{!0}
!llvm.ident = !{!6, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}

!0 = !{void (i32 addrspace(1)*, i32 addrspace(1)*, i32 addrspace(1)*)* @remainder_intint, !1, !2, !3, !4, !5}
!1 = !{!"kernel_arg_addr_space", i32 1, i32 1, i32 1}
!2 = !{!"kernel_arg_access_qual", !"none", !"none", !"none"}
!3 = !{!"kernel_arg_type", !"int*", !"int*", !"int*"}
!4 = !{!"kernel_arg_base_type", !"int*", !"int*", !"int*"}
!5 = !{!"kernel_arg_type_qual", !"", !"", !""}
!6 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 73e976449b53bf91364bec5926194b37f7f08488) (https://github.com/llvm-mirror/llvm.git e48de91069450173c2d5abaad9da9b25920ef692)"}
!7 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 61690d9018c8da94a7812ae53d501af17f0cf265) (https://github.com/llvm-mirror/llvm.git 591adee23bf68ecae9fccd35c937dd03d15a054e)"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
********** Begin Constant Hoisting **********
********** Function: remainder_intint
********** End Constant Hoisting **********
*** IR Dump After Constant Hoisting ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
32768bytes free in local memory.
SROA function: remainder_intint
*** IR Dump After SROA ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
CGP: Found      local addrmode: [Base:%arrayidx]
CGP: Found      local addrmode: [Base:%arrayidx1]
CGP: Found      local addrmode: [Base:%arrayidx2]
*** IR Dump After CodeGen Prepare ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'remainder_intint_ref.ll'
target datalayout = "e-p:32:32-p1:64:64-p2:64:64-p3:32:32-p4:64:64-p5:32:32-p24:64:64-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64"
target triple = "amdgcn-unknown-unknown-unknown"

; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tgid.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.local.size.x() #1

; Function Attrs: nounwind readnone
declare i32 @llvm.r600.read.tidig.x() #1

declare { i1, i64 } @llvm.SI.if(i1)

declare { i1, i64 } @llvm.SI.else(i64)

declare i64 @llvm.SI.break(i64)

declare i64 @llvm.SI.if.break(i1, i64)

declare i64 @llvm.SI.else.break(i64, i64)

declare i1 @llvm.SI.loop(i64)

declare void @llvm.SI.end.cf(i64)

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="verde" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "target-cpu"="verde" }
attributes #2 = { nounwind readnone }

!opencl.kernels = !{!0}
!llvm.ident = !{!6, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}

!0 = !{void (i32 addrspace(1)*, i32 addrspace(1)*, i32 addrspace(1)*)* @remainder_intint, !1, !2, !3, !4, !5}
!1 = !{!"kernel_arg_addr_space", i32 1, i32 1, i32 1}
!2 = !{!"kernel_arg_access_qual", !"none", !"none", !"none"}
!3 = !{!"kernel_arg_type", !"int*", !"int*", !"int*"}
!4 = !{!"kernel_arg_base_type", !"int*", !"int*", !"int*"}
!5 = !{!"kernel_arg_type_qual", !"", !"", !""}
!6 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 73e976449b53bf91364bec5926194b37f7f08488) (https://github.com/llvm-mirror/llvm.git e48de91069450173c2d5abaad9da9b25920ef692)"}
!7 = !{!"clang version 3.8.0 (https://github.com/llvm-mirror/clang.git 61690d9018c8da94a7812ae53d501af17f0cf265) (https://github.com/llvm-mirror/llvm.git 591adee23bf68ecae9fccd35c937dd03d15a054e)"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
*** IR Dump After Lower invoke and unwind, for unwindless code generators ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Flatten the CFG ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Lower SwitchInst's to branches ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Structurize control flow ***
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void

Region tree of function remainder_intint after all region Pass:
Region tree:
[0] entry => <Function Return>
End region tree

Sinking iteration 0
*** IR Dump After Code sinking ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
[SafeStack] Function: remainder_intint
[SafeStack]     safestack is not requested for this function
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind
define void @remainder_intint(i32 addrspace(1)* nocapture readonly %src_0, i32 addrspace(1)* nocapture readonly %src_1, i32 addrspace(1)* nocapture %dst) #0 {
entry:
  %x.i.i = tail call i32 @llvm.r600.read.tgid.x() #2
  %x.i.12.i = tail call i32 @llvm.r600.read.local.size.x() #2
  %mul.26.i = mul i32 %x.i.12.i, %x.i.i
  %x.i.4.i = tail call i32 @llvm.r600.read.tidig.x() #2
  %add.i = add i32 %x.i.4.i, %mul.26.i
  %0 = sext i32 %add.i to i64
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %src_0, i64 %0
  %1 = load i32, i32 addrspace(1)* %arrayidx, align 4, !tbaa !8
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %src_1, i64 %0
  %2 = load i32, i32 addrspace(1)* %arrayidx1, align 4, !tbaa !8
  %rem = srem i32 %1, %2
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(1)* %dst, i64 %0
  store i32 %rem, i32 addrspace(1)* %arrayidx2, align 4, !tbaa !8
  ret void
}
---- Branch Probability Info : remainder_intint ----

Computing probabilities for entry



=== remainder_intint
Initial selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 35 nodes:
  0x45e7050: ch = EntryToken

    0x45e7050: <multiple use>
    0x464c490: i64 = Register %vreg0

  0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1]

  0x464c930: i64 = undef

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464c6e0: i64 = Constant<36>

    0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1]

    0x464c930: <multiple use>
  0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cb80: i64 = Constant<44>

    0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1]

    0x464c930: <multiple use>
  0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cef8: i64 = Constant<52>

    0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1]

    0x464c930: <multiple use>
  0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

    0x464ca58: <multiple use>
    0x464cdd0: <multiple use>
    0x464d148: <multiple use>
  0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1]

          0x464e128: i32 = TargetConstant<3265>

        0x464e250: i32 = llvm.r600.read.tidig.x 0x464e128 [ORD=5]

            0x464ddb0: i32 = TargetConstant<3256>

          0x464ded8: i32 = llvm.r600.read.local.size.x 0x464ddb0 [ORD=3]

            0x464db60: i32 = TargetConstant<3262>

          0x464dc88: i32 = llvm.r600.read.tgid.x 0x464db60 [ORD=2]

        0x464e000: i32 = mul 0x464ded8, 0x464dc88 [ORD=4]

      0x464e378: i32 = add 0x464e250, 0x464e000 [ORD=6]

    0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7]

    0x464e5c8: i64 = Constant<2>

  0x464e6f0: i64 = shl 0x464e4a0, 0x464e5c8 [ORD=8]

  0x464e940: i64 = Constant<0>

    0x464d270: <multiple use>
      0x464ca58: <multiple use>
      0x464e6f0: <multiple use>
    0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8]

    0x464c930: <multiple use>
  0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9]

    0x464d270: <multiple use>
      0x464cdd0: <multiple use>
      0x464e6f0: <multiple use>
    0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10]

    0x464c930: <multiple use>
  0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11]

        0x464eb70: <multiple use>
        0x464edc0: <multiple use>
      0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14]

        0x464eb70: <multiple use>
        0x464edc0: <multiple use>
      0x464eee8: i32 = srem 0x464eb70, 0x464edc0 [ORD=12]

        0x464d148: <multiple use>
        0x464e6f0: <multiple use>
      0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13]

      0x464c930: <multiple use>
    0x464f260: ch = store 0x464f138, 0x464eee8, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14]

  0x464f388: ch = RET_FLAG 0x464f260 [ORD=15]



Combining: 0x464f388: ch = RET_FLAG 0x464f260 [ORD=15]

Combining: 0x464f260: ch = store 0x464f138, 0x464eee8, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14]

Combining: 0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14]

Combining: 0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13]

Combining: 0x464eee8: i32 = srem 0x464eb70, 0x464edc0 [ORD=12]

Combining: 0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11]

Combining: 0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10]

Combining: 0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9]

Combining: 0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8]

Combining: 0x464e6f0: i64 = shl 0x464e4a0, 0x464e5c8 [ORD=8]

Combining: 0x464e5c8: i64 = Constant<2>

Combining: 0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7]

Combining: 0x464e378: i32 = add 0x464e250, 0x464e000 [ORD=6]

Combining: 0x464e250: i32 = llvm.r600.read.tidig.x 0x464e128 [ORD=5]

Combining: 0x464e128: i32 = TargetConstant<3265>

Combining: 0x464e000: i32 = mul 0x464ded8, 0x464dc88 [ORD=4]

Combining: 0x464ded8: i32 = llvm.r600.read.local.size.x 0x464ddb0 [ORD=3]

Combining: 0x464ddb0: i32 = TargetConstant<3256>

Combining: 0x464dc88: i32 = llvm.r600.read.tgid.x 0x464db60 [ORD=2]

Combining: 0x464db60: i32 = TargetConstant<3262>

Combining: 0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1]

Combining: 0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

Combining: 0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1]

Combining: 0x464cef8: i64 = Constant<52>

Combining: 0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

Combining: 0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1]

Combining: 0x464cb80: i64 = Constant<44>

Combining: 0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

Combining: 0x464c930: i64 = undef

Combining: 0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1]

Combining: 0x464c6e0: i64 = Constant<36>

Combining: 0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1]

Combining: 0x464c490: i64 = Register %vreg0

Combining: 0x45e7050: ch = EntryToken
Optimized lowered selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 34 nodes:
  0x45e7050: ch = EntryToken

    0x45e7050: <multiple use>
    0x464c490: i64 = Register %vreg0

  0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1]

  0x464c930: i64 = undef

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464c6e0: i64 = Constant<36>

    0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1]

    0x464c930: <multiple use>
  0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cb80: i64 = Constant<44>

    0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1]

    0x464c930: <multiple use>
  0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cef8: i64 = Constant<52>

    0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1]

    0x464c930: <multiple use>
  0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

    0x464ca58: <multiple use>
    0x464cdd0: <multiple use>
    0x464d148: <multiple use>
  0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1]

          0x464e128: i32 = TargetConstant<3265>

        0x464e250: i32 = llvm.r600.read.tidig.x 0x464e128 [ORD=5]

            0x464ddb0: i32 = TargetConstant<3256>

          0x464ded8: i32 = llvm.r600.read.local.size.x 0x464ddb0 [ORD=3]

            0x464db60: i32 = TargetConstant<3262>

          0x464dc88: i32 = llvm.r600.read.tgid.x 0x464db60 [ORD=2]

        0x464e000: i32 = mul 0x464ded8, 0x464dc88 [ORD=4]

      0x464e378: i32 = add 0x464e250, 0x464e000 [ORD=6]

    0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7]

    0x464e5c8: i64 = Constant<2>

  0x464e6f0: i64 = shl 0x464e4a0, 0x464e5c8 [ORD=8]

    0x464d270: <multiple use>
      0x464ca58: <multiple use>
      0x464e6f0: <multiple use>
    0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8]

    0x464c930: <multiple use>
  0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9]

    0x464d270: <multiple use>
      0x464cdd0: <multiple use>
      0x464e6f0: <multiple use>
    0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10]

    0x464c930: <multiple use>
  0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11]

        0x464eb70: <multiple use>
        0x464edc0: <multiple use>
      0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14]

        0x464eb70: <multiple use>
        0x464edc0: <multiple use>
      0x464eee8: i32 = srem 0x464eb70, 0x464edc0 [ORD=12]

        0x464d148: <multiple use>
        0x464e6f0: <multiple use>
      0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13]

      0x464c930: <multiple use>
    0x464f260: ch = store 0x464f138, 0x464eee8, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14]

  0x464f388: ch = RET_FLAG 0x464f260 [ORD=15]


Legally typed node: 0x464e5c8: i64 = Constant<2> [ID=0]

Legally typed node: 0x464e128: i32 = TargetConstant<3265> [ID=0]

Legally typed node: 0x464e250: i32 = llvm.r600.read.tidig.x 0x464e128 [ORD=5] [ID=0]

Legally typed node: 0x464ddb0: i32 = TargetConstant<3256> [ID=0]

Legally typed node: 0x464ded8: i32 = llvm.r600.read.local.size.x 0x464ddb0 [ORD=3] [ID=0]

Legally typed node: 0x464db60: i32 = TargetConstant<3262> [ID=0]

Legally typed node: 0x464dc88: i32 = llvm.r600.read.tgid.x 0x464db60 [ORD=2] [ID=0]

Legally typed node: 0x464e000: i32 = mul 0x464ded8, 0x464dc88 [ORD=4] [ID=0]

Legally typed node: 0x464e378: i32 = add 0x464e250, 0x464e000 [ORD=6] [ID=0]

Legally typed node: 0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7] [ID=0]

Legally typed node: 0x464e6f0: i64 = shl 0x464e4a0, 0x464e5c8 [ORD=8] [ID=0]

Legally typed node: 0x464cef8: i64 = Constant<52> [ID=0]

Legally typed node: 0x464cb80: i64 = Constant<44> [ID=0]

Legally typed node: 0x464c930: i64 = undef [ID=0]

Legally typed node: 0x464c6e0: i64 = Constant<36> [ID=0]

Legally typed node: 0x464c490: i64 = Register %vreg0 [ID=0]

Legally typed node: 0x45e7050: ch = EntryToken [ID=0]

Legally typed node: 0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=0]

Legally typed node: 0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1] [ID=0]

Legally typed node: 0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=0]

Legally typed node: 0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8] [ID=0]

Legally typed node: 0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1] [ID=0]

Legally typed node: 0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=0]

Legally typed node: 0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10] [ID=0]

Legally typed node: 0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1] [ID=0]

Legally typed node: 0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=0]

Legally typed node: 0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1] [ID=0]

Legally typed node: 0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=0]

Legally typed node: 0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=0]

Legally typed node: 0x464eee8: i32 = srem 0x464eb70, 0x464edc0 [ORD=12] [ID=0]

Legally typed node: 0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=0]

Legally typed node: 0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13] [ID=0]

Legally typed node: 0x464f260: ch = store 0x464f138, 0x464eee8, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=0]

Legally typed node: 0x464f388: ch = RET_FLAG 0x464f260 [ORD=15] [ID=0]

Legally typed node: 0x7fff2cbe6bf0: ch = handlenode 0x464f388 [ID=0]

Type-legalized selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 34 nodes:
  0x45e7050: ch = EntryToken [ID=-3]

    0x45e7050: <multiple use>
    0x464c490: i64 = Register %vreg0 [ID=-3]

  0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=-3]

  0x464c930: i64 = undef [ID=-3]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464c6e0: i64 = Constant<36> [ID=-3]

    0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1] [ID=-3]

    0x464c930: <multiple use>
  0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=-3]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cb80: i64 = Constant<44> [ID=-3]

    0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1] [ID=-3]

    0x464c930: <multiple use>
  0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=-3]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cef8: i64 = Constant<52> [ID=-3]

    0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1] [ID=-3]

    0x464c930: <multiple use>
  0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=-3]

    0x464ca58: <multiple use>
    0x464cdd0: <multiple use>
    0x464d148: <multiple use>
  0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1] [ID=-3]

          0x464e128: i32 = TargetConstant<3265> [ID=-3]

        0x464e250: i32 = llvm.r600.read.tidig.x 0x464e128 [ORD=5] [ID=-3]

            0x464ddb0: i32 = TargetConstant<3256> [ID=-3]

          0x464ded8: i32 = llvm.r600.read.local.size.x 0x464ddb0 [ORD=3] [ID=-3]

            0x464db60: i32 = TargetConstant<3262> [ID=-3]

          0x464dc88: i32 = llvm.r600.read.tgid.x 0x464db60 [ORD=2] [ID=-3]

        0x464e000: i32 = mul 0x464ded8, 0x464dc88 [ORD=4] [ID=-3]

      0x464e378: i32 = add 0x464e250, 0x464e000 [ORD=6] [ID=-3]

    0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7] [ID=-3]

    0x464e5c8: i64 = Constant<2> [ID=-3]

  0x464e6f0: i64 = shl 0x464e4a0, 0x464e5c8 [ORD=8] [ID=-3]

    0x464d270: <multiple use>
      0x464ca58: <multiple use>
      0x464e6f0: <multiple use>
    0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8] [ID=-3]

    0x464c930: <multiple use>
  0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=-3]

    0x464d270: <multiple use>
      0x464cdd0: <multiple use>
      0x464e6f0: <multiple use>
    0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10] [ID=-3]

    0x464c930: <multiple use>
  0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=-3]

        0x464eb70: <multiple use>
        0x464edc0: <multiple use>
      0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=-3]

        0x464eb70: <multiple use>
        0x464edc0: <multiple use>
      0x464eee8: i32 = srem 0x464eb70, 0x464edc0 [ORD=12] [ID=-3]

        0x464d148: <multiple use>
        0x464e6f0: <multiple use>
      0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13] [ID=-3]

      0x464c930: <multiple use>
    0x464f260: ch = store 0x464f138, 0x464eee8, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=-3]

  0x464f388: ch = RET_FLAG 0x464f260 [ORD=15] [ID=-3]



Legalizing: 0x464f388: ch = RET_FLAG 0x464f260 [ORD=15] [ID=33]

Legalizing: 0x464f260: ch = store 0x464f138, 0x464eee8, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=32]

Legalizing: 0x464eee8: i32 = srem 0x464eb70, 0x464edc0 [ORD=12] [ID=31]
 ... replacing: 0x464eee8: i32 = srem 0x464eb70, 0x464edc0 [ORD=12] [ID=31]
     with:      0x464e940: i32,i32 = sdivrem 0x464eb70, 0x464edc0 [ORD=12]

Legalizing: 0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=30]

Legalizing: 0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=29]

Legalizing: 0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=28]

Legalizing: 0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8] [ID=27]

Legalizing: 0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10] [ID=26]

Legalizing: 0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13] [ID=25]

Legalizing: 0x464e6f0: i64 = shl 0x464e4a0, 0x464e5c8 [ORD=8] [ID=24]

Legalizing: 0x464eee8: i32 = Constant<2>

Legalizing: 0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7] [ID=23]

Legalizing: 0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1] [ID=22]

Legalizing: 0x464e378: i32 = add 0x464e250, 0x464e000 [ORD=6] [ID=21]

Legalizing: 0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=20]

Legalizing: 0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=19]

Legalizing: 0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=18]

Legalizing: 0x464e000: i32 = mul 0x464ded8, 0x464dc88 [ORD=4] [ID=17]

Legalizing: 0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1] [ID=16]

Legalizing: 0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1] [ID=15]

Legalizing: 0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1] [ID=14]

Legalizing: 0x464e250: i32 = llvm.r600.read.tidig.x 0x464e128 [ORD=5] [ID=13]
 ... replacing: 0x464e250: i32 = llvm.r600.read.tidig.x 0x464e128 [ORD=5] [ID=13]
     with:      0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0

Legalizing: 0x464ded8: i32 = llvm.r600.read.local.size.x 0x464ddb0 [ORD=3] [ID=12]
 ... replacing: 0x464ded8: i32 = llvm.r600.read.local.size.x 0x464ddb0 [ORD=3] [ID=12]
     with:      0x464f828: i32,ch = load 0x45e7050, 0x464f700, 0x464c930<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

Legalizing: 0x464dc88: i32 = llvm.r600.read.tgid.x 0x464db60 [ORD=2] [ID=11]
 ... replacing: 0x464dc88: i32 = llvm.r600.read.tgid.x 0x464db60 [ORD=2] [ID=11]
     with:      0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8

Legalizing: 0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=10]

Legalizing: 0x464cef8: i64 = Constant<52> [ID=5]

Legalizing: 0x464cb80: i64 = Constant<44> [ID=4]

Legalizing: 0x464c930: i64 = undef [ID=3]

Legalizing: 0x464c6e0: i64 = Constant<36> [ID=2]

Legalizing: 0x464c490: i64 = Register %vreg0 [ID=1]

Legalizing: 0x45e7050: ch = EntryToken [ID=0]

Legalizing: 0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8

Legalizing: 0x464ded8: i32 = Register %vreg3

Legalizing: 0x464f828: i32,ch = load 0x45e7050, 0x464f700, 0x464c930<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

Legalizing: 0x464f700: i64 = add 0x464c5b8, 0x464e250 [ORD=3]

Legalizing: 0x464e250: i64 = Constant<24>

Legalizing: 0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0

Legalizing: 0x464f4b0: i32 = Register %vreg2

Legalizing: 0x464eee8: i32 = Constant<2>

Legalizing: 0x464e940: i32,i32 = sdivrem 0x464eb70, 0x464edc0 [ORD=12]
 ... replacing: 0x464e940: i32,i32 = sdivrem 0x464eb70, 0x464edc0 [ORD=12]
     with:      0x4650e90: i32,i32 = merge_values 0x4650c40, 0x4650d68 [ORD=12]
      and:      0x4650e90: i32,i32 = merge_values 0x4650c40, 0x4650d68 [ORD=12]

Legalizing: 0x4650e90: i32,i32 = merge_values 0x4650c40, 0x4650d68 [ORD=12]
 ... replacing: 0x4650e90: i32,i32 = merge_values 0x4650c40, 0x4650d68 [ORD=12]
     with:      0x4650c40: i32 = sub 0x46509f0, 0x4650300 [ORD=12]
      and:      0x4650d68: i32 = sub 0x4650b18, 0x464e5c8 [ORD=12]

Legalizing: 0x4650d68: i32 = sub 0x4650b18, 0x464e5c8 [ORD=12]

Legalizing: 0x4650b18: i32 = xor 0x46508c8:1, 0x464e5c8 [ORD=12]

Legalizing: 0x46508c8: i32,i32 = udivrem 0x4650678, 0x46507a0 [ORD=12]
 ... replacing: 0x46508c8: i32,i32 = udivrem 0x4650678, 0x46507a0 [ORD=12]
     with:      0x4652e78: i32,i32 = merge_values 0x46528b0, 0x4652d50 [ORD=12]
      and:      0x4652e78: i32,i32 = merge_values 0x46528b0, 0x4652d50 [ORD=12]

Legalizing: 0x46507a0: i32 = xor 0x4650550, 0x464dc88 [ORD=12]

Legalizing: 0x4650678: i32 = xor 0x4650428, 0x464e5c8 [ORD=12]

Legalizing: 0x4650550: i32 = add 0x464edc0, 0x464dc88 [ORD=12]

Legalizing: 0x4650428: i32 = add 0x464eb70, 0x464e5c8 [ORD=12]

Legalizing: 0x464dc88: i32 = select_cc 0x464edc0, 0x464db60, 0x464ddb0, 0x464db60, 0x464e128 [ORD=12]
 ... replacing: 0x464dc88: i32 = select_cc 0x464edc0, 0x464db60, 0x464ddb0, 0x464db60, 0x464e128 [ORD=12]
     with:      0x46508c8: i32 = select 0x4650300, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x464e5c8: i32 = select_cc 0x464eb70, 0x464db60, 0x464ddb0, 0x464db60, 0x464e128 [ORD=12]
 ... replacing: 0x464e5c8: i32 = select_cc 0x464eb70, 0x464db60, 0x464ddb0, 0x464db60, 0x464e128 [ORD=12]
     with:      0x4652fa0: i32 = select 0x464dc88, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x464e128: ch = setlt

Legalizing: 0x464ddb0: i32 = Constant<-1>

Legalizing: 0x464db60: i32 = Constant<0>

Legalizing: 0x4652fa0: i32 = select 0x464dc88, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x464dc88: i1 = setcc 0x464eb70, 0x464db60, 0x464e128 [ORD=12]

Legalizing: 0x46508c8: i32 = select 0x4650300, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x4650300: i1 = setcc 0x464edc0, 0x464db60, 0x464e128 [ORD=12]

Legalizing: 0x4652e78: i32,i32 = merge_values 0x46528b0, 0x4652d50 [ORD=12]
 ... replacing: 0x4652e78: i32,i32 = merge_values 0x46528b0, 0x4652d50 [ORD=12]
     with:      0x46528b0: i32 = select_cc 0x4651e48, 0x464db60, 0x4652660, 0x4652788, 0x4650fb8 [ORD=12]
      and:      0x4652d50: i32 = select_cc 0x4651e48, 0x464db60, 0x4652b00, 0x4652c28, 0x4650fb8 [ORD=12]

Legalizing: 0x4652d50: i32 = select_cc 0x4651e48, 0x464db60, 0x4652b00, 0x4652c28, 0x4650fb8 [ORD=12]
 ... replacing: 0x4652d50: i32 = select_cc 0x4651e48, 0x464db60, 0x4652b00, 0x4652c28, 0x4650fb8 [ORD=12]
     with:      0x464e5c8: i32 = select 0x4652e78, 0x4652b00, 0x4652c28 [ORD=12]

Legalizing: 0x4652c28: i32 = select_cc 0x4651f70, 0x464db60, 0x4651ad0, 0x46529d8, 0x4650fb8 [ORD=12]
 ... replacing: 0x4652c28: i32 = select_cc 0x4651f70, 0x464db60, 0x4651ad0, 0x46529d8, 0x4650fb8 [ORD=12]
     with:      0x46530c8: i32 = select 0x4652d50, 0x4651ad0, 0x46529d8 [ORD=12]

Legalizing: 0x4652b00: i32 = add 0x4651ad0, 0x46507a0 [ORD=12]

Legalizing: 0x46529d8: i32 = sub 0x4651ad0, 0x46507a0 [ORD=12]

Legalizing: 0x4651f70: i32 = and 0x4651d20, 0x4651e48 [ORD=12]

Legalizing: 0x4651e48: i32 = select_cc 0x4650678, 0x46519a8, 0x464ddb0, 0x464db60, 0x4651bf8 [ORD=12]
 ... replacing: 0x4651e48: i32 = select_cc 0x4650678, 0x46519a8, 0x464ddb0, 0x464db60, 0x4651bf8 [ORD=12]
     with:      0x46521c0: i32 = select 0x4652098, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x4651d20: i32 = select_cc 0x4651ad0, 0x46507a0, 0x464ddb0, 0x464db60, 0x4651bf8 [ORD=12]
 ... replacing: 0x4651d20: i32 = select_cc 0x4651ad0, 0x46507a0, 0x464ddb0, 0x464db60, 0x4651bf8 [ORD=12]
     with:      0x4652660: i32 = select 0x4651e48, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x4651bf8: ch = setuge

Legalizing: 0x4651ad0: i32 = sub 0x4650678, 0x46519a8 [ORD=12]

Legalizing: 0x46519a8: i32 = mul 0x4651880, 0x46507a0 [ORD=12]

Legalizing: 0x4651880: i32 = mulhu 0x4651758, 0x4650678 [ORD=12]

Legalizing: 0x4651758: i32 = select_cc 0x4650e90, 0x464db60, 0x4651508, 0x4651630, 0x4650fb8 [ORD=12]
 ... replacing: 0x4651758: i32 = select_cc 0x4650e90, 0x464db60, 0x4651508, 0x4651630, 0x4650fb8 [ORD=12]
     with:      0x4652788: i32 = select 0x4651d20, 0x4651508, 0x4651630 [ORD=12]

Legalizing: 0x4651630: i32 = sub 0x46509f0, 0x46513e0 [ORD=12]

Legalizing: 0x4651508: i32 = add 0x46509f0, 0x46513e0 [ORD=12]

Legalizing: 0x46513e0: i32 = mulhu 0x46510e0, 0x46509f0 [ORD=12]

Legalizing: 0x46510e0: i32 = select_cc 0x4650e90, 0x464db60, 0x464e940, 0x4650c40, 0x4650fb8 [ORD=12]
 ... replacing: 0x46510e0: i32 = select_cc 0x4650e90, 0x464db60, 0x464e940, 0x4650c40, 0x4650fb8 [ORD=12]
     with:      0x4651758: i32 = select 0x4651d20, 0x464e940, 0x4650c40 [ORD=12]

Legalizing: 0x4650fb8: ch = seteq

Legalizing: 0x464e940: i32 = sub 0x464db60, 0x4650c40 [ORD=12]

Legalizing: 0x4650e90: i32 = mulhu 0x46509f0, 0x46507a0 [ORD=12]

Legalizing: 0x4650c40: i32 = mul 0x46509f0, 0x46507a0 [ORD=12]

Legalizing: 0x46509f0: i32 = URECIP 0x46507a0 [ORD=12]

Legalizing: 0x4651758: i32 = select 0x4651d20, 0x464e940, 0x4650c40 [ORD=12]

Legalizing: 0x4652788: i32 = select 0x4651d20, 0x4651508, 0x4651630 [ORD=12]

Legalizing: 0x4651d20: i1 = setcc 0x4650e90, 0x464db60, 0x4650fb8 [ORD=12]

Legalizing: 0x4652660: i32 = select 0x4651e48, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x4651e48: i1 = setcc 0x4651ad0, 0x46507a0, 0x4651bf8 [ORD=12]

Legalizing: 0x46521c0: i32 = select 0x4652098, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x4652098: i1 = setcc 0x4650678, 0x46519a8, 0x4651bf8 [ORD=12]

Legalizing: 0x46530c8: i32 = select 0x4652d50, 0x4651ad0, 0x46529d8 [ORD=12]

Legalizing: 0x4652d50: i1 = setcc 0x4651f70, 0x464db60, 0x4650fb8 [ORD=12]

Legalizing: 0x464e5c8: i32 = select 0x4652e78, 0x4652b00, 0x46530c8 [ORD=12]

Legalizing: 0x4652e78: i1 = setcc 0x46521c0, 0x464db60, 0x4650fb8 [ORD=12]
Legalized selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 73 nodes:
  0x45e7050: ch = EntryToken [ID=0]

  0x464c930: i64 = undef [ID=3]

    0x45e7050: <multiple use>
    0x464c490: i64 = Register %vreg0 [ID=1]

  0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=10]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cef8: i64 = Constant<52> [ID=5]

    0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1] [ID=14]

    0x464c930: <multiple use>
  0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=18]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cb80: i64 = Constant<44> [ID=4]

    0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1] [ID=15]

    0x464c930: <multiple use>
  0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=19]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464c6e0: i64 = Constant<36> [ID=2]

    0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1] [ID=16]

    0x464c930: <multiple use>
  0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=20]

    0x464ca58: <multiple use>
    0x464cdd0: <multiple use>
    0x464d148: <multiple use>
  0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1] [ID=22]

          0x45e7050: <multiple use>
          0x464f4b0: i32 = Register %vreg2

        0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0

            0x45e7050: <multiple use>
              0x464c5b8: <multiple use>
              0x464e250: i64 = Constant<24>

            0x464f700: i64 = add 0x464c5b8, 0x464e250 [ORD=3]

            0x464c930: <multiple use>
          0x464f828: i32,ch = load 0x45e7050, 0x464f700, 0x464c930<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

            0x45e7050: <multiple use>
            0x464ded8: i32 = Register %vreg3

          0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8

        0x464e000: i32 = mul 0x464f828, 0x464f950 [ORD=4] [ID=17]

      0x464e378: i32 = add 0x464f5d8, 0x464e000 [ORD=6] [ID=21]

    0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7] [ID=23]

    0x464eee8: i32 = Constant<2>

  0x464e6f0: i64 = shl 0x464e4a0, 0x464eee8 [ORD=8] [ID=24]

    0x464d270: <multiple use>
      0x464cdd0: <multiple use>
      0x464e6f0: <multiple use>
    0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10] [ID=26]

    0x464c930: <multiple use>
  0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=28]

    0x464d270: <multiple use>
      0x464ca58: <multiple use>
      0x464e6f0: <multiple use>
    0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8] [ID=27]

    0x464c930: <multiple use>
  0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=29]

  0x464db60: i32 = Constant<0>

  0x464ddb0: i32 = Constant<-1>

  0x464e128: ch = setlt

      0x464eb70: <multiple use>
      0x4652fa0: <multiple use>
    0x4650428: i32 = add 0x464eb70, 0x4652fa0 [ORD=12]

    0x4652fa0: <multiple use>
  0x4650678: i32 = xor 0x4650428, 0x4652fa0 [ORD=12]

      0x464edc0: <multiple use>
      0x46508c8: <multiple use>
    0x4650550: i32 = add 0x464edc0, 0x46508c8 [ORD=12]

    0x46508c8: <multiple use>
  0x46507a0: i32 = xor 0x4650550, 0x46508c8 [ORD=12]

    0x46507a0: <multiple use>
  0x46509f0: i32 = URECIP 0x46507a0 [ORD=12]

    0x46509f0: <multiple use>
    0x46507a0: <multiple use>
  0x4650c40: i32 = mul 0x46509f0, 0x46507a0 [ORD=12]

  0x4650fb8: ch = seteq

      0x4651d20: <multiple use>
        0x464db60: <multiple use>
        0x4650c40: <multiple use>
      0x464e940: i32 = sub 0x464db60, 0x4650c40 [ORD=12]

      0x4650c40: <multiple use>
    0x4651758: i32 = select 0x4651d20, 0x464e940, 0x4650c40 [ORD=12]

    0x46509f0: <multiple use>
  0x46513e0: i32 = mulhu 0x4651758, 0x46509f0 [ORD=12]

        0x4651d20: <multiple use>
          0x46509f0: <multiple use>
          0x46513e0: <multiple use>
        0x4651508: i32 = add 0x46509f0, 0x46513e0 [ORD=12]

          0x46509f0: <multiple use>
          0x46513e0: <multiple use>
        0x4651630: i32 = sub 0x46509f0, 0x46513e0 [ORD=12]

      0x4652788: i32 = select 0x4651d20, 0x4651508, 0x4651630 [ORD=12]

      0x4650678: <multiple use>
    0x4651880: i32 = mulhu 0x4652788, 0x4650678 [ORD=12]

    0x46507a0: <multiple use>
  0x46519a8: i32 = mul 0x4651880, 0x46507a0 [ORD=12]

    0x4650678: <multiple use>
    0x46519a8: <multiple use>
  0x4651ad0: i32 = sub 0x4650678, 0x46519a8 [ORD=12]

  0x4651bf8: ch = setuge

      0x464edc0: <multiple use>
      0x464db60: <multiple use>
      0x464e128: <multiple use>
    0x4650300: i1 = setcc 0x464edc0, 0x464db60, 0x464e128 [ORD=12]

    0x464ddb0: <multiple use>
    0x464db60: <multiple use>
  0x46508c8: i32 = select 0x4650300, 0x464ddb0, 0x464db60 [ORD=12]

      0x464eb70: <multiple use>
      0x464db60: <multiple use>
      0x464e128: <multiple use>
    0x464dc88: i1 = setcc 0x464eb70, 0x464db60, 0x464e128 [ORD=12]

    0x464ddb0: <multiple use>
    0x464db60: <multiple use>
  0x4652fa0: i32 = select 0x464dc88, 0x464ddb0, 0x464db60 [ORD=12]

      0x4650678: <multiple use>
      0x46519a8: <multiple use>
      0x4651bf8: <multiple use>
    0x4652098: i1 = setcc 0x4650678, 0x46519a8, 0x4651bf8 [ORD=12]

    0x464ddb0: <multiple use>
    0x464db60: <multiple use>
  0x46521c0: i32 = select 0x4652098, 0x464ddb0, 0x464db60 [ORD=12]

      0x46509f0: <multiple use>
      0x46507a0: <multiple use>
    0x4650e90: i32 = mulhu 0x46509f0, 0x46507a0 [ORD=12]

    0x464db60: <multiple use>
    0x4650fb8: <multiple use>
  0x4651d20: i1 = setcc 0x4650e90, 0x464db60, 0x4650fb8 [ORD=12]

        0x464eb70: <multiple use>
        0x464edc0: <multiple use>
      0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=30]

              0x46521c0: <multiple use>
              0x464db60: <multiple use>
              0x4650fb8: <multiple use>
            0x4652e78: i1 = setcc 0x46521c0, 0x464db60, 0x4650fb8 [ORD=12]

              0x4651ad0: <multiple use>
              0x46507a0: <multiple use>
            0x4652b00: i32 = add 0x4651ad0, 0x46507a0 [ORD=12]

                      0x4651ad0: <multiple use>
                      0x46507a0: <multiple use>
                      0x4651bf8: <multiple use>
                    0x4651e48: i1 = setcc 0x4651ad0, 0x46507a0, 0x4651bf8 [ORD=12]

                    0x464ddb0: <multiple use>
                    0x464db60: <multiple use>
                  0x4652660: i32 = select 0x4651e48, 0x464ddb0, 0x464db60 [ORD=12]

                  0x46521c0: <multiple use>
                0x4651f70: i32 = and 0x4652660, 0x46521c0 [ORD=12]

                0x464db60: <multiple use>
                0x4650fb8: <multiple use>
              0x4652d50: i1 = setcc 0x4651f70, 0x464db60, 0x4650fb8 [ORD=12]

              0x4651ad0: <multiple use>
                0x4651ad0: <multiple use>
                0x46507a0: <multiple use>
              0x46529d8: i32 = sub 0x4651ad0, 0x46507a0 [ORD=12]

            0x46530c8: i32 = select 0x4652d50, 0x4651ad0, 0x46529d8 [ORD=12]

          0x464e5c8: i32 = select 0x4652e78, 0x4652b00, 0x46530c8 [ORD=12]

          0x4652fa0: <multiple use>
        0x4650b18: i32 = xor 0x464e5c8, 0x4652fa0 [ORD=12]

        0x4652fa0: <multiple use>
      0x4650d68: i32 = sub 0x4650b18, 0x4652fa0 [ORD=12]

        0x464d148: <multiple use>
        0x464e6f0: <multiple use>
      0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13] [ID=25]

      0x464c930: <multiple use>
    0x464f260: ch = store 0x464f138, 0x4650d68, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=32]

  0x464f388: ch = RET_FLAG 0x464f260 [ORD=15] [ID=33]



Legalizing: 0x4651758: i32 = select 0x4651d20, 0x464e940, 0x4650c40 [ORD=12]

Combining: 0x4651758: i32 = select 0x4651d20, 0x464e940, 0x4650c40 [ORD=12]

Legalizing: 0x4652788: i32 = select 0x4651d20, 0x4651508, 0x4651630 [ORD=12]

Combining: 0x4652788: i32 = select 0x4651d20, 0x4651508, 0x4651630 [ORD=12]

Legalizing: 0x4651d20: i1 = setcc 0x4650e90, 0x464db60, 0x4650fb8 [ORD=12]

Combining: 0x4651d20: i1 = setcc 0x4650e90, 0x464db60, 0x4650fb8 [ORD=12]

Legalizing: 0x4652660: i32 = select 0x4651e48, 0x464ddb0, 0x464db60 [ORD=12]

Combining: 0x4652660: i32 = select 0x4651e48, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x4651e48: i1 = setcc 0x4651ad0, 0x46507a0, 0x4651bf8 [ORD=12]

Combining: 0x4651e48: i1 = setcc 0x4651ad0, 0x46507a0, 0x4651bf8 [ORD=12]

Legalizing: 0x46521c0: i32 = select 0x4652098, 0x464ddb0, 0x464db60 [ORD=12]

Combining: 0x46521c0: i32 = select 0x4652098, 0x464ddb0, 0x464db60 [ORD=12]

Legalizing: 0x4652098: i1 = setcc 0x4650678, 0x46519a8, 0x4651bf8 [ORD=12]

Combining: 0x4652098: i1 = setcc 0x4650678, 0x46519a8, 0x4651bf8 [ORD=12]

Legalizing: 0x46530c8: i32 = select 0x4652d50, 0x4651ad0, 0x46529d8 [ORD=12]

Combining: 0x46530c8: i32 = select 0x4652d50, 0x4651ad0, 0x46529d8 [ORD=12]

Legalizing: 0x4652d50: i1 = setcc 0x4651f70, 0x464db60, 0x4650fb8 [ORD=12]

Combining: 0x4652d50: i1 = setcc 0x4651f70, 0x464db60, 0x4650fb8 [ORD=12]

Legalizing: 0x464e5c8: i32 = select 0x4652e78, 0x4652b00, 0x46530c8 [ORD=12]

Combining: 0x464e5c8: i32 = select 0x4652e78, 0x4652b00, 0x46530c8 [ORD=12]

Legalizing: 0x4652e78: i1 = setcc 0x46521c0, 0x464db60, 0x4650fb8 [ORD=12]

Combining: 0x4652e78: i1 = setcc 0x46521c0, 0x464db60, 0x4650fb8 [ORD=12]

Legalizing: 0x4652fa0: i32 = select 0x464dc88, 0x464ddb0, 0x464db60 [ORD=12]

Combining: 0x4652fa0: i32 = select 0x464dc88, 0x464ddb0, 0x464db60 [ORD=12]
 ... into: 0x46528b0: i32 = sra 0x464eb70, 0x46510e0 [ORD=9]

Legalizing: 0x46528b0: i32 = sra 0x464eb70, 0x46510e0 [ORD=9]

Legalizing: 0x46510e0: i32 = Constant<31>

Combining: 0x46528b0: i32 = sra 0x464eb70, 0x46510e0 [ORD=9]

Legalizing: 0x46510e0: i32 = Constant<31>

Combining: 0x46510e0: i32 = Constant<31>

Legalizing: 0x46508c8: i32 = select 0x4650300, 0x464ddb0, 0x464db60 [ORD=12]

Combining: 0x46508c8: i32 = select 0x4650300, 0x464ddb0, 0x464db60 [ORD=12]
 ... into: 0x464dc88: i32 = sra 0x464edc0, 0x46510e0 [ORD=11]

Legalizing: 0x464dc88: i32 = sra 0x464edc0, 0x46510e0 [ORD=11]

Legalizing: 0x46510e0: i32 = Constant<31>

Combining: 0x464dc88: i32 = sra 0x464edc0, 0x46510e0 [ORD=11]

Legalizing: 0x4652b00: i32 = add 0x4651ad0, 0x46507a0 [ORD=12]

Combining: 0x4652b00: i32 = add 0x4651ad0, 0x46507a0 [ORD=12]

Legalizing: 0x46529d8: i32 = sub 0x4651ad0, 0x46507a0 [ORD=12]

Combining: 0x46529d8: i32 = sub 0x4651ad0, 0x46507a0 [ORD=12]

Legalizing: 0x4651f70: i32 = and 0x4652660, 0x46521c0 [ORD=12]

Combining: 0x4651f70: i32 = and 0x4652660, 0x46521c0 [ORD=12]

Legalizing: 0x4651bf8: ch = setuge

Combining: 0x4651bf8: ch = setuge

Legalizing: 0x4651ad0: i32 = sub 0x4650678, 0x46519a8 [ORD=12]

Combining: 0x4651ad0: i32 = sub 0x4650678, 0x46519a8 [ORD=12]

Legalizing: 0x46519a8: i32 = mul 0x4651880, 0x46507a0 [ORD=12]

Combining: 0x46519a8: i32 = mul 0x4651880, 0x46507a0 [ORD=12]

Legalizing: 0x4651880: i32 = mulhu 0x4652788, 0x4650678 [ORD=12]

Combining: 0x4651880: i32 = mulhu 0x4652788, 0x4650678 [ORD=12]

Legalizing: 0x4651630: i32 = sub 0x46509f0, 0x46513e0 [ORD=12]

Combining: 0x4651630: i32 = sub 0x46509f0, 0x46513e0 [ORD=12]

Legalizing: 0x4651508: i32 = add 0x46509f0, 0x46513e0 [ORD=12]

Combining: 0x4651508: i32 = add 0x46509f0, 0x46513e0 [ORD=12]

Legalizing: 0x46513e0: i32 = mulhu 0x4651758, 0x46509f0 [ORD=12]

Combining: 0x46513e0: i32 = mulhu 0x4651758, 0x46509f0 [ORD=12]

Legalizing: 0x4650fb8: ch = seteq

Combining: 0x4650fb8: ch = seteq

Legalizing: 0x464e940: i32 = sub 0x464db60, 0x4650c40 [ORD=12]

Combining: 0x464e940: i32 = sub 0x464db60, 0x4650c40 [ORD=12]

Legalizing: 0x4650e90: i32 = mulhu 0x46509f0, 0x46507a0 [ORD=12]

Combining: 0x4650e90: i32 = mulhu 0x46509f0, 0x46507a0 [ORD=12]

Legalizing: 0x4650c40: i32 = mul 0x46509f0, 0x46507a0 [ORD=12]

Combining: 0x4650c40: i32 = mul 0x46509f0, 0x46507a0 [ORD=12]

Legalizing: 0x46509f0: i32 = URECIP 0x46507a0 [ORD=12]

Combining: 0x46509f0: i32 = URECIP 0x46507a0 [ORD=12]

Legalizing: 0x4650d68: i32 = sub 0x4650b18, 0x46528b0 [ORD=12]

Combining: 0x4650d68: i32 = sub 0x4650b18, 0x46528b0 [ORD=12]

Legalizing: 0x4650b18: i32 = xor 0x464e5c8, 0x46528b0 [ORD=12]

Combining: 0x4650b18: i32 = xor 0x464e5c8, 0x46528b0 [ORD=12]

Legalizing: 0x46507a0: i32 = xor 0x4650550, 0x464dc88 [ORD=12]

Combining: 0x46507a0: i32 = xor 0x4650550, 0x464dc88 [ORD=12]

Legalizing: 0x4650678: i32 = xor 0x4650428, 0x46528b0 [ORD=12]

Combining: 0x4650678: i32 = xor 0x4650428, 0x46528b0 [ORD=12]

Legalizing: 0x4650550: i32 = add 0x464edc0, 0x464dc88 [ORD=12]

Combining: 0x4650550: i32 = add 0x464edc0, 0x464dc88 [ORD=12]

Legalizing: 0x4650428: i32 = add 0x464eb70, 0x46528b0 [ORD=12]

Combining: 0x4650428: i32 = add 0x464eb70, 0x46528b0 [ORD=12]

Legalizing: 0x464ddb0: i32 = Constant<-1>

Combining: 0x464ddb0: i32 = Constant<-1>

Legalizing: 0x464db60: i32 = Constant<0>

Combining: 0x464db60: i32 = Constant<0>

Legalizing: 0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8

Combining: 0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8

Legalizing: 0x464ded8: i32 = Register %vreg3

Combining: 0x464ded8: i32 = Register %vreg3

Legalizing: 0x464f828: i32,ch = load 0x45e7050, 0x464f700, 0x464c930<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

Combining: 0x464f828: i32,ch = load 0x45e7050, 0x464f700, 0x464c930<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

Legalizing: 0x464f700: i64 = add 0x464c5b8, 0x464e250 [ORD=3]

Combining: 0x464f700: i64 = add 0x464c5b8, 0x464e250 [ORD=3]

Legalizing: 0x464e250: i64 = Constant<24>

Combining: 0x464e250: i64 = Constant<24>

Legalizing: 0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0

Combining: 0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0

Legalizing: 0x464f4b0: i32 = Register %vreg2

Combining: 0x464f4b0: i32 = Register %vreg2

Legalizing: 0x464eee8: i32 = Constant<2>

Combining: 0x464eee8: i32 = Constant<2>

Legalizing: 0x464f388: ch = RET_FLAG 0x464f260 [ORD=15] [ID=33]

Combining: 0x464f388: ch = RET_FLAG 0x464f260 [ORD=15] [ID=33]

Legalizing: 0x464f260: ch = store 0x464f138, 0x4650d68, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=32]

Combining: 0x464f260: ch = store 0x464f138, 0x4650d68, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=32]

Legalizing: 0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=30]

Combining: 0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=30]

Legalizing: 0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=29]

Combining: 0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=29]

Legalizing: 0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=28]

Combining: 0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=28]

Legalizing: 0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8] [ID=27]

Combining: 0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8] [ID=27]

Legalizing: 0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10] [ID=26]

Combining: 0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10] [ID=26]

Legalizing: 0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13] [ID=25]

Combining: 0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13] [ID=25]

Legalizing: 0x464e6f0: i64 = shl 0x464e4a0, 0x464eee8 [ORD=8] [ID=24]

Legalizing: 0x464eee8: i32 = Constant<2>

Combining: 0x464e6f0: i64 = shl 0x464e4a0, 0x464eee8 [ORD=8] [ID=24]

Legalizing: 0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7] [ID=23]

Combining: 0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7] [ID=23]

Legalizing: 0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1] [ID=22]

Combining: 0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1] [ID=22]

Legalizing: 0x464e378: i32 = add 0x464f5d8, 0x464e000 [ORD=6] [ID=21]

Combining: 0x464e378: i32 = add 0x464f5d8, 0x464e000 [ORD=6] [ID=21]

Legalizing: 0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=20]

Combining: 0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=20]

Legalizing: 0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=19]

Combining: 0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=19]

Legalizing: 0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=18]

Combining: 0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=18]

Legalizing: 0x464e000: i32 = mul 0x464f828, 0x464f950 [ORD=4] [ID=17]

Combining: 0x464e000: i32 = mul 0x464f828, 0x464f950 [ORD=4] [ID=17]

Legalizing: 0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1] [ID=16]

Combining: 0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1] [ID=16]

Legalizing: 0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1] [ID=15]

Combining: 0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1] [ID=15]

Legalizing: 0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1] [ID=14]

Combining: 0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1] [ID=14]

Legalizing: 0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=10]

Combining: 0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=10]

Legalizing: 0x464cef8: i64 = Constant<52> [ID=5]

Combining: 0x464cef8: i64 = Constant<52> [ID=5]

Legalizing: 0x464cb80: i64 = Constant<44> [ID=4]

Combining: 0x464cb80: i64 = Constant<44> [ID=4]

Legalizing: 0x464c930: i64 = undef [ID=3]

Combining: 0x464c930: i64 = undef [ID=3]

Legalizing: 0x464c6e0: i64 = Constant<36> [ID=2]

Combining: 0x464c6e0: i64 = Constant<36> [ID=2]

Legalizing: 0x464c490: i64 = Register %vreg0 [ID=1]

Combining: 0x464c490: i64 = Register %vreg0 [ID=1]

Legalizing: 0x45e7050: ch = EntryToken [ID=0]

Combining: 0x45e7050: ch = EntryToken [ID=0]
Optimized legalized selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 71 nodes:
  0x45e7050: ch = EntryToken [ID=0]

  0x464c930: i64 = undef [ID=3]

    0x45e7050: <multiple use>
    0x464c490: i64 = Register %vreg0 [ID=1]

  0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=10]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cef8: i64 = Constant<52> [ID=5]

    0x464d020: i64 = add 0x464c5b8, 0x464cef8 [ORD=1] [ID=14]

    0x464c930: <multiple use>
  0x464d148: i64,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=18]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464cb80: i64 = Constant<44> [ID=4]

    0x464cca8: i64 = add 0x464c5b8, 0x464cb80 [ORD=1] [ID=15]

    0x464c930: <multiple use>
  0x464cdd0: i64,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=19]

    0x45e7050: <multiple use>
      0x464c5b8: <multiple use>
      0x464c6e0: i64 = Constant<36> [ID=2]

    0x464c808: i64 = add 0x464c5b8, 0x464c6e0 [ORD=1] [ID=16]

    0x464c930: <multiple use>
  0x464ca58: i64,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=20]

    0x464ca58: <multiple use>
    0x464cdd0: <multiple use>
    0x464d148: <multiple use>
  0x464d270: ch = TokenFactor 0x464ca58:1, 0x464cdd0:1, 0x464d148:1 [ORD=1] [ID=22]

          0x45e7050: <multiple use>
          0x464f4b0: i32 = Register %vreg2

        0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0

            0x45e7050: <multiple use>
              0x464c5b8: <multiple use>
              0x464e250: i64 = Constant<24>

            0x464f700: i64 = add 0x464c5b8, 0x464e250 [ORD=3]

            0x464c930: <multiple use>
          0x464f828: i32,ch = load 0x45e7050, 0x464f700, 0x464c930<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

            0x45e7050: <multiple use>
            0x464ded8: i32 = Register %vreg3

          0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8

        0x464e000: i32 = mul 0x464f828, 0x464f950 [ORD=4] [ID=17]

      0x464e378: i32 = add 0x464f5d8, 0x464e000 [ORD=6] [ID=21]

    0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7] [ID=23]

    0x464eee8: i32 = Constant<2>

  0x464e6f0: i64 = shl 0x464e4a0, 0x464eee8 [ORD=8] [ID=24]

    0x464d270: <multiple use>
      0x464cdd0: <multiple use>
      0x464e6f0: <multiple use>
    0x464ec98: i64 = add 0x464cdd0, 0x464e6f0 [ORD=10] [ID=26]

    0x464c930: <multiple use>
  0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=28]

    0x464d270: <multiple use>
      0x464ca58: <multiple use>
      0x464e6f0: <multiple use>
    0x464e818: i64 = add 0x464ca58, 0x464e6f0 [ORD=8] [ID=27]

    0x464c930: <multiple use>
  0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=29]

  0x464db60: i32 = Constant<0>

  0x464ddb0: i32 = Constant<-1>

      0x464eb70: <multiple use>
      0x46528b0: <multiple use>
    0x4650428: i32 = add 0x464eb70, 0x46528b0 [ORD=12]

    0x46528b0: <multiple use>
  0x4650678: i32 = xor 0x4650428, 0x46528b0 [ORD=12]

      0x464edc0: <multiple use>
      0x464dc88: <multiple use>
    0x4650550: i32 = add 0x464edc0, 0x464dc88 [ORD=12]

    0x464dc88: <multiple use>
  0x46507a0: i32 = xor 0x4650550, 0x464dc88 [ORD=12]

    0x46507a0: <multiple use>
  0x46509f0: i32 = URECIP 0x46507a0 [ORD=12]

    0x46509f0: <multiple use>
    0x46507a0: <multiple use>
  0x4650c40: i32 = mul 0x46509f0, 0x46507a0 [ORD=12]

  0x4650fb8: ch = seteq

      0x4651d20: <multiple use>
        0x464db60: <multiple use>
        0x4650c40: <multiple use>
      0x464e940: i32 = sub 0x464db60, 0x4650c40 [ORD=12]

      0x4650c40: <multiple use>
    0x4651758: i32 = select 0x4651d20, 0x464e940, 0x4650c40 [ORD=12]

    0x46509f0: <multiple use>
  0x46513e0: i32 = mulhu 0x4651758, 0x46509f0 [ORD=12]

        0x4651d20: <multiple use>
          0x46509f0: <multiple use>
          0x46513e0: <multiple use>
        0x4651508: i32 = add 0x46509f0, 0x46513e0 [ORD=12]

          0x46509f0: <multiple use>
          0x46513e0: <multiple use>
        0x4651630: i32 = sub 0x46509f0, 0x46513e0 [ORD=12]

      0x4652788: i32 = select 0x4651d20, 0x4651508, 0x4651630 [ORD=12]

      0x4650678: <multiple use>
    0x4651880: i32 = mulhu 0x4652788, 0x4650678 [ORD=12]

    0x46507a0: <multiple use>
  0x46519a8: i32 = mul 0x4651880, 0x46507a0 [ORD=12]

    0x4650678: <multiple use>
    0x46519a8: <multiple use>
  0x4651ad0: i32 = sub 0x4650678, 0x46519a8 [ORD=12]

  0x4651bf8: ch = setuge

      0x4650678: <multiple use>
      0x46519a8: <multiple use>
      0x4651bf8: <multiple use>
    0x4652098: i1 = setcc 0x4650678, 0x46519a8, 0x4651bf8 [ORD=12]

    0x464ddb0: <multiple use>
    0x464db60: <multiple use>
  0x46521c0: i32 = select 0x4652098, 0x464ddb0, 0x464db60 [ORD=12]

      0x46509f0: <multiple use>
      0x46507a0: <multiple use>
    0x4650e90: i32 = mulhu 0x46509f0, 0x46507a0 [ORD=12]

    0x464db60: <multiple use>
    0x4650fb8: <multiple use>
  0x4651d20: i1 = setcc 0x4650e90, 0x464db60, 0x4650fb8 [ORD=12]

  0x46510e0: i32 = Constant<31>

    0x464eb70: <multiple use>
    0x46510e0: <multiple use>
  0x46528b0: i32 = sra 0x464eb70, 0x46510e0 [ORD=9]

    0x464edc0: <multiple use>
    0x46510e0: <multiple use>
  0x464dc88: i32 = sra 0x464edc0, 0x46510e0 [ORD=11]

        0x464eb70: <multiple use>
        0x464edc0: <multiple use>
      0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=30]

              0x46521c0: <multiple use>
              0x464db60: <multiple use>
              0x4650fb8: <multiple use>
            0x4652e78: i1 = setcc 0x46521c0, 0x464db60, 0x4650fb8 [ORD=12]

              0x4651ad0: <multiple use>
              0x46507a0: <multiple use>
            0x4652b00: i32 = add 0x4651ad0, 0x46507a0 [ORD=12]

                      0x4651ad0: <multiple use>
                      0x46507a0: <multiple use>
                      0x4651bf8: <multiple use>
                    0x4651e48: i1 = setcc 0x4651ad0, 0x46507a0, 0x4651bf8 [ORD=12]

                    0x464ddb0: <multiple use>
                    0x464db60: <multiple use>
                  0x4652660: i32 = select 0x4651e48, 0x464ddb0, 0x464db60 [ORD=12]

                  0x46521c0: <multiple use>
                0x4651f70: i32 = and 0x4652660, 0x46521c0 [ORD=12]

                0x464db60: <multiple use>
                0x4650fb8: <multiple use>
              0x4652d50: i1 = setcc 0x4651f70, 0x464db60, 0x4650fb8 [ORD=12]

              0x4651ad0: <multiple use>
                0x4651ad0: <multiple use>
                0x46507a0: <multiple use>
              0x46529d8: i32 = sub 0x4651ad0, 0x46507a0 [ORD=12]

            0x46530c8: i32 = select 0x4652d50, 0x4651ad0, 0x46529d8 [ORD=12]

          0x464e5c8: i32 = select 0x4652e78, 0x4652b00, 0x46530c8 [ORD=12]

          0x46528b0: <multiple use>
        0x4650b18: i32 = xor 0x464e5c8, 0x46528b0 [ORD=12]

        0x46528b0: <multiple use>
      0x4650d68: i32 = sub 0x4650b18, 0x46528b0 [ORD=12]

        0x464d148: <multiple use>
        0x464e6f0: <multiple use>
      0x464f010: i64 = add 0x464d148, 0x464e6f0 [ORD=13] [ID=25]

      0x464c930: <multiple use>
    0x464f260: ch = store 0x464f138, 0x4650d68, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=32]

  0x464f388: ch = RET_FLAG 0x464f260 [ORD=15] [ID=33]


===== Instruction selection begins: BB#0 'entry'
ISEL: Starting pattern match on root node: 0x464f388: ch = RET_FLAG 0x464f260 [ORD=15] [ID=70]

  Morphed node: 0x464f388: ch = S_ENDPGM 0x464f260 [ORD=15]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464f260: ch = store 0x464f138, 0x4650d68, 0x464f010, 0x464c930<ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=69]

  Initial Opcode index to 2633
  Match failed at index 2652
  Continuing at 2675
  Match failed at index 2676
  Continuing at 2703
  Continuing at 2704
  Match failed at index 2705
  Continuing at 2737
  Match failed at index 2738
  Continuing at 2770
  Continuing at 2771
  Match failed at index 2774
  Continuing at 2805
  Skipped scope entry (due to false predicate) at index 2818, continuing at 2872
  Morphed node: 0x464f260: ch = BUFFER_STORE_DWORD_ADDR64 0x4650d68, 0x464e6f0, 0x46552f0, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464f138<Mem:ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4650d68: i32 = sub 0x4650b18, 0x46528b0 [ORD=12] [ID=68]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x4650d68: i32 = S_SUB_I32 0x4650b18, 0x46528b0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4650b18: i32 = xor 0x464e5c8, 0x46528b0 [ORD=12] [ID=67]

  Initial Opcode index to 19053
  Match failed at index 19059
  Continuing at 19267
  Match failed at index 19270
  Continuing at 19365
  Match failed at index 19370
  Continuing at 19713
  Match failed at index 19717
  Continuing at 20162
  Skipped scope entry (due to false predicate) at index 20167, continuing at 20275
  TypeSwitch[i32] from 20278 to 20281
  Skipped scope entry (due to false predicate) at index 20283, continuing at 20384
  Morphed node: 0x4650b18: i32 = S_XOR_B32 0x464e5c8, 0x46528b0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464e5c8: i32 = select 0x4652e78, 0x4652b00, 0x46530c8 [ORD=12] [ID=66]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x464e5c8: i32 = V_CNDMASK_B32_e64 0x46530c8, 0x4652b00, 0x4652e78 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46530c8: i32 = select 0x4652d50, 0x4651ad0, 0x46529d8 [ORD=12] [ID=65]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x46530c8: i32 = V_CNDMASK_B32_e64 0x46529d8, 0x4651ad0, 0x4652d50 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4652d50: i1 = setcc 0x4651f70, 0x464db60, 0x4650fb8 [ORD=12] [ID=64]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Morphed node: 0x4652d50: i1 = V_CMP_EQ_I32_e64 0x4651f70, 0x464db60 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4651f70: i32 = and 0x4652660, 0x46521c0 [ORD=12] [ID=63]

  Initial Opcode index to 18737
  Match failed at index 18742
  Continuing at 18898
  TypeSwitch[i32] from 18902 to 18905
  Skipped scope entry (due to false predicate) at index 18907, continuing at 19008
  Morphed node: 0x4651f70: i32 = S_AND_B32 0x4652660, 0x46521c0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4652660: i32 = select 0x4651e48, 0x464ddb0, 0x464db60 [ORD=12] [ID=62]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x4652660: i32 = V_CNDMASK_B32_e64 0x464db60, 0x464ddb0, 0x4651e48 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4652e78: i1 = setcc 0x46521c0, 0x464db60, 0x4650fb8 [ORD=12] [ID=61]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Morphed node: 0x4652e78: i1 = V_CMP_EQ_I32_e64 0x46521c0, 0x464db60 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46529d8: i32 = sub 0x4651ad0, 0x46507a0 [ORD=12] [ID=60]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x46529d8: i32 = S_SUB_I32 0x4651ad0, 0x46507a0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4652b00: i32 = add 0x4651ad0, 0x46507a0 [ORD=12] [ID=59]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x4652b00: i32 = S_ADD_I32 0x4651ad0, 0x46507a0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4651e48: i1 = setcc 0x4651ad0, 0x46507a0, 0x4651bf8 [ORD=12] [ID=58]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Skipped scope entry (due to false predicate) at index 52330, continuing at 52344
  Skipped scope entry (due to false predicate) at index 52345, continuing at 52359
  Skipped scope entry (due to false predicate) at index 52360, continuing at 52374
  Skipped scope entry (due to false predicate) at index 52375, continuing at 52389
  Skipped scope entry (due to false predicate) at index 52390, continuing at 52404
  Skipped scope entry (due to false predicate) at index 52405, continuing at 52512
  Skipped scope entry (due to false predicate) at index 52513, continuing at 52527
  Skipped scope entry (due to false predicate) at index 52528, continuing at 52542
  Skipped scope entry (due to false predicate) at index 52543, continuing at 52557
  Skipped scope entry (due to false predicate) at index 52558, continuing at 52572
  Skipped scope entry (due to false predicate) at index 52573, continuing at 52587
  Morphed node: 0x4651e48: i1 = V_CMP_GE_U32_e64 0x4651ad0, 0x46507a0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46521c0: i32 = select 0x4652098, 0x464ddb0, 0x464db60 [ORD=12] [ID=57]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x46521c0: i32 = V_CNDMASK_B32_e64 0x464db60, 0x464ddb0, 0x4652098 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4651ad0: i32 = sub 0x4650678, 0x46519a8 [ORD=12] [ID=56]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x4651ad0: i32 = S_SUB_I32 0x4650678, 0x46519a8 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4652098: i1 = setcc 0x4650678, 0x46519a8, 0x4651bf8 [ORD=12] [ID=55]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Skipped scope entry (due to false predicate) at index 52330, continuing at 52344
  Skipped scope entry (due to false predicate) at index 52345, continuing at 52359
  Skipped scope entry (due to false predicate) at index 52360, continuing at 52374
  Skipped scope entry (due to false predicate) at index 52375, continuing at 52389
  Skipped scope entry (due to false predicate) at index 52390, continuing at 52404
  Skipped scope entry (due to false predicate) at index 52405, continuing at 52512
  Skipped scope entry (due to false predicate) at index 52513, continuing at 52527
  Skipped scope entry (due to false predicate) at index 52528, continuing at 52542
  Skipped scope entry (due to false predicate) at index 52543, continuing at 52557
  Skipped scope entry (due to false predicate) at index 52558, continuing at 52572
  Skipped scope entry (due to false predicate) at index 52573, continuing at 52587
  Morphed node: 0x4652098: i1 = V_CMP_GE_U32_e64 0x4650678, 0x46519a8 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46519a8: i32 = mul 0x4651880, 0x46507a0 [ORD=12] [ID=54]

  Initial Opcode index to 42971
  Morphed node: 0x46519a8: i32 = S_MUL_I32 0x4651880, 0x46507a0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4651880: i32 = mulhu 0x4652788, 0x4650678 [ORD=12] [ID=53]

  Initial Opcode index to 45239
  Skipped scope entry (due to false predicate) at index 45245, continuing at 45346
  Skipped scope entry (due to false predicate) at index 45347, continuing at 45448
  Skipped scope entry (due to false predicate) at index 45449, continuing at 45550
  Morphed node: 0x4651880: i32 = V_MUL_HI_U32 0x4652788, 0x4650678 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4652788: i32 = select 0x4651d20, 0x4651508, 0x4651630 [ORD=12] [ID=52]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x4652788: i32 = V_CNDMASK_B32_e64 0x4651630, 0x4651508, 0x4651d20 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4651508: i32 = add 0x46509f0, 0x46513e0 [ORD=12] [ID=51]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x4651508: i32 = S_ADD_I32 0x46509f0, 0x46513e0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4651630: i32 = sub 0x46509f0, 0x46513e0 [ORD=12] [ID=50]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x4651630: i32 = S_SUB_I32 0x46509f0, 0x46513e0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46513e0: i32 = mulhu 0x4651758, 0x46509f0 [ORD=12] [ID=49]

  Initial Opcode index to 45239
  Skipped scope entry (due to false predicate) at index 45245, continuing at 45346
  Skipped scope entry (due to false predicate) at index 45347, continuing at 45448
  Skipped scope entry (due to false predicate) at index 45449, continuing at 45550
  Morphed node: 0x46513e0: i32 = V_MUL_HI_U32 0x4651758, 0x46509f0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4651758: i32 = select 0x4651d20, 0x464e940, 0x4650c40 [ORD=12] [ID=48]

  Initial Opcode index to 49481
  TypeSwitch[i32] from 49486 to 49489
  Morphed node: 0x4651758: i32 = V_CNDMASK_B32_e64 0x4650c40, 0x464e940, 0x4651d20 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464e940: i32 = sub 0x464db60, 0x4650c40 [ORD=12] [ID=47]

  Initial Opcode index to 43686
  Skipped scope entry (due to false predicate) at index 43692, continuing at 43793
  Morphed node: 0x464e940: i32 = S_SUB_I32 0x464db60, 0x4650c40 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4651d20: i1 = setcc 0x4650e90, 0x464db60, 0x4650fb8 [ORD=12] [ID=46]

  Initial Opcode index to 50110
  Skipped scope entry (due to false predicate) at index 50114, continuing at 51200
  Skipped scope entry (due to false predicate) at index 51202, continuing at 52288
  Skipped scope entry (due to false predicate) at index 52300, continuing at 52314
  Skipped scope entry (due to false predicate) at index 52315, continuing at 52329
  Morphed node: 0x4651d20: i1 = V_CMP_EQ_I32_e64 0x4650e90, 0x464db60 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4650c40: i32 = mul 0x46509f0, 0x46507a0 [ORD=12] [ID=45]

  Initial Opcode index to 42971
  Morphed node: 0x4650c40: i32 = S_MUL_I32 0x46509f0, 0x46507a0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4650e90: i32 = mulhu 0x46509f0, 0x46507a0 [ORD=12] [ID=44]

  Initial Opcode index to 45239
  Skipped scope entry (due to false predicate) at index 45245, continuing at 45346
  Skipped scope entry (due to false predicate) at index 45347, continuing at 45448
  Skipped scope entry (due to false predicate) at index 45449, continuing at 45550
  Morphed node: 0x4650e90: i32 = V_MUL_HI_U32 0x46509f0, 0x46507a0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46509f0: i32 = URECIP 0x46507a0 [ORD=12] [ID=43]

  Initial Opcode index to 45567
  Skipped scope entry (due to false predicate) at index 45572, continuing at 45639
  Skipped scope entry (due to false predicate) at index 45640, continuing at 45707
  Created node: 0x4651bf8: i32 = V_CVT_F32_U32_e32 0x46507a0 [ORD=12]

  Created node: 0x464f010: i32 = V_RCP_IFLAG_F32_e32 0x4651bf8 [ORD=12]

  Created node: 0x4655418: i32 = V_MUL_F32_e32 0x4650fb8, 0x464f010 [ORD=12]

  Morphed node: 0x46509f0: i32 = V_CVT_U32_F32_e32 0x4655418 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4650678: i32 = xor 0x4650428, 0x46528b0 [ORD=12] [ID=42]

  Initial Opcode index to 19053
  Match failed at index 19059
  Continuing at 19267
  Match failed at index 19270
  Continuing at 19365
  Match failed at index 19370
  Continuing at 19713
  Match failed at index 19717
  Continuing at 20162
  Skipped scope entry (due to false predicate) at index 20167, continuing at 20275
  TypeSwitch[i32] from 20278 to 20281
  Skipped scope entry (due to false predicate) at index 20283, continuing at 20384
  Morphed node: 0x4650678: i32 = S_XOR_B32 0x4650428, 0x46528b0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46507a0: i32 = xor 0x4650550, 0x464dc88 [ORD=12] [ID=41]

  Initial Opcode index to 19053
  Match failed at index 19059
  Continuing at 19267
  Match failed at index 19270
  Continuing at 19365
  Match failed at index 19370
  Continuing at 19713
  Match failed at index 19717
  Continuing at 20162
  Skipped scope entry (due to false predicate) at index 20167, continuing at 20275
  TypeSwitch[i32] from 20278 to 20281
  Skipped scope entry (due to false predicate) at index 20283, continuing at 20384
  Morphed node: 0x46507a0: i32 = S_XOR_B32 0x4650550, 0x464dc88 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4650428: i32 = add 0x464eb70, 0x46528b0 [ORD=12] [ID=40]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x4650428: i32 = S_ADD_I32 0x464eb70, 0x46528b0 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x4650550: i32 = add 0x464edc0, 0x464dc88 [ORD=12] [ID=39]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x4650550: i32 = S_ADD_I32 0x464edc0, 0x464dc88 [ORD=12]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46528b0: i32 = sra 0x464eb70, 0x46510e0 [ORD=9] [ID=37]

  Initial Opcode index to 42604
  TypeSwitch[i32] from 42608 to 42612
  Morphed node: 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464dc88: i32 = sra 0x464edc0, 0x46510e0 [ORD=11] [ID=36]

  Initial Opcode index to 42604
  TypeSwitch[i32] from 42608 to 42612
  Morphed node: 0x464dc88: i32 = S_ASHR_I32 0x464edc0, 0x46510e0 [ORD=11]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464eb70: i32,ch = load 0x464d270, 0x464e818, 0x464c930<LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=35]

  Initial Opcode index to 5
  Match failed at index 21
  Continuing at 44
  Match failed at index 45
  Continuing at 78
  Match failed at index 81
  Continuing at 106
  Match failed at index 107
  Continuing at 133
  Match failed at index 134
  Continuing at 160
  Match failed at index 161
  Continuing at 187
  Match failed at index 188
  Continuing at 214
  Morphed node: 0x464eb70: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x4655540, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464edc0: i32,ch = load 0x464d270, 0x464ec98, 0x464c930<LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=34]

  Initial Opcode index to 5
  Match failed at index 21
  Continuing at 44
  Match failed at index 45
  Continuing at 78
  Match failed at index 81
  Continuing at 106
  Match failed at index 107
  Continuing at 133
  Match failed at index 134
  Continuing at 160
  Match failed at index 161
  Continuing at 187
  Match failed at index 188
  Continuing at 214
  Morphed node: 0x464edc0: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x464e818, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464e6f0: i64 = shl 0x464e4a0, 0x464eee8 [ORD=8] [ID=30]

  Initial Opcode index to 9283
  Match failed at index 9287
  Continuing at 9329
  TypeSwitch[i64] from 9335 to 9559
  Morphed node: 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464e4a0: i64 = sign_extend 0x464e378 [ORD=7] [ID=29]

  Initial Opcode index to 49520
  TypeSwitch[i64] from 49521 to 49553
  Created node: 0x4655790: i32 = S_ASHR_I32 0x464e378, 0x4655668 [ORD=7]

  Morphed node: 0x464e4a0: i64 = REG_SEQUENCE 0x464ec98, 0x464e378, 0x4653318, 0x4655790, 0x4654d28 [ORD=7]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464e378: i32 = add 0x464f5d8, 0x464e000 [ORD=6] [ID=28]

  Initial Opcode index to 14789
  Match failed at index 14794
  Continuing at 15107
  Match failed at index 15115
  Continuing at 15381
  Skipped scope entry (due to false predicate) at index 15387, continuing at 15488
  Morphed node: 0x464e378: i32 = S_ADD_I32 0x464f5d8, 0x464e000 [ORD=6]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464e000: i32 = mul 0x464f828, 0x464f950 [ORD=4] [ID=26]

  Initial Opcode index to 42971
  Morphed node: 0x464e000: i32 = S_MUL_I32 0x464f828, 0x464f950 [ORD=4]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46558b8: v2i32,ch = load 0x45e7050, 0x464c808, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

  Initial Opcode index to 5
  Match failed at index 13
  Continuing at 972
  Match failed at index 976
  Continuing at 1115
  Skipped scope entry (due to false predicate) at index 1127, continuing at 1158
  Skipped scope entry (due to false predicate) at index 1159, continuing at 1190
  Skipped scope entry (due to false predicate) at index 1191, continuing at 1222
  Skipped scope entry (due to false predicate) at index 1223, continuing at 1254
  Match failed at index 1257
  Continuing at 1311
  Match failed at index 1312
  Continuing at 1374
  Match failed at index 1375
  Continuing at 1406
  Match failed at index 1407
  Continuing at 1438
  Match failed at index 1439
  Continuing at 1470
  Match failed at index 1473
  Continuing at 1500
  Continuing at 1501
  Match failed at index 1503
  Continuing at 1744
  Match failed at index 1749
  Continuing at 1803
  Continuing at 1804
  Match failed at index 1807
  Continuing at 1837
  TypeSwitch[v2i32] from 1848 to 1851
  Match failed at index 1851
  Continuing at 1900
  Match failed at index 1901
  Continuing at 1991
  Match failed at index 1992
  Continuing at 2058
  Continuing at 2059
  Match failed at index 2062
  Continuing at 2088
  Skipped scope entry (due to false predicate) at index 2094, continuing at 2258
  TypeSwitch[v2i32] from 2269 to 2272
  Morphed node: 0x46558b8: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x4656c20, 0x45e7050<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46559e0: i64 = bitcast 0x46558b8 [ORD=1]

  Initial Opcode index to 43384
  Skipped scope entry (due to false predicate) at index 43387, continuing at 43412
  Skipped scope entry (due to false predicate) at index 43413, continuing at 43431
  TypeSwitch[i64] from 43434 to 43437
ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464c6e0: v2i32,ch = load 0x45e7050, 0x464cca8, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

  Initial Opcode index to 5
  Match failed at index 13
  Continuing at 972
  Match failed at index 976
  Continuing at 1115
  Skipped scope entry (due to false predicate) at index 1127, continuing at 1158
  Skipped scope entry (due to false predicate) at index 1159, continuing at 1190
  Skipped scope entry (due to false predicate) at index 1191, continuing at 1222
  Skipped scope entry (due to false predicate) at index 1223, continuing at 1254
  Match failed at index 1257
  Continuing at 1311
  Match failed at index 1312
  Continuing at 1374
  Match failed at index 1375
  Continuing at 1406
  Match failed at index 1407
  Continuing at 1438
  Match failed at index 1439
  Continuing at 1470
  Match failed at index 1473
  Continuing at 1500
  Continuing at 1501
  Match failed at index 1503
  Continuing at 1744
  Match failed at index 1749
  Continuing at 1803
  Continuing at 1804
  Match failed at index 1807
  Continuing at 1837
  TypeSwitch[v2i32] from 1848 to 1851
  Match failed at index 1851
  Continuing at 1900
  Match failed at index 1901
  Continuing at 1991
  Match failed at index 1992
  Continuing at 2058
  Continuing at 2059
  Match failed at index 2062
  Continuing at 2088
  Skipped scope entry (due to false predicate) at index 2094, continuing at 2258
  TypeSwitch[v2i32] from 2269 to 2272
  Morphed node: 0x464c6e0: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464ca58, 0x45e7050<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464c808: i64 = bitcast 0x464c6e0 [ORD=1]

  Initial Opcode index to 43384
  Skipped scope entry (due to false predicate) at index 43387, continuing at 43412
  Skipped scope entry (due to false predicate) at index 43413, continuing at 43431
  TypeSwitch[i64] from 43434 to 43437
ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464cb80: v2i32,ch = load 0x45e7050, 0x464d020, 0x464c930<LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

  Initial Opcode index to 5
  Match failed at index 13
  Continuing at 972
  Match failed at index 976
  Continuing at 1115
  Skipped scope entry (due to false predicate) at index 1127, continuing at 1158
  Skipped scope entry (due to false predicate) at index 1159, continuing at 1190
  Skipped scope entry (due to false predicate) at index 1191, continuing at 1222
  Skipped scope entry (due to false predicate) at index 1223, continuing at 1254
  Match failed at index 1257
  Continuing at 1311
  Match failed at index 1312
  Continuing at 1374
  Match failed at index 1375
  Continuing at 1406
  Match failed at index 1407
  Continuing at 1438
  Match failed at index 1439
  Continuing at 1470
  Match failed at index 1473
  Continuing at 1500
  Continuing at 1501
  Match failed at index 1503
  Continuing at 1744
  Match failed at index 1749
  Continuing at 1803
  Continuing at 1804
  Match failed at index 1807
  Continuing at 1837
  TypeSwitch[v2i32] from 1848 to 1851
  Match failed at index 1851
  Continuing at 1900
  Match failed at index 1901
  Continuing at 1991
  Match failed at index 1992
  Continuing at 2058
  Continuing at 2059
  Match failed at index 2062
  Continuing at 2088
  Skipped scope entry (due to false predicate) at index 2094, continuing at 2258
  TypeSwitch[v2i32] from 2269 to 2272
  Morphed node: 0x464cb80: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464cdd0, 0x45e7050<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464cca8: i64 = bitcast 0x464cb80 [ORD=1]

  Initial Opcode index to 43384
  Skipped scope entry (due to false predicate) at index 43387, continuing at 43412
  Skipped scope entry (due to false predicate) at index 43413, continuing at 43431
  TypeSwitch[i64] from 43434 to 43437
ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464f828: i32,ch = load 0x45e7050, 0x464f700, 0x464c930<LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=22]

  Initial Opcode index to 5
  Match failed at index 19
  Continuing at 44
  Match failed at index 45
  Continuing at 78
  Match failed at index 83
  Continuing at 106
  Match failed at index 107
  Continuing at 133
  Match failed at index 134
  Continuing at 160
  Match failed at index 161
  Continuing at 187
  Match failed at index 188
  Continuing at 214
  Match failed at index 217
  Continuing at 239
  Match failed at index 240
  Continuing at 266
  Match failed at index 267
  Continuing at 293
  Match failed at index 294
  Continuing at 320
  Match failed at index 321
  Continuing at 374
  Match failed at index 375
  Continuing at 400
  Match failed at index 401
  Continuing at 426
  Match failed at index 427
  Continuing at 452
  Match failed at index 455
  Continuing at 476
  Match failed at index 477
  Continuing at 512
  Match failed at index 513
  Continuing at 548
  Match failed at index 549
  Continuing at 584
  Match failed at index 585
  Continuing at 620
  Match failed at index 623
  Continuing at 654
  Match failed at index 656
  Continuing at 920
  Morphed node: 0x464f828: i32,ch = S_LOAD_DWORD_IMM 0x464c5b8, 0x464cef8, 0x45e7050<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x46510e0: i32 = Constant<31> [ID=14]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Morphed node: 0x46510e0: i32 = S_MOV_B32 0x4655668

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464ddb0: i32 = Constant<-1> [ID=11]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Skipped scope entry (due to false predicate) at index 43304, continuing at 43318
  Morphed node: 0x464ddb0: i32 = V_MOV_B32_e32 0x464e250

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464db60: i32 = Constant<0> [ID=10]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Morphed node: 0x46531f0: i32 = S_MOV_B32 0x4650300

ISEL: Match complete!
ISEL: Starting pattern match on root node: 0x464eee8: i32 = Constant<2> [ID=6]

  Initial Opcode index to 43298
  TypeSwitch[i32] from 43299 to 43302
  Morphed node: 0x464eee8: i32 = S_MOV_B32 0x4654d28

ISEL: Match complete!
===== Instruction selection ends:
Selected selection DAG: BB#0 'remainder_intint:entry'
SelectionDAG has 84 nodes:
  0x45e7050: ch = EntryToken

    0x464e250: i32 = TargetConstant<-1>

  0x464ddb0: i32 = V_MOV_B32_e32 0x464e250

    0x4655668: <multiple use>
  0x46510e0: i32 = S_MOV_B32 0x4655668

    0x45e7050: <multiple use>
    0x464c490: i64 = Register %vreg0

  0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1]

    0x46558b8: <multiple use>
    0x464c6e0: <multiple use>
    0x464cb80: <multiple use>
  0x464d270: ch = TokenFactor 0x46558b8:1, 0x464c6e0:1, 0x464cb80:1 [ORD=1]

      0x45e7050: <multiple use>
      0x464f4b0: i32 = Register %vreg2

    0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0

        0x464c5b8: <multiple use>
        0x464cef8: i32 = TargetConstant<6>

        0x45e7050: <multiple use>
      0x464f828: i32,ch = S_LOAD_DWORD_IMM 0x464c5b8, 0x464cef8, 0x45e7050<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3]

        0x45e7050: <multiple use>
        0x464ded8: i32 = Register %vreg3

      0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8

    0x464e000: i32 = S_MUL_I32 0x464f828, 0x464f950 [ORD=4]

  0x464e378: i32 = S_ADD_I32 0x464f5d8, 0x464e000 [ORD=6]

      0x464ec98: i32 = TargetConstant<33>

      0x464e378: <multiple use>
      0x4653318: <multiple use>
        0x464e378: <multiple use>
        0x4655668: <multiple use>
      0x4655790: i32 = S_ASHR_I32 0x464e378, 0x4655668 [ORD=7]

      0x4654d28: <multiple use>
    0x464e4a0: i64 = REG_SEQUENCE 0x464ec98, 0x464e378, 0x4653318, 0x4655790, 0x4654d28 [ORD=7]

      0x4654d28: <multiple use>
    0x464eee8: i32 = S_MOV_B32 0x4654d28

  0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8]

    0x464e6f0: <multiple use>
      0x4654f78: <multiple use>
      0x464c6e0: <multiple use>
      0x46550a0: <multiple use>
      0x4654e50: <multiple use>
      0x46551c8: <multiple use>
    0x464e818: v4i32 = REG_SEQUENCE 0x4654f78, 0x464c6e0, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=10]

    0x4650300: <multiple use>
    0x4652fa0: <multiple use>
    0x464e128: <multiple use>
    0x464e128: <multiple use>
    0x464e128: <multiple use>
    0x464d270: <multiple use>
  0x464edc0: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x464e818, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11]

    0x464e6f0: <multiple use>
      0x4654f78: <multiple use>
      0x46558b8: <multiple use>
      0x46550a0: <multiple use>
      0x4654e50: <multiple use>
      0x46551c8: <multiple use>
    0x4655540: v4i32 = REG_SEQUENCE 0x4654f78, 0x46558b8, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=8]

    0x4650300: <multiple use>
    0x4652fa0: <multiple use>
    0x464e128: <multiple use>
    0x464e128: <multiple use>
    0x464e128: <multiple use>
    0x464d270: <multiple use>
  0x464eb70: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x4655540, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9]

    0x464edc0: <multiple use>
    0x46510e0: <multiple use>
  0x464dc88: i32 = S_ASHR_I32 0x464edc0, 0x46510e0 [ORD=11]

    0x464eb70: <multiple use>
    0x46510e0: <multiple use>
  0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9]

      0x464edc0: <multiple use>
      0x464dc88: <multiple use>
    0x4650550: i32 = S_ADD_I32 0x464edc0, 0x464dc88 [ORD=12]

    0x464dc88: <multiple use>
  0x46507a0: i32 = S_XOR_B32 0x4650550, 0x464dc88 [ORD=12]

      0x464eb70: <multiple use>
      0x46528b0: <multiple use>
    0x4650428: i32 = S_ADD_I32 0x464eb70, 0x46528b0 [ORD=12]

    0x46528b0: <multiple use>
  0x4650678: i32 = S_XOR_B32 0x4650428, 0x46528b0 [ORD=12]

      0x4650fb8: i32 = TargetConstant<1333788672>

          0x46507a0: <multiple use>
        0x4651bf8: i32 = V_CVT_F32_U32_e32 0x46507a0 [ORD=12]

      0x464f010: i32 = V_RCP_IFLAG_F32_e32 0x4651bf8 [ORD=12]

    0x4655418: i32 = V_MUL_F32_e32 0x4650fb8, 0x464f010 [ORD=12]

  0x46509f0: i32 = V_CVT_U32_F32_e32 0x4655418 [ORD=12]

    0x46509f0: <multiple use>
    0x46507a0: <multiple use>
  0x4650c40: i32 = S_MUL_I32 0x46509f0, 0x46507a0 [ORD=12]

      0x46509f0: <multiple use>
      0x46507a0: <multiple use>
    0x4650e90: i32 = V_MUL_HI_U32 0x46509f0, 0x46507a0 [ORD=12]

    0x46531f0: <multiple use>
  0x4651d20: i1 = V_CMP_EQ_I32_e64 0x4650e90, 0x46531f0 [ORD=12]

      0x4650c40: <multiple use>
        0x46531f0: <multiple use>
        0x4650c40: <multiple use>
      0x464e940: i32 = S_SUB_I32 0x46531f0, 0x4650c40 [ORD=12]

      0x4651d20: <multiple use>
    0x4651758: i32 = V_CNDMASK_B32_e64 0x4650c40, 0x464e940, 0x4651d20 [ORD=12]

    0x46509f0: <multiple use>
  0x46513e0: i32 = V_MUL_HI_U32 0x4651758, 0x46509f0 [ORD=12]

          0x46509f0: <multiple use>
          0x46513e0: <multiple use>
        0x4651630: i32 = S_SUB_I32 0x46509f0, 0x46513e0 [ORD=12]

          0x46509f0: <multiple use>
          0x46513e0: <multiple use>
        0x4651508: i32 = S_ADD_I32 0x46509f0, 0x46513e0 [ORD=12]

        0x4651d20: <multiple use>
      0x4652788: i32 = V_CNDMASK_B32_e64 0x4651630, 0x4651508, 0x4651d20 [ORD=12]

      0x4650678: <multiple use>
    0x4651880: i32 = V_MUL_HI_U32 0x4652788, 0x4650678 [ORD=12]

    0x46507a0: <multiple use>
  0x46519a8: i32 = S_MUL_I32 0x4651880, 0x46507a0 [ORD=12]

    0x4650678: <multiple use>
    0x46519a8: <multiple use>
  0x4651ad0: i32 = S_SUB_I32 0x4650678, 0x46519a8 [ORD=12]

    0x46531f0: <multiple use>
    0x464ddb0: <multiple use>
      0x4650678: <multiple use>
      0x46519a8: <multiple use>
    0x4652098: i1 = V_CMP_GE_U32_e64 0x4650678, 0x46519a8 [ORD=12]

  0x46521c0: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4652098 [ORD=12]

  0x464e128: i1 = TargetConstant<0>

  0x4650300: i32 = TargetConstant<0>

  0x4652fa0: i16 = TargetConstant<0>

    0x4650300: <multiple use>
  0x46531f0: i32 = S_MOV_B32 0x4650300

  0x4653318: i32 = TargetConstant<1>

  0x4654d28: i32 = TargetConstant<2>

    0x4652c28: i32 = TargetConstant<34>

    0x46531f0: <multiple use>
    0x4653318: <multiple use>
      0x4653440: i32 = TargetConstant<61440>

    0x4654c00: i32 = S_MOV_B32 0x4653440 [ORD=8]

    0x4654d28: <multiple use>
  0x4654e50: v2i32 = REG_SEQUENCE 0x4652c28, 0x46531f0, 0x4653318, 0x4654c00, 0x4654d28 [ORD=8]

  0x4654f78: i32 = TargetConstant<43>

  0x46550a0: i32 = TargetConstant<17>

  0x46551c8: i32 = TargetConstant<18>

  0x4655668: i32 = TargetConstant<31>

    0x464c5b8: <multiple use>
    0x4656c20: i32 = TargetConstant<9>

    0x45e7050: <multiple use>
  0x46558b8: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x4656c20, 0x45e7050<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

    0x464c5b8: <multiple use>
    0x464ca58: i32 = TargetConstant<11>

    0x45e7050: <multiple use>
  0x464c6e0: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464ca58, 0x45e7050<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

    0x464c5b8: <multiple use>
    0x464cdd0: i32 = TargetConstant<13>

    0x45e7050: <multiple use>
  0x464cb80: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464cdd0, 0x45e7050<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1]

                0x4651ad0: <multiple use>
                0x46507a0: <multiple use>
              0x46529d8: i32 = S_SUB_I32 0x4651ad0, 0x46507a0 [ORD=12]

              0x4651ad0: <multiple use>
                    0x46531f0: <multiple use>
                    0x464ddb0: <multiple use>
                      0x4651ad0: <multiple use>
                      0x46507a0: <multiple use>
                    0x4651e48: i1 = V_CMP_GE_U32_e64 0x4651ad0, 0x46507a0 [ORD=12]

                  0x4652660: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4651e48 [ORD=12]

                  0x46521c0: <multiple use>
                0x4651f70: i32 = S_AND_B32 0x4652660, 0x46521c0 [ORD=12]

                0x46531f0: <multiple use>
              0x4652d50: i1 = V_CMP_EQ_I32_e64 0x4651f70, 0x46531f0 [ORD=12]

            0x46530c8: i32 = V_CNDMASK_B32_e64 0x46529d8, 0x4651ad0, 0x4652d50 [ORD=12]

              0x4651ad0: <multiple use>
              0x46507a0: <multiple use>
            0x4652b00: i32 = S_ADD_I32 0x4651ad0, 0x46507a0 [ORD=12]

              0x46521c0: <multiple use>
              0x46531f0: <multiple use>
            0x4652e78: i1 = V_CMP_EQ_I32_e64 0x46521c0, 0x46531f0 [ORD=12]

          0x464e5c8: i32 = V_CNDMASK_B32_e64 0x46530c8, 0x4652b00, 0x4652e78 [ORD=12]

          0x46528b0: <multiple use>
        0x4650b18: i32 = S_XOR_B32 0x464e5c8, 0x46528b0 [ORD=12]

        0x46528b0: <multiple use>
      0x4650d68: i32 = S_SUB_I32 0x4650b18, 0x46528b0 [ORD=12]

      0x464e6f0: <multiple use>
        0x4654f78: <multiple use>
        0x464cb80: <multiple use>
        0x46550a0: <multiple use>
        0x4654e50: <multiple use>
        0x46551c8: <multiple use>
      0x46552f0: v4i32 = REG_SEQUENCE 0x4654f78, 0x464cb80, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=13]

      0x4650300: <multiple use>
      0x4652fa0: <multiple use>
      0x464e128: <multiple use>
      0x464e128: <multiple use>
      0x464e128: <multiple use>
        0x464eb70: <multiple use>
        0x464edc0: <multiple use>
      0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14]

    0x464f260: ch = BUFFER_STORE_DWORD_ADDR64 0x4650d68, 0x464e6f0, 0x46552f0, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464f138<Mem:ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14]

  0x464f388: ch = S_ENDPGM 0x464f260 [ORD=15]


********** List Scheduling BB#0 'entry' **********
SU(0): 0x464f388: ch = S_ENDPGM 0x464f260 [ORD=15] [ID=0]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 0
  Predecessors:
   ch  SU(1): Latency=1

SU(1): 0x464f260: ch = BUFFER_STORE_DWORD_ADDR64 0x4650d68, 0x464e6f0, 0x46552f0, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464f138<Mem:ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=1]

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 1
  Predecessors:
   val SU(22): Latency=1
   val SU(14): Latency=1
   val SU(13): Latency=1
   ch  SU(2): Latency=0
  Successors:
   ch  SU(0): Latency=1

SU(2): 0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=2]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 1
  Predecessors:
   ch  SU(11): Latency=1
   ch  SU(3): Latency=1
  Successors:
   ch  SU(1): Latency=0

SU(3): 0x464edc0: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x464e818, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=3]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 7
  Height             : 26
  Predecessors:
   val SU(14): Latency=1
   val SU(7): Latency=1
   ch  SU(4): Latency=0
  Successors:
   ch  SU(2): Latency=1
   val SU(32): Latency=1
   val SU(33): Latency=1

SU(4): 0x464d270: ch = TokenFactor 0x46558b8:1, 0x464c6e0:1, 0x464cb80:1 [ORD=1] [ID=4]

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 26
  Predecessors:
   ch  SU(5): Latency=1
  Successors:
   ch  SU(3): Latency=0
   ch  SU(11): Latency=0

SU(5): 0x464cb80: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464cdd0, 0x45e7050, 0x464c6e0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464f828: i32,ch,glue = S_LOAD_DWORD_IMM 0x464c5b8, 0x464cef8, 0x45e7050<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=5]

    0x46558b8: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x4656c20, 0x45e7050, 0x464f828:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464c6e0: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464ca58, 0x45e7050, 0x46558b8:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 4
  Latency            : 1
  Depth              : 1
  Height             : 32
  Predecessors:
   val SU(6): Latency=1
  Successors:
   ch  SU(4): Latency=1
   val SU(7): Latency=1
   val SU(12): Latency=1
   val SU(13): Latency=1
   val SU(19): Latency=1

SU(6): 0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=6]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 33
  Successors:
   val SU(5): Latency=1

SU(7): 0x464e818: v4i32 = REG_SEQUENCE 0x4654f78, 0x464c6e0, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=10] [ID=7]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 27
  Predecessors:
   val SU(5): Latency=1
   val SU(8): Latency=1
  Successors:
   val SU(3): Latency=1

SU(8): 0x4654e50: v2i32 = REG_SEQUENCE 0x4652c28, 0x46531f0, 0x4653318, 0x4654c00, 0x4654d28 [ORD=8] [ID=8]

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 28
  Predecessors:
   val SU(10): Latency=1
   val SU(9): Latency=1
  Successors:
   val SU(7): Latency=1
   val SU(12): Latency=1
   val SU(13): Latency=1

SU(9): 0x4654c00: i32 = S_MOV_B32 0x4653440 [ORD=8] [ID=9]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 29
  Successors:
   val SU(8): Latency=1

SU(10): 0x46531f0: i32 = S_MOV_B32 0x4650300 [ID=10]

  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 29
  Successors:
   val SU(8): Latency=1
   val SU(27): Latency=1
   val SU(28): Latency=1
   val SU(36): Latency=1
   val SU(45): Latency=1
   val SU(54): Latency=1
   val SU(56): Latency=1

SU(11): 0x464eb70: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x4655540, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=11]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
   val SU(14): Latency=1
   val SU(12): Latency=1
   ch  SU(4): Latency=0
  Successors:
   ch  SU(2): Latency=1
   val SU(23): Latency=1
   val SU(49): Latency=1

SU(12): 0x4655540: v4i32 = REG_SEQUENCE 0x4654f78, 0x46558b8, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=8] [ID=12]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 17
  Predecessors:
   val SU(5): Latency=1
   val SU(8): Latency=1
  Successors:
   val SU(11): Latency=1

SU(13): 0x46552f0: v4i32 = REG_SEQUENCE 0x4654f78, 0x464cb80, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=13] [ID=13]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
   val SU(5): Latency=1
   val SU(8): Latency=1
  Successors:
   val SU(1): Latency=1

SU(14): 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8] [ID=14]

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 27
  Predecessors:
   val SU(16): Latency=1
   val SU(15): Latency=1
  Successors:
   val SU(1): Latency=1
   val SU(3): Latency=1
   val SU(11): Latency=1

SU(15): 0x464eee8: i32 = S_MOV_B32 0x4654d28 [ID=15]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 28
  Successors:
   val SU(14): Latency=1

SU(16): 0x464e4a0: i64 = REG_SEQUENCE 0x464ec98, 0x464e378, 0x4653318, 0x4655790, 0x4654d28 [ORD=7] [ID=16]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 28
  Predecessors:
   val SU(18): Latency=1
   val SU(17): Latency=1
  Successors:
   val SU(14): Latency=1

SU(17): 0x4655790: i32 = S_ASHR_I32 0x464e378, 0x4655668 [ORD=7] [ID=17]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 29
  Predecessors:
   val SU(18): Latency=1
  Successors:
   val SU(16): Latency=1

SU(18): 0x464e378: i32 = S_ADD_I32 0x464f5d8, 0x464e000 [ORD=6] [ID=18]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 30
  Predecessors:
   val SU(21): Latency=1
   val SU(19): Latency=1
  Successors:
   val SU(16): Latency=1
   val SU(17): Latency=1

SU(19): 0x464e000: i32 = S_MUL_I32 0x464f828, 0x464f950 [ORD=4] [ID=19]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 31
  Predecessors:
   val SU(5): Latency=1
   val SU(20): Latency=1
  Successors:
   val SU(18): Latency=1

SU(20): 0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8 [ID=20]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 32
  Successors:
   val SU(19): Latency=1

SU(21): 0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0 [ID=21]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 31
  Successors:
   val SU(18): Latency=1

SU(22): 0x4650d68: i32 = S_SUB_I32 0x4650b18, 0x46528b0 [ORD=12] [ID=22]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 31
  Height             : 2
  Predecessors:
   val SU(25): Latency=1
   val SU(23): Latency=1
  Successors:
   val SU(1): Latency=1

SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]

  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 1
  Latency            : 1
  Depth              : 8
  Height             : 15
  Predecessors:
   val SU(11): Latency=1
   val SU(24): Latency=1
  Successors:
   val SU(22): Latency=1
   val SU(25): Latency=1
   val SU(48): Latency=1
   val SU(49): Latency=1

SU(24): 0x46510e0: i32 = S_MOV_B32 0x4655668 [ID=24]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 26
  Successors:
   val SU(23): Latency=1
   val SU(32): Latency=1

SU(25): 0x4650b18: i32 = S_XOR_B32 0x464e5c8, 0x46528b0 [ORD=12] [ID=25]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 30
  Height             : 3
  Predecessors:
   val SU(26): Latency=1
   val SU(23): Latency=1
  Successors:
   val SU(22): Latency=1

SU(26): 0x464e5c8: i32 = V_CNDMASK_B32_e64 0x46530c8, 0x4652b00, 0x4652e78 [ORD=12] [ID=26]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 29
  Height             : 4
  Predecessors:
   val SU(53): Latency=1
   val SU(51): Latency=1
   val SU(27): Latency=1
  Successors:
   val SU(25): Latency=1

SU(27): 0x4652e78: i1 = V_CMP_EQ_I32_e64 0x46521c0, 0x46531f0 [ORD=12] [ID=27]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 25
  Height             : 5
  Predecessors:
   val SU(28): Latency=1
   val SU(10): Latency=1
  Successors:
   val SU(26): Latency=1

SU(28): 0x46521c0: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4652098 [ORD=12] [ID=28]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 24
  Height             : 8
  Predecessors:
   val SU(10): Latency=1
   val SU(50): Latency=1
   val SU(29): Latency=1
  Successors:
   val SU(27): Latency=1
   val SU(55): Latency=1

SU(29): 0x4652098: i1 = V_CMP_GE_U32_e64 0x4650678, 0x46519a8 [ORD=12] [ID=29]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 23
  Height             : 9
  Predecessors:
   val SU(48): Latency=1
   val SU(30): Latency=1
  Successors:
   val SU(28): Latency=1

SU(30): 0x46519a8: i32 = S_MUL_I32 0x4651880, 0x46507a0 [ORD=12] [ID=30]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 22
  Height             : 11
  Predecessors:
   val SU(34): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(29): Latency=1
   val SU(52): Latency=1

SU(31): 0x46507a0: i32 = S_XOR_B32 0x4650550, 0x464dc88 [ORD=12] [ID=31]

  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 1
  Latency            : 1
  Depth              : 10
  Height             : 23
  Predecessors:
   val SU(33): Latency=1
   val SU(32): Latency=1
  Successors:
   val SU(30): Latency=1
   val SU(37): Latency=1
   val SU(41): Latency=1
   val SU(46): Latency=1
   val SU(51): Latency=1
   val SU(57): Latency=1
   val SU(58): Latency=1

SU(32): 0x464dc88: i32 = S_ASHR_I32 0x464edc0, 0x46510e0 [ORD=11] [ID=32]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 8
  Height             : 25
  Predecessors:
   val SU(3): Latency=1
   val SU(24): Latency=1
  Successors:
   val SU(31): Latency=1
   val SU(33): Latency=1

SU(33): 0x4650550: i32 = S_ADD_I32 0x464edc0, 0x464dc88 [ORD=12] [ID=33]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 9
  Height             : 24
  Predecessors:
   val SU(3): Latency=1
   val SU(32): Latency=1
  Successors:
   val SU(31): Latency=1

SU(34): 0x4651880: i32 = V_MUL_HI_U32 0x4652788, 0x4650678 [ORD=12] [ID=34]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 21
  Height             : 12
  Predecessors:
   val SU(35): Latency=1
   val SU(48): Latency=1
  Successors:
   val SU(30): Latency=1

SU(35): 0x4652788: i32 = V_CNDMASK_B32_e64 0x4651630, 0x4651508, 0x4651d20 [ORD=12] [ID=35]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 20
  Height             : 13
  Predecessors:
   val SU(47): Latency=1
   val SU(42): Latency=1
   val SU(36): Latency=1
  Successors:
   val SU(34): Latency=1

SU(36): 0x4651d20: i1 = V_CMP_EQ_I32_e64 0x4650e90, 0x46531f0 [ORD=12] [ID=36]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 16
  Height             : 17
  Predecessors:
   val SU(37): Latency=1
   val SU(10): Latency=1
  Successors:
   val SU(35): Latency=1
   val SU(44): Latency=1

SU(37): 0x4650e90: i32 = V_MUL_HI_U32 0x46509f0, 0x46507a0 [ORD=12] [ID=37]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 15
  Height             : 18
  Predecessors:
   val SU(38): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(36): Latency=1

SU(38): 0x46509f0: i32 = V_CVT_U32_F32_e32 0x4655418 [ORD=12] [ID=38]

  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 1
  Latency            : 1
  Depth              : 14
  Height             : 19
  Predecessors:
   val SU(39): Latency=1
  Successors:
   val SU(37): Latency=1
   val SU(42): Latency=1
   val SU(43): Latency=1
   val SU(46): Latency=1
   val SU(47): Latency=1

SU(39): 0x4655418: i32 = V_MUL_F32_e32 0x4650fb8, 0x464f010 [ORD=12] [ID=39]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 13
  Height             : 20
  Predecessors:
   val SU(40): Latency=1
  Successors:
   val SU(38): Latency=1

SU(40): 0x464f010: i32 = V_RCP_IFLAG_F32_e32 0x4651bf8 [ORD=12] [ID=40]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 12
  Height             : 21
  Predecessors:
   val SU(41): Latency=1
  Successors:
   val SU(39): Latency=1

SU(41): 0x4651bf8: i32 = V_CVT_F32_U32_e32 0x46507a0 [ORD=12] [ID=41]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 11
  Height             : 22
  Predecessors:
   val SU(31): Latency=1
  Successors:
   val SU(40): Latency=1

SU(42): 0x4651508: i32 = S_ADD_I32 0x46509f0, 0x46513e0 [ORD=12] [ID=42]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 19
  Height             : 14
  Predecessors:
   val SU(38): Latency=1
   val SU(43): Latency=1
  Successors:
   val SU(35): Latency=1

SU(43): 0x46513e0: i32 = V_MUL_HI_U32 0x4651758, 0x46509f0 [ORD=12] [ID=43]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 18
  Height             : 15
  Predecessors:
   val SU(44): Latency=1
   val SU(38): Latency=1
  Successors:
   val SU(42): Latency=1
   val SU(47): Latency=1

SU(44): 0x4651758: i32 = V_CNDMASK_B32_e64 0x4650c40, 0x464e940, 0x4651d20 [ORD=12] [ID=44]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 17
  Height             : 16
  Predecessors:
   val SU(46): Latency=1
   val SU(45): Latency=1
   val SU(36): Latency=1
  Successors:
   val SU(43): Latency=1

SU(45): 0x464e940: i32 = S_SUB_I32 0x46531f0, 0x4650c40 [ORD=12] [ID=45]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 16
  Height             : 17
  Predecessors:
   val SU(10): Latency=1
   val SU(46): Latency=1
  Successors:
   val SU(44): Latency=1

SU(46): 0x4650c40: i32 = S_MUL_I32 0x46509f0, 0x46507a0 [ORD=12] [ID=46]

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 15
  Height             : 18
  Predecessors:
   val SU(38): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(44): Latency=1
   val SU(45): Latency=1

SU(47): 0x4651630: i32 = S_SUB_I32 0x46509f0, 0x46513e0 [ORD=12] [ID=47]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 19
  Height             : 14
  Predecessors:
   val SU(38): Latency=1
   val SU(43): Latency=1
  Successors:
   val SU(35): Latency=1

SU(48): 0x4650678: i32 = S_XOR_B32 0x4650428, 0x46528b0 [ORD=12] [ID=48]

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 10
  Height             : 13
  Predecessors:
   val SU(49): Latency=1
   val SU(23): Latency=1
  Successors:
   val SU(29): Latency=1
   val SU(34): Latency=1
   val SU(52): Latency=1

SU(49): 0x4650428: i32 = S_ADD_I32 0x464eb70, 0x46528b0 [ORD=12] [ID=49]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 9
  Height             : 14
  Predecessors:
   val SU(11): Latency=1
   val SU(23): Latency=1
  Successors:
   val SU(48): Latency=1

SU(50): 0x464ddb0: i32 = V_MOV_B32_e32 0x464e250 [ID=50]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
   val SU(28): Latency=1
   val SU(56): Latency=1

SU(51): 0x4652b00: i32 = S_ADD_I32 0x4651ad0, 0x46507a0 [ORD=12] [ID=51]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 24
  Height             : 5
  Predecessors:
   val SU(52): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(26): Latency=1

SU(52): 0x4651ad0: i32 = S_SUB_I32 0x4650678, 0x46519a8 [ORD=12] [ID=52]

  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 1
  Latency            : 1
  Depth              : 23
  Height             : 10
  Predecessors:
   val SU(48): Latency=1
   val SU(30): Latency=1
  Successors:
   val SU(51): Latency=1
   val SU(53): Latency=1
   val SU(57): Latency=1
   val SU(58): Latency=1

SU(53): 0x46530c8: i32 = V_CNDMASK_B32_e64 0x46529d8, 0x4651ad0, 0x4652d50 [ORD=12] [ID=53]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 28
  Height             : 5
  Predecessors:
   val SU(58): Latency=1
   val SU(52): Latency=1
   val SU(54): Latency=1
  Successors:
   val SU(26): Latency=1

SU(54): 0x4652d50: i1 = V_CMP_EQ_I32_e64 0x4651f70, 0x46531f0 [ORD=12] [ID=54]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 27
  Height             : 6
  Predecessors:
   val SU(55): Latency=1
   val SU(10): Latency=1
  Successors:
   val SU(53): Latency=1

SU(55): 0x4651f70: i32 = S_AND_B32 0x4652660, 0x46521c0 [ORD=12] [ID=55]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 26
  Height             : 7
  Predecessors:
   val SU(56): Latency=1
   val SU(28): Latency=1
  Successors:
   val SU(54): Latency=1

SU(56): 0x4652660: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4651e48 [ORD=12] [ID=56]

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 25
  Height             : 8
  Predecessors:
   val SU(10): Latency=1
   val SU(50): Latency=1
   val SU(57): Latency=1
  Successors:
   val SU(55): Latency=1

SU(57): 0x4651e48: i1 = V_CMP_GE_U32_e64 0x4651ad0, 0x46507a0 [ORD=12] [ID=57]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 24
  Height             : 9
  Predecessors:
   val SU(52): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(56): Latency=1

SU(58): 0x46529d8: i32 = S_SUB_I32 0x4651ad0, 0x46507a0 [ORD=12] [ID=58]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 24
  Height             : 6
  Predecessors:
   val SU(52): Latency=1
   val SU(31): Latency=1
  Successors:
   val SU(53): Latency=1


Examining Available:
Height 0: SU(0): 0x464f388: ch = S_ENDPGM 0x464f260 [ORD=15] [ID=0]


*** Scheduling [0]: SU(0): 0x464f388: ch = S_ENDPGM 0x464f260 [ORD=15] [ID=0]


Examining Available:
Height 1: SU(1): 0x464f260: ch = BUFFER_STORE_DWORD_ADDR64 0x4650d68, 0x464e6f0, 0x46552f0, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464f138<Mem:ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=1]


*** Scheduling [1]: SU(1): 0x464f260: ch = BUFFER_STORE_DWORD_ADDR64 0x4650d68, 0x464e6f0, 0x46552f0, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464f138<Mem:ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=1]


Examining Available:
Height 1: SU(2): 0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=2]

Height 2: SU(13): 0x46552f0: v4i32 = REG_SEQUENCE 0x4654f78, 0x464cb80, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=13] [ID=13]

Height 2: SU(22): 0x4650d68: i32 = S_SUB_I32 0x4650b18, 0x46528b0 [ORD=12] [ID=22]


*** Scheduling [2]: SU(2): 0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=2]


Examining Available:
Height 2: SU(13): 0x46552f0: v4i32 = REG_SEQUENCE 0x4654f78, 0x464cb80, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=13] [ID=13]

Height 2: SU(22): 0x4650d68: i32 = S_SUB_I32 0x4650b18, 0x46528b0 [ORD=12] [ID=22]


*** Scheduling [3]: SU(13): 0x46552f0: v4i32 = REG_SEQUENCE 0x4654f78, 0x464cb80, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=13] [ID=13]


Examining Available:
Height 2: SU(22): 0x4650d68: i32 = S_SUB_I32 0x4650b18, 0x46528b0 [ORD=12] [ID=22]


*** Scheduling [4]: SU(22): 0x4650d68: i32 = S_SUB_I32 0x4650b18, 0x46528b0 [ORD=12] [ID=22]


Examining Available:
Height 5: SU(25): 0x4650b18: i32 = S_XOR_B32 0x464e5c8, 0x46528b0 [ORD=12] [ID=25]


*** Scheduling [5]: SU(25): 0x4650b18: i32 = S_XOR_B32 0x464e5c8, 0x46528b0 [ORD=12] [ID=25]


Examining Available:
Height 6: SU(26): 0x464e5c8: i32 = V_CNDMASK_B32_e64 0x46530c8, 0x4652b00, 0x4652e78 [ORD=12] [ID=26]


*** Scheduling [6]: SU(26): 0x464e5c8: i32 = V_CNDMASK_B32_e64 0x46530c8, 0x4652b00, 0x4652e78 [ORD=12] [ID=26]


Examining Available:
  Comparing latency of SU (51) depth 24 vs SU (27) depth 25
Height 7: SU(27): 0x4652e78: i1 = V_CMP_EQ_I32_e64 0x46521c0, 0x46531f0 [ORD=12] [ID=27]

Height 7: SU(51): 0x4652b00: i32 = S_ADD_I32 0x4651ad0, 0x46507a0 [ORD=12] [ID=51]

Height 7: SU(53): 0x46530c8: i32 = V_CNDMASK_B32_e64 0x46529d8, 0x4651ad0, 0x4652d50 [ORD=12] [ID=53]

  Comparing latency of SU (51) depth 24 vs SU (27) depth 25

*** Scheduling [7]: SU(27): 0x4652e78: i1 = V_CMP_EQ_I32_e64 0x46521c0, 0x46531f0 [ORD=12] [ID=27]


Examining Available:
Height 7: SU(51): 0x4652b00: i32 = S_ADD_I32 0x4651ad0, 0x46507a0 [ORD=12] [ID=51]

Height 7: SU(53): 0x46530c8: i32 = V_CNDMASK_B32_e64 0x46529d8, 0x4651ad0, 0x4652d50 [ORD=12] [ID=53]


*** Scheduling [8]: SU(51): 0x4652b00: i32 = S_ADD_I32 0x4651ad0, 0x46507a0 [ORD=12] [ID=51]


Examining Available:
Height 7: SU(53): 0x46530c8: i32 = V_CNDMASK_B32_e64 0x46529d8, 0x4651ad0, 0x4652d50 [ORD=12] [ID=53]


*** Scheduling [9]: SU(53): 0x46530c8: i32 = V_CNDMASK_B32_e64 0x46529d8, 0x4651ad0, 0x4652d50 [ORD=12] [ID=53]


Examining Available:
Height 10: SU(58): 0x46529d8: i32 = S_SUB_I32 0x4651ad0, 0x46507a0 [ORD=12] [ID=58]

Height 10: SU(54): 0x4652d50: i1 = V_CMP_EQ_I32_e64 0x4651f70, 0x46531f0 [ORD=12] [ID=54]


*** Scheduling [10]: SU(58): 0x46529d8: i32 = S_SUB_I32 0x4651ad0, 0x46507a0 [ORD=12] [ID=58]


Examining Available:
Height 10: SU(54): 0x4652d50: i1 = V_CMP_EQ_I32_e64 0x4651f70, 0x46531f0 [ORD=12] [ID=54]


*** Scheduling [11]: SU(54): 0x4652d50: i1 = V_CMP_EQ_I32_e64 0x4651f70, 0x46531f0 [ORD=12] [ID=54]


Examining Available:
Height 12: SU(55): 0x4651f70: i32 = S_AND_B32 0x4652660, 0x46521c0 [ORD=12] [ID=55]


*** Scheduling [12]: SU(55): 0x4651f70: i32 = S_AND_B32 0x4652660, 0x46521c0 [ORD=12] [ID=55]


Examining Available:
  Comparing latency of SU (56) depth 25 vs SU (28) depth 24
Height 13: SU(56): 0x4652660: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4651e48 [ORD=12] [ID=56]

Height 13: SU(28): 0x46521c0: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4652098 [ORD=12] [ID=28]

  Comparing latency of SU (56) depth 25 vs SU (28) depth 24

*** Scheduling [13]: SU(56): 0x4652660: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4651e48 [ORD=12] [ID=56]


Examining Available:
Height 14: SU(57): 0x4651e48: i1 = V_CMP_GE_U32_e64 0x4651ad0, 0x46507a0 [ORD=12] [ID=57]

Height 13: SU(28): 0x46521c0: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4652098 [ORD=12] [ID=28]


*** Scheduling [14]: SU(57): 0x4651e48: i1 = V_CMP_GE_U32_e64 0x4651ad0, 0x46507a0 [ORD=12] [ID=57]


Examining Available:
Height 15: SU(52): 0x4651ad0: i32 = S_SUB_I32 0x4650678, 0x46519a8 [ORD=12] [ID=52]

Height 13: SU(28): 0x46521c0: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4652098 [ORD=12] [ID=28]


*** Scheduling [15]: SU(52): 0x4651ad0: i32 = S_SUB_I32 0x4650678, 0x46519a8 [ORD=12] [ID=52]


Examining Available:
Height 13: SU(28): 0x46521c0: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4652098 [ORD=12] [ID=28]


*** Scheduling [16]: SU(28): 0x46521c0: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4652098 [ORD=12] [ID=28]


Examining Available:
Height 17: SU(50): 0x464ddb0: i32 = V_MOV_B32_e32 0x464e250 [ID=50]

Height 17: SU(29): 0x4652098: i1 = V_CMP_GE_U32_e64 0x4650678, 0x46519a8 [ORD=12] [ID=29]


*** Scheduling [17]: SU(50): 0x464ddb0: i32 = V_MOV_B32_e32 0x464e250 [ID=50]


Examining Available:
Height 17: SU(29): 0x4652098: i1 = V_CMP_GE_U32_e64 0x4650678, 0x46519a8 [ORD=12] [ID=29]


*** Scheduling [18]: SU(29): 0x4652098: i1 = V_CMP_GE_U32_e64 0x4650678, 0x46519a8 [ORD=12] [ID=29]


Examining Available:
Height 19: SU(30): 0x46519a8: i32 = S_MUL_I32 0x4651880, 0x46507a0 [ORD=12] [ID=30]


*** Scheduling [19]: SU(30): 0x46519a8: i32 = S_MUL_I32 0x4651880, 0x46507a0 [ORD=12] [ID=30]


Examining Available:
Height 20: SU(34): 0x4651880: i32 = V_MUL_HI_U32 0x4652788, 0x4650678 [ORD=12] [ID=34]


*** Scheduling [20]: SU(34): 0x4651880: i32 = V_MUL_HI_U32 0x4652788, 0x4650678 [ORD=12] [ID=34]


Examining Available:
Height 21: SU(48): 0x4650678: i32 = S_XOR_B32 0x4650428, 0x46528b0 [ORD=12] [ID=48]

Height 21: SU(35): 0x4652788: i32 = V_CNDMASK_B32_e64 0x4651630, 0x4651508, 0x4651d20 [ORD=12] [ID=35]


*** Scheduling [21]: SU(48): 0x4650678: i32 = S_XOR_B32 0x4650428, 0x46528b0 [ORD=12] [ID=48]


Examining Available:
Height 22: SU(49): 0x4650428: i32 = S_ADD_I32 0x464eb70, 0x46528b0 [ORD=12] [ID=49]

Height 21: SU(35): 0x4652788: i32 = V_CNDMASK_B32_e64 0x4651630, 0x4651508, 0x4651d20 [ORD=12] [ID=35]


*** Scheduling [22]: SU(49): 0x4650428: i32 = S_ADD_I32 0x464eb70, 0x46528b0 [ORD=12] [ID=49]


Examining Available:
Height 21: SU(35): 0x4652788: i32 = V_CNDMASK_B32_e64 0x4651630, 0x4651508, 0x4651d20 [ORD=12] [ID=35]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [23]: SU(35): 0x4652788: i32 = V_CNDMASK_B32_e64 0x4651630, 0x4651508, 0x4651d20 [ORD=12] [ID=35]


Examining Available:
Height 24: SU(47): 0x4651630: i32 = S_SUB_I32 0x46509f0, 0x46513e0 [ORD=12] [ID=47]

Height 24: SU(42): 0x4651508: i32 = S_ADD_I32 0x46509f0, 0x46513e0 [ORD=12] [ID=42]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [24]: SU(47): 0x4651630: i32 = S_SUB_I32 0x46509f0, 0x46513e0 [ORD=12] [ID=47]


Examining Available:
Height 24: SU(42): 0x4651508: i32 = S_ADD_I32 0x46509f0, 0x46513e0 [ORD=12] [ID=42]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [25]: SU(42): 0x4651508: i32 = S_ADD_I32 0x46509f0, 0x46513e0 [ORD=12] [ID=42]


Examining Available:
Height 26: SU(43): 0x46513e0: i32 = V_MUL_HI_U32 0x4651758, 0x46509f0 [ORD=12] [ID=43]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [26]: SU(43): 0x46513e0: i32 = V_MUL_HI_U32 0x4651758, 0x46509f0 [ORD=12] [ID=43]


Examining Available:
Height 27: SU(44): 0x4651758: i32 = V_CNDMASK_B32_e64 0x4650c40, 0x464e940, 0x4651d20 [ORD=12] [ID=44]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [27]: SU(44): 0x4651758: i32 = V_CNDMASK_B32_e64 0x4650c40, 0x464e940, 0x4651d20 [ORD=12] [ID=44]


Examining Available:
Height 28: SU(45): 0x464e940: i32 = S_SUB_I32 0x46531f0, 0x4650c40 [ORD=12] [ID=45]

Height 28: SU(36): 0x4651d20: i1 = V_CMP_EQ_I32_e64 0x4650e90, 0x46531f0 [ORD=12] [ID=36]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [28]: SU(45): 0x464e940: i32 = S_SUB_I32 0x46531f0, 0x4650c40 [ORD=12] [ID=45]


Examining Available:
Height 29: SU(46): 0x4650c40: i32 = S_MUL_I32 0x46509f0, 0x46507a0 [ORD=12] [ID=46]

Height 28: SU(36): 0x4651d20: i1 = V_CMP_EQ_I32_e64 0x4650e90, 0x46531f0 [ORD=12] [ID=36]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [29]: SU(46): 0x4650c40: i32 = S_MUL_I32 0x46509f0, 0x46507a0 [ORD=12] [ID=46]


Examining Available:
Height 28: SU(36): 0x4651d20: i1 = V_CMP_EQ_I32_e64 0x4650e90, 0x46531f0 [ORD=12] [ID=36]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [30]: SU(36): 0x4651d20: i1 = V_CMP_EQ_I32_e64 0x4650e90, 0x46531f0 [ORD=12] [ID=36]


Examining Available:
Height 31: SU(37): 0x4650e90: i32 = V_MUL_HI_U32 0x46509f0, 0x46507a0 [ORD=12] [ID=37]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [31]: SU(37): 0x4650e90: i32 = V_MUL_HI_U32 0x46509f0, 0x46507a0 [ORD=12] [ID=37]


Examining Available:
Height 32: SU(38): 0x46509f0: i32 = V_CVT_U32_F32_e32 0x4655418 [ORD=12] [ID=38]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [32]: SU(38): 0x46509f0: i32 = V_CVT_U32_F32_e32 0x4655418 [ORD=12] [ID=38]


Examining Available:
Height 33: SU(39): 0x4655418: i32 = V_MUL_F32_e32 0x4650fb8, 0x464f010 [ORD=12] [ID=39]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [33]: SU(39): 0x4655418: i32 = V_MUL_F32_e32 0x4650fb8, 0x464f010 [ORD=12] [ID=39]


Examining Available:
Height 34: SU(40): 0x464f010: i32 = V_RCP_IFLAG_F32_e32 0x4651bf8 [ORD=12] [ID=40]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [34]: SU(40): 0x464f010: i32 = V_RCP_IFLAG_F32_e32 0x4651bf8 [ORD=12] [ID=40]


Examining Available:
Height 35: SU(41): 0x4651bf8: i32 = V_CVT_F32_U32_e32 0x46507a0 [ORD=12] [ID=41]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [35]: SU(41): 0x4651bf8: i32 = V_CVT_F32_U32_e32 0x46507a0 [ORD=12] [ID=41]


Examining Available:
Height 36: SU(31): 0x46507a0: i32 = S_XOR_B32 0x4650550, 0x464dc88 [ORD=12] [ID=31]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [36]: SU(31): 0x46507a0: i32 = S_XOR_B32 0x4650550, 0x464dc88 [ORD=12] [ID=31]


Examining Available:
Height 37: SU(33): 0x4650550: i32 = S_ADD_I32 0x464edc0, 0x464dc88 [ORD=12] [ID=33]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [37]: SU(33): 0x4650550: i32 = S_ADD_I32 0x464edc0, 0x464dc88 [ORD=12] [ID=33]


Examining Available:
Height 38: SU(32): 0x464dc88: i32 = S_ASHR_I32 0x464edc0, 0x46510e0 [ORD=11] [ID=32]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [38]: SU(32): 0x464dc88: i32 = S_ASHR_I32 0x464edc0, 0x46510e0 [ORD=11] [ID=32]


Examining Available:
Height 39: SU(3): 0x464edc0: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x464e818, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=3]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [39]: SU(3): 0x464edc0: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x464e818, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=3]


Examining Available:
Height 40: SU(7): 0x464e818: v4i32 = REG_SEQUENCE 0x4654f78, 0x464c6e0, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=10] [ID=7]

Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [40]: SU(7): 0x464e818: v4i32 = REG_SEQUENCE 0x4654f78, 0x464c6e0, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=10] [ID=7]


Examining Available:
Height 23: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


*** Scheduling [41]: SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]


Examining Available:
Height 42: SU(24): 0x46510e0: i32 = S_MOV_B32 0x4655668 [ID=24]

Height 42: SU(11): 0x464eb70: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x4655540, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=11]


*** Scheduling [42]: SU(24): 0x46510e0: i32 = S_MOV_B32 0x4655668 [ID=24]


Examining Available:
Height 42: SU(11): 0x464eb70: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x4655540, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=11]


*** Scheduling [43]: SU(11): 0x464eb70: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x4655540, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=11]


Examining Available:
Height 43: SU(4): 0x464d270: ch = TokenFactor 0x46558b8:1, 0x464c6e0:1, 0x464cb80:1 [ORD=1] [ID=4]

Height 44: SU(12): 0x4655540: v4i32 = REG_SEQUENCE 0x4654f78, 0x46558b8, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=8] [ID=12]

Height 44: SU(14): 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8] [ID=14]


*** Scheduling [44]: SU(4): 0x464d270: ch = TokenFactor 0x46558b8:1, 0x464c6e0:1, 0x464cb80:1 [ORD=1] [ID=4]


Examining Available:
Height 44: SU(12): 0x4655540: v4i32 = REG_SEQUENCE 0x4654f78, 0x46558b8, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=8] [ID=12]

Height 44: SU(14): 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8] [ID=14]


*** Scheduling [45]: SU(12): 0x4655540: v4i32 = REG_SEQUENCE 0x4654f78, 0x46558b8, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=8] [ID=12]


Examining Available:
Height 46: SU(8): 0x4654e50: v2i32 = REG_SEQUENCE 0x4652c28, 0x46531f0, 0x4653318, 0x4654c00, 0x4654d28 [ORD=8] [ID=8]

Height 44: SU(14): 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8] [ID=14]


*** Scheduling [46]: SU(8): 0x4654e50: v2i32 = REG_SEQUENCE 0x4652c28, 0x46531f0, 0x4653318, 0x4654c00, 0x4654d28 [ORD=8] [ID=8]


Examining Available:
Height 47: SU(10): 0x46531f0: i32 = S_MOV_B32 0x4650300 [ID=10]

Height 47: SU(9): 0x4654c00: i32 = S_MOV_B32 0x4653440 [ORD=8] [ID=9]

Height 44: SU(14): 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8] [ID=14]


*** Scheduling [47]: SU(10): 0x46531f0: i32 = S_MOV_B32 0x4650300 [ID=10]


Examining Available:
Height 47: SU(9): 0x4654c00: i32 = S_MOV_B32 0x4653440 [ORD=8] [ID=9]

Height 44: SU(14): 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8] [ID=14]


*** Scheduling [48]: SU(9): 0x4654c00: i32 = S_MOV_B32 0x4653440 [ORD=8] [ID=9]


Examining Available:
Height 44: SU(14): 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8] [ID=14]


*** Scheduling [49]: SU(14): 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8] [ID=14]


Examining Available:
Height 50: SU(15): 0x464eee8: i32 = S_MOV_B32 0x4654d28 [ID=15]

Height 50: SU(16): 0x464e4a0: i64 = REG_SEQUENCE 0x464ec98, 0x464e378, 0x4653318, 0x4655790, 0x4654d28 [ORD=7] [ID=16]


*** Scheduling [50]: SU(15): 0x464eee8: i32 = S_MOV_B32 0x4654d28 [ID=15]


Examining Available:
Height 50: SU(16): 0x464e4a0: i64 = REG_SEQUENCE 0x464ec98, 0x464e378, 0x4653318, 0x4655790, 0x4654d28 [ORD=7] [ID=16]


*** Scheduling [51]: SU(16): 0x464e4a0: i64 = REG_SEQUENCE 0x464ec98, 0x464e378, 0x4653318, 0x4655790, 0x4654d28 [ORD=7] [ID=16]


Examining Available:
Height 52: SU(17): 0x4655790: i32 = S_ASHR_I32 0x464e378, 0x4655668 [ORD=7] [ID=17]


*** Scheduling [52]: SU(17): 0x4655790: i32 = S_ASHR_I32 0x464e378, 0x4655668 [ORD=7] [ID=17]


Examining Available:
Height 53: SU(18): 0x464e378: i32 = S_ADD_I32 0x464f5d8, 0x464e000 [ORD=6] [ID=18]


*** Scheduling [53]: SU(18): 0x464e378: i32 = S_ADD_I32 0x464f5d8, 0x464e000 [ORD=6] [ID=18]


Examining Available:
Height 54: SU(21): 0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0 [ID=21]

Height 54: SU(19): 0x464e000: i32 = S_MUL_I32 0x464f828, 0x464f950 [ORD=4] [ID=19]


*** Scheduling [54]: SU(21): 0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0 [ID=21]


Examining Available:
Height 54: SU(19): 0x464e000: i32 = S_MUL_I32 0x464f828, 0x464f950 [ORD=4] [ID=19]


*** Scheduling [55]: SU(19): 0x464e000: i32 = S_MUL_I32 0x464f828, 0x464f950 [ORD=4] [ID=19]


Examining Available:
Height 56: SU(20): 0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8 [ID=20]

Height 56: SU(5): 0x464cb80: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464cdd0, 0x45e7050, 0x464c6e0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464f828: i32,ch,glue = S_LOAD_DWORD_IMM 0x464c5b8, 0x464cef8, 0x45e7050<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=5]

    0x46558b8: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x4656c20, 0x45e7050, 0x464f828:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464c6e0: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464ca58, 0x45e7050, 0x46558b8:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]


*** Scheduling [56]: SU(20): 0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8 [ID=20]


Examining Available:
Height 56: SU(5): 0x464cb80: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464cdd0, 0x45e7050, 0x464c6e0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464f828: i32,ch,glue = S_LOAD_DWORD_IMM 0x464c5b8, 0x464cef8, 0x45e7050<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=5]

    0x46558b8: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x4656c20, 0x45e7050, 0x464f828:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464c6e0: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464ca58, 0x45e7050, 0x46558b8:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]


*** Scheduling [57]: SU(5): 0x464cb80: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464cdd0, 0x45e7050, 0x464c6e0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464f828: i32,ch,glue = S_LOAD_DWORD_IMM 0x464c5b8, 0x464cef8, 0x45e7050<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=5]

    0x46558b8: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x4656c20, 0x45e7050, 0x464f828:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464c6e0: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464ca58, 0x45e7050, 0x46558b8:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]


Examining Available:
Height 58: SU(6): 0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=6]


*** Scheduling [58]: SU(6): 0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=6]

*** Final schedule ***
SU(6): 0x464c5b8: i64,ch = CopyFromReg 0x45e7050, 0x464c490 [ORD=1] [ID=6]

SU(5): 0x464cb80: v2i32,ch = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464cdd0, 0x45e7050, 0x464c6e0:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464f828: i32,ch,glue = S_LOAD_DWORD_IMM 0x464c5b8, 0x464cef8, 0x45e7050<Mem:LD4[undef(addrspace=2)](nontemporal)(invariant)> [ORD=3] [ID=5]

    0x46558b8: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x4656c20, 0x45e7050, 0x464f828:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

    0x464c6e0: v2i32,ch,glue = S_LOAD_DWORDX2_IMM 0x464c5b8, 0x464ca58, 0x45e7050, 0x46558b8:2<Mem:LD8[undef(addrspace=2)](nontemporal)(invariant)> [ORD=1] [ID=5]

SU(20): 0x464f950: i32,ch = CopyFromReg 0x45e7050, 0x464ded8 [ID=20]

SU(19): 0x464e000: i32 = S_MUL_I32 0x464f828, 0x464f950 [ORD=4] [ID=19]

SU(21): 0x464f5d8: i32,ch = CopyFromReg 0x45e7050, 0x464f4b0 [ID=21]

SU(18): 0x464e378: i32 = S_ADD_I32 0x464f5d8, 0x464e000 [ORD=6] [ID=18]

SU(17): 0x4655790: i32 = S_ASHR_I32 0x464e378, 0x4655668 [ORD=7] [ID=17]

SU(16): 0x464e4a0: i64 = REG_SEQUENCE 0x464ec98, 0x464e378, 0x4653318, 0x4655790, 0x4654d28 [ORD=7] [ID=16]

SU(15): 0x464eee8: i32 = S_MOV_B32 0x4654d28 [ID=15]

SU(14): 0x464e6f0: i64 = S_LSHL_B64 0x464e4a0, 0x464eee8 [ORD=8] [ID=14]

SU(9): 0x4654c00: i32 = S_MOV_B32 0x4653440 [ORD=8] [ID=9]

SU(10): 0x46531f0: i32 = S_MOV_B32 0x4650300 [ID=10]

SU(8): 0x4654e50: v2i32 = REG_SEQUENCE 0x4652c28, 0x46531f0, 0x4653318, 0x4654c00, 0x4654d28 [ORD=8] [ID=8]

SU(12): 0x4655540: v4i32 = REG_SEQUENCE 0x4654f78, 0x46558b8, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=8] [ID=12]

SU(4): 0x464d270: ch = TokenFactor 0x46558b8:1, 0x464c6e0:1, 0x464cb80:1 [ORD=1] [ID=4]

SU(11): 0x464eb70: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x4655540, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=9] [ID=11]

SU(24): 0x46510e0: i32 = S_MOV_B32 0x4655668 [ID=24]

SU(23): 0x46528b0: i32 = S_ASHR_I32 0x464eb70, 0x46510e0 [ORD=9] [ID=23]

SU(7): 0x464e818: v4i32 = REG_SEQUENCE 0x4654f78, 0x464c6e0, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=10] [ID=7]

SU(3): 0x464edc0: i32,ch = BUFFER_LOAD_DWORD_ADDR64 0x464e6f0, 0x464e818, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464d270<Mem:LD4[%arrayidx1(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=11] [ID=3]

SU(32): 0x464dc88: i32 = S_ASHR_I32 0x464edc0, 0x46510e0 [ORD=11] [ID=32]

SU(33): 0x4650550: i32 = S_ADD_I32 0x464edc0, 0x464dc88 [ORD=12] [ID=33]

SU(31): 0x46507a0: i32 = S_XOR_B32 0x4650550, 0x464dc88 [ORD=12] [ID=31]

SU(41): 0x4651bf8: i32 = V_CVT_F32_U32_e32 0x46507a0 [ORD=12] [ID=41]

SU(40): 0x464f010: i32 = V_RCP_IFLAG_F32_e32 0x4651bf8 [ORD=12] [ID=40]

SU(39): 0x4655418: i32 = V_MUL_F32_e32 0x4650fb8, 0x464f010 [ORD=12] [ID=39]

SU(38): 0x46509f0: i32 = V_CVT_U32_F32_e32 0x4655418 [ORD=12] [ID=38]

SU(37): 0x4650e90: i32 = V_MUL_HI_U32 0x46509f0, 0x46507a0 [ORD=12] [ID=37]

SU(36): 0x4651d20: i1 = V_CMP_EQ_I32_e64 0x4650e90, 0x46531f0 [ORD=12] [ID=36]

SU(46): 0x4650c40: i32 = S_MUL_I32 0x46509f0, 0x46507a0 [ORD=12] [ID=46]

SU(45): 0x464e940: i32 = S_SUB_I32 0x46531f0, 0x4650c40 [ORD=12] [ID=45]

SU(44): 0x4651758: i32 = V_CNDMASK_B32_e64 0x4650c40, 0x464e940, 0x4651d20 [ORD=12] [ID=44]

SU(43): 0x46513e0: i32 = V_MUL_HI_U32 0x4651758, 0x46509f0 [ORD=12] [ID=43]

SU(42): 0x4651508: i32 = S_ADD_I32 0x46509f0, 0x46513e0 [ORD=12] [ID=42]

SU(47): 0x4651630: i32 = S_SUB_I32 0x46509f0, 0x46513e0 [ORD=12] [ID=47]

SU(35): 0x4652788: i32 = V_CNDMASK_B32_e64 0x4651630, 0x4651508, 0x4651d20 [ORD=12] [ID=35]

SU(49): 0x4650428: i32 = S_ADD_I32 0x464eb70, 0x46528b0 [ORD=12] [ID=49]

SU(48): 0x4650678: i32 = S_XOR_B32 0x4650428, 0x46528b0 [ORD=12] [ID=48]

SU(34): 0x4651880: i32 = V_MUL_HI_U32 0x4652788, 0x4650678 [ORD=12] [ID=34]

SU(30): 0x46519a8: i32 = S_MUL_I32 0x4651880, 0x46507a0 [ORD=12] [ID=30]

SU(29): 0x4652098: i1 = V_CMP_GE_U32_e64 0x4650678, 0x46519a8 [ORD=12] [ID=29]

SU(50): 0x464ddb0: i32 = V_MOV_B32_e32 0x464e250 [ID=50]

SU(28): 0x46521c0: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4652098 [ORD=12] [ID=28]

SU(52): 0x4651ad0: i32 = S_SUB_I32 0x4650678, 0x46519a8 [ORD=12] [ID=52]

SU(57): 0x4651e48: i1 = V_CMP_GE_U32_e64 0x4651ad0, 0x46507a0 [ORD=12] [ID=57]

SU(56): 0x4652660: i32 = V_CNDMASK_B32_e64 0x46531f0, 0x464ddb0, 0x4651e48 [ORD=12] [ID=56]

SU(55): 0x4651f70: i32 = S_AND_B32 0x4652660, 0x46521c0 [ORD=12] [ID=55]

SU(54): 0x4652d50: i1 = V_CMP_EQ_I32_e64 0x4651f70, 0x46531f0 [ORD=12] [ID=54]

SU(58): 0x46529d8: i32 = S_SUB_I32 0x4651ad0, 0x46507a0 [ORD=12] [ID=58]

SU(53): 0x46530c8: i32 = V_CNDMASK_B32_e64 0x46529d8, 0x4651ad0, 0x4652d50 [ORD=12] [ID=53]

SU(51): 0x4652b00: i32 = S_ADD_I32 0x4651ad0, 0x46507a0 [ORD=12] [ID=51]

SU(27): 0x4652e78: i1 = V_CMP_EQ_I32_e64 0x46521c0, 0x46531f0 [ORD=12] [ID=27]

SU(26): 0x464e5c8: i32 = V_CNDMASK_B32_e64 0x46530c8, 0x4652b00, 0x4652e78 [ORD=12] [ID=26]

SU(25): 0x4650b18: i32 = S_XOR_B32 0x464e5c8, 0x46528b0 [ORD=12] [ID=25]

SU(22): 0x4650d68: i32 = S_SUB_I32 0x4650b18, 0x46528b0 [ORD=12] [ID=22]

SU(13): 0x46552f0: v4i32 = REG_SEQUENCE 0x4654f78, 0x464cb80, 0x46550a0, 0x4654e50, 0x46551c8 [ORD=13] [ID=13]

SU(2): 0x464f138: ch = TokenFactor 0x464eb70:1, 0x464edc0:1 [ORD=14] [ID=2]

SU(1): 0x464f260: ch = BUFFER_STORE_DWORD_ADDR64 0x4650d68, 0x464e6f0, 0x46552f0, 0x4650300, 0x4652fa0, 0x464e128, 0x464e128, 0x464e128, 0x464f138<Mem:ST4[%arrayidx2(addrspace=1)](tbaa=<0x45b43e8>)> [ORD=14] [ID=1]

SU(0): 0x464f388: ch = S_ENDPGM 0x464f260 [ORD=15] [ID=0]


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg10<def> = COPY %vreg2; SReg_32:%vreg10 VGPR_32:%vreg2
	%vreg9<def> = S_ADD_I32 %vreg10, %vreg8<kill>, %SCC<imp-def,dead>; SReg_32:%vreg9,%vreg10,%vreg8
	%vreg11<def> = S_ASHR_I32 %vreg9, 31, %SCC<imp-def,dead>; SReg_32:%vreg11,%vreg9
	%vreg12<def> = REG_SEQUENCE %vreg9, sub0, %vreg11<kill>, sub1; SReg_64:%vreg12 SReg_32:%vreg9,%vreg11
	%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
	%vreg14<def> = S_LSHL_B64 %vreg12<kill>, %vreg13<kill>, %SCC<imp-def,dead>; SReg_64:%vreg14,%vreg12 SReg_32:%vreg13
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg20<def> = COPY %vreg14; VReg_64:%vreg20 SReg_64:%vreg14
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg20, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg20 SReg_128:%vreg18
	%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
	%vreg23<def> = COPY %vreg19; SReg_32:%vreg23 VGPR_32:%vreg19
	%vreg22<def> = S_ASHR_I32 %vreg23, %vreg21, %SCC<imp-def,dead>; SReg_32:%vreg22,%vreg23,%vreg21
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg26<def> = COPY %vreg14; VReg_64:%vreg26 SReg_64:%vreg14
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg26, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg26 SReg_128:%vreg24
	%vreg28<def> = COPY %vreg25; SReg_32:%vreg28 VGPR_32:%vreg25
	%vreg27<def> = S_ASHR_I32 %vreg28, %vreg21, %SCC<imp-def,dead>; SReg_32:%vreg27,%vreg28,%vreg21
	%vreg30<def> = COPY %vreg25; SReg_32:%vreg30 VGPR_32:%vreg25
	%vreg29<def> = S_ADD_I32 %vreg30, %vreg27, %SCC<imp-def,dead>; SReg_32:%vreg29,%vreg30,%vreg27
	%vreg31<def> = S_XOR_B32 %vreg29<kill>, %vreg27, %SCC<imp-def,dead>; SReg_32:%vreg31,%vreg29,%vreg27
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg31, %EXEC<imp-use>; VGPR_32:%vreg32 SReg_32:%vreg31
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg31, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35 SReg_32:%vreg31
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, %vreg16, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36 SReg_32:%vreg16
	%vreg39<def> = COPY %vreg35; SReg_32:%vreg39 VGPR_32:%vreg35
	%vreg38<def> = S_MUL_I32 %vreg39, %vreg31; SReg_32:%vreg38,%vreg39,%vreg31
	%vreg40<def> = S_SUB_I32 %vreg16, %vreg38, %SCC<imp-def,dead>; SReg_32:%vreg40,%vreg16,%vreg38
	%vreg42<def> = COPY %vreg38; VGPR_32:%vreg42 SReg_32:%vreg38
	%vreg43<def> = COPY %vreg40<kill>; VGPR_32:%vreg43 SReg_32:%vreg40
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg42, %vreg43, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg42,%vreg43 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg46<def> = COPY %vreg35; SReg_32:%vreg46 VGPR_32:%vreg35
	%vreg47<def> = COPY %vreg44; SReg_32:%vreg47 VGPR_32:%vreg44
	%vreg45<def> = S_ADD_I32 %vreg46, %vreg47, %SCC<imp-def,dead>; SReg_32:%vreg45,%vreg46,%vreg47
	%vreg49<def> = COPY %vreg35; SReg_32:%vreg49 VGPR_32:%vreg35
	%vreg50<def> = COPY %vreg44; SReg_32:%vreg50 VGPR_32:%vreg44
	%vreg48<def> = S_SUB_I32 %vreg49, %vreg50, %SCC<imp-def,dead>; SReg_32:%vreg48,%vreg49,%vreg50
	%vreg52<def> = COPY %vreg48<kill>; VGPR_32:%vreg52 SReg_32:%vreg48
	%vreg53<def> = COPY %vreg45<kill>; VGPR_32:%vreg53 SReg_32:%vreg45
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg52, %vreg53, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg52,%vreg53 SReg_64:%vreg37
	%vreg55<def> = COPY %vreg19; SReg_32:%vreg55 VGPR_32:%vreg19
	%vreg54<def> = S_ADD_I32 %vreg55, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg54,%vreg55,%vreg22
	%vreg56<def> = S_XOR_B32 %vreg54<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg56,%vreg54,%vreg22
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg56, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51 SReg_32:%vreg56
	%vreg59<def> = COPY %vreg57; SReg_32:%vreg59 VGPR_32:%vreg57
	%vreg58<def> = S_MUL_I32 %vreg59<kill>, %vreg31; SReg_32:%vreg58,%vreg59,%vreg31
	%vreg61<def> = COPY %vreg58; VGPR_32:%vreg61 SReg_32:%vreg58
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg56, %vreg61, %EXEC<imp-use>; SReg_64:%vreg60 SReg_32:%vreg56 VGPR_32:%vreg61
	%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
	%vreg64<def> = COPY %vreg16; VGPR_32:%vreg64 SReg_32:%vreg16
	%vreg63<def> = V_CNDMASK_B32_e64 %vreg64, %vreg62, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63,%vreg64,%vreg62 SReg_64:%vreg60
	%vreg65<def> = S_SUB_I32 %vreg56, %vreg58, %SCC<imp-def,dead>; SReg_32:%vreg65,%vreg56,%vreg58
	%vreg67<def> = COPY %vreg31; VGPR_32:%vreg67 SReg_32:%vreg31
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg65, %vreg67, %EXEC<imp-use>; SReg_64:%vreg66 SReg_32:%vreg65 VGPR_32:%vreg67
	%vreg69<def> = COPY %vreg16; VGPR_32:%vreg69 SReg_32:%vreg16
	%vreg68<def> = V_CNDMASK_B32_e64 %vreg69, %vreg62, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68,%vreg69,%vreg62 SReg_64:%vreg66
	%vreg71<def> = COPY %vreg68; SReg_32:%vreg71 VGPR_32:%vreg68
	%vreg72<def> = COPY %vreg63; SReg_32:%vreg72 VGPR_32:%vreg63
	%vreg70<def> = S_AND_B32 %vreg71<kill>, %vreg72, %SCC<imp-def,dead>; SReg_32:%vreg70,%vreg71,%vreg72
	%vreg74<def> = COPY %vreg16; VGPR_32:%vreg74 SReg_32:%vreg16
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg70<kill>, %vreg74, %EXEC<imp-use>; SReg_64:%vreg73 SReg_32:%vreg70 VGPR_32:%vreg74
	%vreg75<def> = S_SUB_I32 %vreg65, %vreg31, %SCC<imp-def,dead>; SReg_32:%vreg75,%vreg65,%vreg31
	%vreg77<def> = COPY %vreg75<kill>; VGPR_32:%vreg77 SReg_32:%vreg75
	%vreg78<def> = COPY %vreg65; VGPR_32:%vreg78 SReg_32:%vreg65
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg77, %vreg78, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg77,%vreg78 SReg_64:%vreg73
	%vreg79<def> = S_ADD_I32 %vreg65, %vreg31, %SCC<imp-def,dead>; SReg_32:%vreg79,%vreg65,%vreg31
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, %vreg16, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63 SReg_32:%vreg16
	%vreg82<def> = COPY %vreg79<kill>; VGPR_32:%vreg82 SReg_32:%vreg79
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg82, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg82 SReg_64:%vreg80
	%vreg84<def> = COPY %vreg81; SReg_32:%vreg84 VGPR_32:%vreg81
	%vreg83<def> = S_XOR_B32 %vreg84<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg83,%vreg84,%vreg22
	%vreg85<def> = S_SUB_I32 %vreg83<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg85,%vreg83,%vreg22
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	%vreg87<def> = COPY %vreg85; VGPR_32:%vreg87 SReg_32:%vreg85
	%vreg88<def> = COPY %vreg14; VReg_64:%vreg88 SReg_64:%vreg14
	BUFFER_STORE_DWORD_ADDR64 %vreg87<kill>, %vreg88, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg87 VReg_64:%vreg88 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After SI Lower i1 Copies ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg10<def> = COPY %vreg2; SReg_32:%vreg10 VGPR_32:%vreg2
	%vreg9<def> = S_ADD_I32 %vreg10, %vreg8<kill>, %SCC<imp-def,dead>; SReg_32:%vreg9,%vreg10,%vreg8
	%vreg11<def> = S_ASHR_I32 %vreg9, 31, %SCC<imp-def,dead>; SReg_32:%vreg11,%vreg9
	%vreg12<def> = REG_SEQUENCE %vreg9, sub0, %vreg11<kill>, sub1; SReg_64:%vreg12 SReg_32:%vreg9,%vreg11
	%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
	%vreg14<def> = S_LSHL_B64 %vreg12<kill>, %vreg13<kill>, %SCC<imp-def,dead>; SReg_64:%vreg14,%vreg12 SReg_32:%vreg13
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg20<def> = COPY %vreg14; VReg_64:%vreg20 SReg_64:%vreg14
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg20, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg20 SReg_128:%vreg18
	%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
	%vreg23<def> = COPY %vreg19; SReg_32:%vreg23 VGPR_32:%vreg19
	%vreg22<def> = S_ASHR_I32 %vreg23, %vreg21, %SCC<imp-def,dead>; SReg_32:%vreg22,%vreg23,%vreg21
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg26<def> = COPY %vreg14; VReg_64:%vreg26 SReg_64:%vreg14
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg26, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg26 SReg_128:%vreg24
	%vreg28<def> = COPY %vreg25; SReg_32:%vreg28 VGPR_32:%vreg25
	%vreg27<def> = S_ASHR_I32 %vreg28, %vreg21, %SCC<imp-def,dead>; SReg_32:%vreg27,%vreg28,%vreg21
	%vreg30<def> = COPY %vreg25; SReg_32:%vreg30 VGPR_32:%vreg25
	%vreg29<def> = S_ADD_I32 %vreg30, %vreg27, %SCC<imp-def,dead>; SReg_32:%vreg29,%vreg30,%vreg27
	%vreg31<def> = S_XOR_B32 %vreg29<kill>, %vreg27, %SCC<imp-def,dead>; SReg_32:%vreg31,%vreg29,%vreg27
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg31, %EXEC<imp-use>; VGPR_32:%vreg32 SReg_32:%vreg31
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg31, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35 SReg_32:%vreg31
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, %vreg16, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36 SReg_32:%vreg16
	%vreg39<def> = COPY %vreg35; SReg_32:%vreg39 VGPR_32:%vreg35
	%vreg38<def> = S_MUL_I32 %vreg39, %vreg31; SReg_32:%vreg38,%vreg39,%vreg31
	%vreg40<def> = S_SUB_I32 %vreg16, %vreg38, %SCC<imp-def,dead>; SReg_32:%vreg40,%vreg16,%vreg38
	%vreg42<def> = COPY %vreg38; VGPR_32:%vreg42 SReg_32:%vreg38
	%vreg43<def> = COPY %vreg40<kill>; VGPR_32:%vreg43 SReg_32:%vreg40
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg42, %vreg43, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg42,%vreg43 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg46<def> = COPY %vreg35; SReg_32:%vreg46 VGPR_32:%vreg35
	%vreg47<def> = COPY %vreg44; SReg_32:%vreg47 VGPR_32:%vreg44
	%vreg45<def> = S_ADD_I32 %vreg46, %vreg47, %SCC<imp-def,dead>; SReg_32:%vreg45,%vreg46,%vreg47
	%vreg49<def> = COPY %vreg35; SReg_32:%vreg49 VGPR_32:%vreg35
	%vreg50<def> = COPY %vreg44; SReg_32:%vreg50 VGPR_32:%vreg44
	%vreg48<def> = S_SUB_I32 %vreg49, %vreg50, %SCC<imp-def,dead>; SReg_32:%vreg48,%vreg49,%vreg50
	%vreg52<def> = COPY %vreg48<kill>; VGPR_32:%vreg52 SReg_32:%vreg48
	%vreg53<def> = COPY %vreg45<kill>; VGPR_32:%vreg53 SReg_32:%vreg45
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg52, %vreg53, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg52,%vreg53 SReg_64:%vreg37
	%vreg55<def> = COPY %vreg19; SReg_32:%vreg55 VGPR_32:%vreg19
	%vreg54<def> = S_ADD_I32 %vreg55, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg54,%vreg55,%vreg22
	%vreg56<def> = S_XOR_B32 %vreg54<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg56,%vreg54,%vreg22
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg56, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51 SReg_32:%vreg56
	%vreg59<def> = COPY %vreg57; SReg_32:%vreg59 VGPR_32:%vreg57
	%vreg58<def> = S_MUL_I32 %vreg59<kill>, %vreg31; SReg_32:%vreg58,%vreg59,%vreg31
	%vreg61<def> = COPY %vreg58; VGPR_32:%vreg61 SReg_32:%vreg58
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg56, %vreg61, %EXEC<imp-use>; SReg_64:%vreg60 SReg_32:%vreg56 VGPR_32:%vreg61
	%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
	%vreg64<def> = COPY %vreg16; VGPR_32:%vreg64 SReg_32:%vreg16
	%vreg63<def> = V_CNDMASK_B32_e64 %vreg64, %vreg62, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63,%vreg64,%vreg62 SReg_64:%vreg60
	%vreg65<def> = S_SUB_I32 %vreg56, %vreg58, %SCC<imp-def,dead>; SReg_32:%vreg65,%vreg56,%vreg58
	%vreg67<def> = COPY %vreg31; VGPR_32:%vreg67 SReg_32:%vreg31
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg65, %vreg67, %EXEC<imp-use>; SReg_64:%vreg66 SReg_32:%vreg65 VGPR_32:%vreg67
	%vreg69<def> = COPY %vreg16; VGPR_32:%vreg69 SReg_32:%vreg16
	%vreg68<def> = V_CNDMASK_B32_e64 %vreg69, %vreg62, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68,%vreg69,%vreg62 SReg_64:%vreg66
	%vreg71<def> = COPY %vreg68; SReg_32:%vreg71 VGPR_32:%vreg68
	%vreg72<def> = COPY %vreg63; SReg_32:%vreg72 VGPR_32:%vreg63
	%vreg70<def> = S_AND_B32 %vreg71<kill>, %vreg72, %SCC<imp-def,dead>; SReg_32:%vreg70,%vreg71,%vreg72
	%vreg74<def> = COPY %vreg16; VGPR_32:%vreg74 SReg_32:%vreg16
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg70<kill>, %vreg74, %EXEC<imp-use>; SReg_64:%vreg73 SReg_32:%vreg70 VGPR_32:%vreg74
	%vreg75<def> = S_SUB_I32 %vreg65, %vreg31, %SCC<imp-def,dead>; SReg_32:%vreg75,%vreg65,%vreg31
	%vreg77<def> = COPY %vreg75<kill>; VGPR_32:%vreg77 SReg_32:%vreg75
	%vreg78<def> = COPY %vreg65; VGPR_32:%vreg78 SReg_32:%vreg65
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg77, %vreg78, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg77,%vreg78 SReg_64:%vreg73
	%vreg79<def> = S_ADD_I32 %vreg65, %vreg31, %SCC<imp-def,dead>; SReg_32:%vreg79,%vreg65,%vreg31
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, %vreg16, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63 SReg_32:%vreg16
	%vreg82<def> = COPY %vreg79<kill>; VGPR_32:%vreg82 SReg_32:%vreg79
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg82, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg82 SReg_64:%vreg80
	%vreg84<def> = COPY %vreg81; SReg_32:%vreg84 VGPR_32:%vreg81
	%vreg83<def> = S_XOR_B32 %vreg84<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg83,%vreg84,%vreg22
	%vreg85<def> = S_SUB_I32 %vreg83<kill>, %vreg22, %SCC<imp-def,dead>; SReg_32:%vreg85,%vreg83,%vreg22
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	%vreg87<def> = COPY %vreg85; VGPR_32:%vreg87 SReg_32:%vreg85
	%vreg88<def> = COPY %vreg14; VReg_64:%vreg88 SReg_64:%vreg14
	BUFFER_STORE_DWORD_ADDR64 %vreg87<kill>, %vreg88, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg87 VReg_64:%vreg88 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

Fixing VGPR -> SGPR copy: %vreg10<def> = COPY %vreg2; SReg_32:%vreg10 VGPR_32:%vreg2
Fixing VGPR -> SGPR copy: %vreg23<def> = COPY %vreg19; SReg_32:%vreg23 VGPR_32:%vreg19
Fixing VGPR -> SGPR copy: %vreg28<def> = COPY %vreg25; SReg_32:%vreg28 VGPR_32:%vreg25
Fixing VGPR -> SGPR copy: %vreg30<def> = COPY %vreg25; SReg_32:%vreg30 VGPR_32:%vreg25
Fixing VGPR -> SGPR copy: %vreg39<def> = COPY %vreg35; SReg_32:%vreg39 VGPR_32:%vreg35
Fixing VGPR -> SGPR copy: %vreg46<def> = COPY %vreg35; SReg_32:%vreg46 VGPR_32:%vreg35
Fixing VGPR -> SGPR copy: %vreg47<def> = COPY %vreg44; SReg_32:%vreg47 VGPR_32:%vreg44
Fixing VGPR -> SGPR copy: %vreg49<def> = COPY %vreg35; SReg_32:%vreg49 VGPR_32:%vreg35
Fixing VGPR -> SGPR copy: %vreg50<def> = COPY %vreg44; SReg_32:%vreg50 VGPR_32:%vreg44
Fixing VGPR -> SGPR copy: %vreg55<def> = COPY %vreg19; SReg_32:%vreg55 VGPR_32:%vreg19
Fixing VGPR -> SGPR copy: %vreg59<def> = COPY %vreg57; SReg_32:%vreg59 VGPR_32:%vreg57
Fixing VGPR -> SGPR copy: %vreg71<def> = COPY %vreg68; SReg_32:%vreg71 VGPR_32:%vreg68
Fixing VGPR -> SGPR copy: %vreg72<def> = COPY %vreg63; SReg_32:%vreg72 VGPR_32:%vreg63
Fixing VGPR -> SGPR copy: %vreg84<def> = COPY %vreg81; SReg_32:%vreg84 VGPR_32:%vreg81
Folded source from %vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
 into OpNo 2 of %vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8

Folded source from %vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
 into OpNo 2 of %vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91

Folded source from %vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
 into OpNo 2 of %vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36

Folded source from %vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
 into OpNo 1 of %vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109

Folded source from %vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
 into OpNo 1 of %vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64

Folded source from %vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
 into OpNo 1 of %vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69

Folded source from %vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
 into OpNo 1 of %vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74

Folded source from %vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
 into OpNo 2 of %vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63

Folded source from %vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
 into OpNo 1 of %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18

Folded source from %vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
 into OpNo 1 of %vreg97<def> = V_ASHRREV_I32_e32 31, %vreg96, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg96

Folded source from %vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
 into OpNo 1 of %vreg106<def> = V_ASHRREV_I32_e32 31, %vreg105, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg105

Folded source from %vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
 into OpNo 2 of %vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19

Folded source from %vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
 into OpNo 1 of %vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24

Folded source from %vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
 into OpNo 2 of %vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25

Folded source from %vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
 into OpNo 1 of %vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106

Folded source from %vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
 into OpNo 1 of %vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107

Folded source from %vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
 into OpNo 1 of %vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg43, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg43 SReg_64:%vreg37

Folded source from %vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
 into OpNo 2 of %vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37

Folded source from %vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
 into OpNo 2 of %vreg115<def> = V_ADD_I32_e32 %vreg116, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg116,%vreg35

Folded source from %vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
 into OpNo 1 of %vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35

Folded source from %vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
 into OpNo 2 of %vreg118<def> = V_SUBREV_I32_e32 %vreg119, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg119,%vreg35

Folded source from %vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
 into OpNo 1 of %vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35

Folded source from %vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
 into OpNo 1 of %vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg53, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg53 SReg_64:%vreg37

Folded source from %vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
 into OpNo 2 of %vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37

Folded source from %vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
 into OpNo 1 of %vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97

Folded source from %vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
 into OpNo 1 of %vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107

Folded source from %vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
 into OpNo 2 of %vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108

Folded source from %vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
 into OpNo 2 of %vreg63<def> = V_CNDMASK_B32_e64 %vreg64, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63,%vreg64 SReg_64:%vreg60

Folded source from %vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
 into OpNo 2 of %vreg68<def> = V_CNDMASK_B32_e64 %vreg69, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68,%vreg69 SReg_64:%vreg66

Folded source from %vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
 into OpNo 1 of %vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60

Folded source from %vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
 into OpNo 2 of %vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107

Folded source from %vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
 into OpNo 1 of %vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66

Folded source from %vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
 into OpNo 2 of %vreg123<def> = V_AND_B32_e32 %vreg124, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg124,%vreg68

Folded source from %vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
 into OpNo 1 of %vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68

Folded source from %vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
 into OpNo 2 of %vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123

Folded source from %vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
 into OpNo 1 of %vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg78, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg78 SReg_64:%vreg73

Folded source from %vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
 into OpNo 2 of %vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73

Folded source from %vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
 into OpNo 2 of %vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80

Folded source from %vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
 into OpNo 1 of %vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97

Folded source from %vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
 into OpNo 0 of BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg88, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg88 SReg_128:%vreg86

Folded source from %vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
 into OpNo 1 of BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86

# *** IR Dump After SI Fold Operands ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
	%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
	%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
	%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
	%vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
	%vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
	%vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
	%vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
	%vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
	%vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
	%vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
	%vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	%vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
	%vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
	%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
	%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
	%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
	%vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
	%vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
	%vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
	%vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
	%vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
	%vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
	%vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
	%vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	%vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
	%vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Tail Duplication ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
	%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
	%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
	%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
	%vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
	%vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
	%vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
	%vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
	%vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
	%vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
	%vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
	%vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	%vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
	%vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
	%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
	%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
	%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
	%vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
	%vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
	%vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
	%vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
	%vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
	%vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
	%vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
	%vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	%vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
	%vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
160B		%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
176B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
192B		%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
208B		%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
224B		%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
240B		%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
256B		%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
272B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
288B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
304B		%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
320B		%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
336B		%vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
352B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
368B		%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
384B		%vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
400B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
416B		%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
432B		%vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
448B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
464B		%vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
480B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
496B		%vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
512B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
528B		%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
544B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
560B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
576B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
592B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
608B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
624B		%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
640B		%vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
656B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
672B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
688B		%vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
704B		%vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
720B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
736B		%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
752B		%vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
768B		%vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
784B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
800B		%vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
816B		%vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
832B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
848B		%vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
864B		%vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
880B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
896B		%vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
912B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
928B		%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
944B		%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
960B		%vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
976B		%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
992B		%vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
1008B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
1024B		%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
1040B		%vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
1056B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
1072B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
1088B		%vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
1104B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
1120B		%vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
1136B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1152B		%vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
1168B		%vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
1184B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1200B		%vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
1216B		%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1232B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1248B		%vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
1264B		%vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
1280B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1296B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1312B		%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1328B		%vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
1344B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1360B		%vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
1376B		%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1392B		%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1408B		%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
1424B		%vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
1440B		%vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
1456B		BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1472B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Slot index numbering ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
160B		%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
176B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
192B		%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
208B		%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
224B		%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
240B		%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
256B		%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
272B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
288B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
304B		%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
320B		%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
336B		%vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
352B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
368B		%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
384B		%vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
400B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
416B		%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
432B		%vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
448B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
464B		%vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
480B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
496B		%vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
512B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
528B		%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
544B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
560B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
576B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
592B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
608B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
624B		%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
640B		%vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
656B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
672B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
688B		%vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
704B		%vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
720B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
736B		%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
752B		%vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
768B		%vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
784B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
800B		%vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
816B		%vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
832B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
848B		%vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
864B		%vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
880B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
896B		%vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
912B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
928B		%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
944B		%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
960B		%vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
976B		%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
992B		%vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
1008B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
1024B		%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
1040B		%vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
1056B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
1072B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
1088B		%vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
1104B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
1120B		%vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
1136B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1152B		%vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
1168B		%vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
1184B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1200B		%vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
1216B		%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1232B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1248B		%vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
1264B		%vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
1280B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1296B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1312B		%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1328B		%vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
1344B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1360B		%vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
1376B		%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1392B		%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1408B		%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
1424B		%vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
1440B		%vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
1456B		BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1472B		S_ENDPGM

# End machine code for function remainder_intint.

********** Stack Coloring **********
********** Function: remainder_intint
# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
	%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
	%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
	%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
	%vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
	%vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
	%vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
	%vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
	%vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
	%vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
	%vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
	%vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	%vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
	%vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
	%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
	%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
	%vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
	%vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
	%vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
	%vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
	%vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
	%vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
	%vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
	%vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
	%vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	%vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
	%vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

DeadMachineInstructionElim: DELETING: %vreg88<def> = COPY %vreg94; VReg_64:%vreg88,%vreg94
DeadMachineInstructionElim: DELETING: %vreg87<def> = COPY %vreg98; VGPR_32:%vreg87,%vreg98
DeadMachineInstructionElim: DELETING: %vreg125<def> = COPY %vreg81; VGPR_32:%vreg125,%vreg81
DeadMachineInstructionElim: DELETING: %vreg82<def> = COPY %vreg102; VGPR_32:%vreg82,%vreg102
DeadMachineInstructionElim: DELETING: %vreg78<def> = COPY %vreg101; VGPR_32:%vreg78,%vreg101
DeadMachineInstructionElim: DELETING: %vreg77<def> = COPY %vreg103; VGPR_32:%vreg77,%vreg103
DeadMachineInstructionElim: DELETING: %vreg74<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg74
DeadMachineInstructionElim: DELETING: %vreg124<def> = COPY %vreg63; VGPR_32:%vreg124,%vreg63
DeadMachineInstructionElim: DELETING: %vreg122<def> = COPY %vreg68; VGPR_32:%vreg122,%vreg68
DeadMachineInstructionElim: DELETING: %vreg69<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg69
DeadMachineInstructionElim: DELETING: %vreg67<def> = COPY %vreg107; VGPR_32:%vreg67,%vreg107
DeadMachineInstructionElim: DELETING: %vreg64<def> = V_MOV_B32_e32 0, %EXEC<imp-use>; VGPR_32:%vreg64
DeadMachineInstructionElim: DELETING: %vreg62<def> = V_MOV_B32_e32 -1, %EXEC<imp-use>; VGPR_32:%vreg62
DeadMachineInstructionElim: DELETING: %vreg61<def> = COPY %vreg108; VGPR_32:%vreg61,%vreg108
DeadMachineInstructionElim: DELETING: %vreg121<def> = COPY %vreg57; VGPR_32:%vreg121,%vreg57
DeadMachineInstructionElim: DELETING: %vreg120<def> = COPY %vreg19; VGPR_32:%vreg120,%vreg19
DeadMachineInstructionElim: DELETING: %vreg53<def> = COPY %vreg115; VGPR_32:%vreg53,%vreg115
DeadMachineInstructionElim: DELETING: %vreg52<def> = COPY %vreg118; VGPR_32:%vreg52,%vreg118
DeadMachineInstructionElim: DELETING: %vreg119<def> = COPY %vreg44; VGPR_32:%vreg119,%vreg44
DeadMachineInstructionElim: DELETING: %vreg117<def> = COPY %vreg35; VGPR_32:%vreg117,%vreg35
DeadMachineInstructionElim: DELETING: %vreg116<def> = COPY %vreg44; VGPR_32:%vreg116,%vreg44
DeadMachineInstructionElim: DELETING: %vreg114<def> = COPY %vreg35; VGPR_32:%vreg114,%vreg35
DeadMachineInstructionElim: DELETING: %vreg43<def> = COPY %vreg110; VGPR_32:%vreg43,%vreg110
DeadMachineInstructionElim: DELETING: %vreg42<def> = COPY %vreg109; VGPR_32:%vreg42,%vreg109
DeadMachineInstructionElim: DELETING: %vreg113<def> = COPY %vreg35; VGPR_32:%vreg113,%vreg35
DeadMachineInstructionElim: DELETING: %vreg112<def> = COPY %vreg25; VGPR_32:%vreg112,%vreg25
DeadMachineInstructionElim: DELETING: %vreg105<def> = COPY %vreg25; VGPR_32:%vreg105,%vreg25
DeadMachineInstructionElim: DELETING: %vreg26<def> = COPY %vreg94; VReg_64:%vreg26,%vreg94
DeadMachineInstructionElim: DELETING: %vreg96<def> = COPY %vreg19; VGPR_32:%vreg96,%vreg19
DeadMachineInstructionElim: DELETING: %vreg21<def> = S_MOV_B32 31; SReg_32:%vreg21
DeadMachineInstructionElim: DELETING: %vreg20<def> = COPY %vreg94; VReg_64:%vreg20,%vreg94
DeadMachineInstructionElim: DELETING: %vreg13<def> = S_MOV_B32 2; SReg_32:%vreg13
DeadMachineInstructionElim: DELETING: %vreg89<def> = COPY %vreg2; VGPR_32:%vreg89,%vreg2
# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
	%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
	%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

******** Pre-regalloc Machine LICM: remainder_intint ********
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
	%vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
	%vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 %vreg36<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 %vreg123<kill>, 0, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 %vreg63, 0, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

Entering: entry
Coalescing: %vreg92<def> = COPY %vreg90; VGPR_32:%vreg92,%vreg90
***     to: %vreg91<def> = REG_SEQUENCE %vreg92, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg92,%vreg93
Coalescing: %vreg93<def> = COPY %vreg95<kill>; VGPR_32:%vreg93,%vreg95
***     to: %vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg93<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg93
Exiting: entry
# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.


block-frequency: remainder_intint
=================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: remainder_intint
 - BB0[entry]: float = 1.0, int = 8

******** Machine Sinking ********
# *** IR Dump After Machine code sinking ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

********** PEEPHOLE OPTIMIZER **********
********** Function: remainder_intint
# *** IR Dump After Peephole Optimizations ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97, %VCC<imp-def>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90<kill>, sub0, %vreg95<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16<kill>, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106<kill>, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36<kill>, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109<kill>, %vreg110<kill>, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44<kill>, %vreg35<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118<kill>, %vreg115<kill>, %vreg37<kill>, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19<kill>, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123<kill>, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103<kill>, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107<kill>, %vreg101<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63<kill>, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102<kill>, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17<kill>, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94<kill>, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
160B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
176B		%vreg91<def> = REG_SEQUENCE %vreg90<kill>, sub0, %vreg95<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
192B		%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
208B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
224B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
240B		%vreg17<def> = REG_SEQUENCE %vreg16<kill>, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
256B		%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
272B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
288B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
304B		%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
320B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
336B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
352B		%vreg111<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
368B		%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106<kill>, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
384B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
400B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
416B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
432B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
448B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
464B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36<kill>, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
480B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
496B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
512B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109<kill>, %vreg110<kill>, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
528B		%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
544B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
560B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44<kill>, %vreg35<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
576B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118<kill>, %vreg115<kill>, %vreg37<kill>, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
592B		%vreg104<def> = V_ADD_I32_e32 %vreg19<kill>, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
608B		%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
624B		%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
640B		%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
656B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
672B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
688B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
704B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
720B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
736B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
752B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123<kill>, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
768B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
784B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103<kill>, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
800B		%vreg102<def> = V_ADD_I32_e32 %vreg107<kill>, %vreg101<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
816B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63<kill>, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
832B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102<kill>, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
848B		%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
864B		%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
880B		%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17<kill>, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
896B		BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94<kill>, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
912B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Slot index numbering ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
160B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
176B		%vreg91<def> = REG_SEQUENCE %vreg90<kill>, sub0, %vreg95<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
192B		%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
208B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
224B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
240B		%vreg17<def> = REG_SEQUENCE %vreg16<kill>, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
256B		%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
272B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
288B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
304B		%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
320B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
336B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
352B		%vreg111<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
368B		%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106<kill>, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
384B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
400B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
416B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
432B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
448B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
464B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36<kill>, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
480B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
496B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
512B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109<kill>, %vreg110<kill>, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
528B		%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
544B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
560B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44<kill>, %vreg35<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
576B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118<kill>, %vreg115<kill>, %vreg37<kill>, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
592B		%vreg104<def> = V_ADD_I32_e32 %vreg19<kill>, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
608B		%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
624B		%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
640B		%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
656B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
672B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
688B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
704B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
720B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
736B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
752B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123<kill>, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
768B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
784B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103<kill>, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
800B		%vreg102<def> = V_ADD_I32_e32 %vreg107<kill>, %vreg101<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
816B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63<kill>, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
832B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102<kill>, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
848B		%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
864B		%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
880B		%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17<kill>, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
896B		BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94<kill>, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
912B		S_ENDPGM

# End machine code for function remainder_intint.

Computing live-in reg-units in ABI blocks.
0B	BB#0 SGPR0#0 SGPR1#0 VGPR0#0 SGPR4#0
Created 4 new intervals.
********** INTERVALS **********
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg0 [48r,112r:0)  0@48r
%vreg2 [32r,144r:0)  0@32r
%vreg3 [16r,128r:0)  0@16r
%vreg4 [64r,128r:0)  0@64r
%vreg5 [80r,256r:0)  0@80r
%vreg6 [96r,304r:0)  0@96r
%vreg7 [112r,880r:0)  0@112r
%vreg8 [128r,144r:0)  0@128r
%vreg15 [208r,240r:0)  0@208r
%vreg16 [224r,240r:0)  0@224r
%vreg17 [240r,880r:0)  0@240r
%vreg18 [256r,272r:0)  0@256r
%vreg19 [272r,592r:0)  0@272r
%vreg24 [304r,320r:0)  0@304r
%vreg25 [320r,352r:0)  0@320r
%vreg32 [384r,400r:0)  0@384r
%vreg33 [400r,416r:0)  0@400r
%vreg34 [416r,432r:0)  0@416r
%vreg35 [432r,560r:0)  0@432r
%vreg36 [448r,464r:0)  0@448r
%vreg37 [464r,576r:0)  0@464r
%vreg41 [512r,528r:0)  0@512r
%vreg44 [528r,560r:0)  0@528r
%vreg51 [576r,624r:0)  0@576r
%vreg57 [624r,640r:0)  0@624r
%vreg60 [656r,672r:0)  0@656r
%vreg63 [672r,816r:0)  0@672r
%vreg66 [704r,720r:0)  0@704r
%vreg68 [720r,736r:0)  0@720r
%vreg73 [752r,784r:0)  0@752r
%vreg76 [784r,832r:0)  0@784r
%vreg80 [816r,832r:0)  0@816r
%vreg81 [832r,848r:0)  0@832r
%vreg86 [880r,896r:0)  0@880r
%vreg90 [144r,176r:0)  0@144r
%vreg91 [176r,192r:0)  0@176r
%vreg94 [192r,896r:0)  0@192r
%vreg95 [160r,176r:0)  0@160r
%vreg97 [288r,864r:0)  0@288r
%vreg98 [864r,896r:0)  0@864r
%vreg99 [848r,864r:0)  0@848r
%vreg100 [608r,688r:0)  0@608r
%vreg101 [688r,800r:0)  0@688r
%vreg102 [800r,832r:0)  0@800r
%vreg103 [768r,784r:0)  0@768r
%vreg104 [592r,608r:0)  0@592r
%vreg106 [336r,368r:0)  0@336r
%vreg107 [368r,800r:0)  0@368r
%vreg108 [640r,688r:0)  0@640r
%vreg109 [480r,512r:0)  0@480r
%vreg110 [496r,512r:0)  0@496r
%vreg111 [352r,368r:0)  0@352r
%vreg115 [544r,576r:0)  0@544r
%vreg118 [560r,576r:0)  0@560r
%vreg123 [736r,752r:0)  0@736r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg90<def> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
160B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
176B		%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
192B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
208B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
224B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
240B		%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
256B		%vreg18<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
272B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
288B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
304B		%vreg24<def> = REG_SEQUENCE %vreg6, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
320B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
336B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
352B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
368B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
384B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
400B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
416B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
432B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
448B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
464B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
480B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
496B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
512B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
528B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
544B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
560B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
576B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
592B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
608B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
624B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
640B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
656B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
672B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
688B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
704B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
720B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
736B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
752B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
768B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
784B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
800B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
816B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
832B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
848B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
864B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
880B		%vreg86<def> = REG_SEQUENCE %vreg7, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
896B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
912B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg90<def> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
160B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
176B		%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
192B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
208B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
224B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
240B		%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
256B		%vreg18<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
272B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
288B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
304B		%vreg24<def> = REG_SEQUENCE %vreg6, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
320B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
336B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
352B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
368B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
384B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
400B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
416B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
432B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
448B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
464B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
480B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
496B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
512B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
528B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
544B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
560B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
576B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
592B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
608B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
624B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
640B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
656B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
672B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
688B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
704B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
720B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
736B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
752B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
768B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
784B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
800B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
816B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
832B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
848B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
864B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
880B		%vreg86<def> = REG_SEQUENCE %vreg7, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
896B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
912B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After SI Fix SGPR live ranges ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

********** PROCESS IMPLICIT DEFS **********
********** Function: remainder_intint
# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90, sub0, %vreg95, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16, sub0, %vreg15, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function remainder_intint: SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90<kill>, sub0, %vreg95<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16<kill>, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106<kill>, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36<kill>, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109<kill>, %vreg110<kill>, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44<kill>, %vreg35<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118<kill>, %vreg115<kill>, %vreg37<kill>, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19<kill>, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123<kill>, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103<kill>, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107<kill>, %vreg101<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63<kill>, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102<kill>, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17<kill>, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94<kill>, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91<def> = REG_SEQUENCE %vreg90<kill>, sub0, %vreg95<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17<def> = REG_SEQUENCE %vreg16<kill>, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
	%vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106<kill>, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36<kill>, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109<kill>, %vreg110<kill>, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44<kill>, %vreg35<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118<kill>, %vreg115<kill>, %vreg37<kill>, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19<kill>, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123<kill>, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103<kill>, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107<kill>, %vreg101<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63<kill>, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102<kill>, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17<kill>, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94<kill>, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

********** REWRITING TWO-ADDR INSTRS **********
********** Function: remainder_intint
Inserted: %vreg91:sub0<def,read-undef> = COPY %vreg90<kill>; VReg_64:%vreg91 VGPR_32:%vreg90
Inserted: %vreg91:sub1<def> = COPY %vreg95<kill>; VReg_64:%vreg91 VGPR_32:%vreg95
Eliminated: %vreg91<def> = REG_SEQUENCE %vreg90<kill>, sub0, %vreg95<kill>, sub1; VReg_64:%vreg91 VGPR_32:%vreg90,%vreg95
Inserted: %vreg17:sub0<def,read-undef> = COPY %vreg16<kill>; SGPR_64:%vreg17 SReg_32:%vreg16
Inserted: %vreg17:sub1<def> = COPY %vreg15<kill>; SGPR_64:%vreg17 SReg_32:%vreg15
Eliminated: %vreg17<def> = REG_SEQUENCE %vreg16<kill>, sub0, %vreg15<kill>, sub1; SGPR_64:%vreg17 SReg_32:%vreg16,%vreg15
Inserted: %vreg18:sub0_sub1<def,read-undef> = COPY %vreg5<kill>; SReg_128:%vreg18 SReg_64:%vreg5
Inserted: %vreg18:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg18 SGPR_64:%vreg17
Eliminated: %vreg18<def> = REG_SEQUENCE %vreg5<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg18 SReg_64:%vreg5 SGPR_64:%vreg17
Inserted: %vreg24:sub0_sub1<def,read-undef> = COPY %vreg6<kill>; SReg_128:%vreg24 SReg_64:%vreg6
Inserted: %vreg24:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg24 SGPR_64:%vreg17
Eliminated: %vreg24<def> = REG_SEQUENCE %vreg6<kill>, sub0_sub1, %vreg17, sub2_sub3; SReg_128:%vreg24 SReg_64:%vreg6 SGPR_64:%vreg17
Inserted: %vreg86:sub0_sub1<def,read-undef> = COPY %vreg7<kill>; SReg_128:%vreg86 SReg_64:%vreg7
Inserted: %vreg86:sub2_sub3<def> = COPY %vreg17<kill>; SReg_128:%vreg86 SGPR_64:%vreg17
Eliminated: %vreg86<def> = REG_SEQUENCE %vreg7<kill>, sub0_sub1, %vreg17<kill>, sub2_sub3; SReg_128:%vreg86 SReg_64:%vreg7 SGPR_64:%vreg17
# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
	%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
	%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
	%vreg91:sub0<def,read-undef> = COPY %vreg90<kill>; VReg_64:%vreg91 VGPR_32:%vreg90
	%vreg91:sub1<def> = COPY %vreg95<kill>; VReg_64:%vreg91 VGPR_32:%vreg95
	%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
	%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
	%vreg17:sub0<def,read-undef> = COPY %vreg16<kill>; SGPR_64:%vreg17 SReg_32:%vreg16
	%vreg17:sub1<def> = COPY %vreg15<kill>; SGPR_64:%vreg17 SReg_32:%vreg15
	%vreg18:sub0_sub1<def,read-undef> = COPY %vreg5<kill>; SReg_128:%vreg18 SReg_64:%vreg5
	%vreg18:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg18 SGPR_64:%vreg17
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24:sub0_sub1<def,read-undef> = COPY %vreg6<kill>; SReg_128:%vreg24 SReg_64:%vreg6
	%vreg24:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg24 SGPR_64:%vreg17
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106<kill>, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36<kill>, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109<kill>, %vreg110<kill>, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44<kill>, %vreg35<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118<kill>, %vreg115<kill>, %vreg37<kill>, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19<kill>, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123<kill>, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103<kill>, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107<kill>, %vreg101<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63<kill>, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102<kill>, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86:sub0_sub1<def,read-undef> = COPY %vreg7<kill>; SReg_128:%vreg86 SReg_64:%vreg7
	%vreg86:sub2_sub3<def> = COPY %vreg17<kill>; SReg_128:%vreg86 SGPR_64:%vreg17
	BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94<kill>, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
160B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
176B		%vreg91:sub0<def,read-undef> = COPY %vreg90<kill>; VReg_64:%vreg91 VGPR_32:%vreg90
192B		%vreg91:sub1<def> = COPY %vreg95<kill>; VReg_64:%vreg91 VGPR_32:%vreg95
208B		%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
224B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
240B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
256B		%vreg17:sub0<def,read-undef> = COPY %vreg16<kill>; SGPR_64:%vreg17 SReg_32:%vreg16
272B		%vreg17:sub1<def> = COPY %vreg15<kill>; SGPR_64:%vreg17 SReg_32:%vreg15
288B		%vreg18:sub0_sub1<def,read-undef> = COPY %vreg5<kill>; SReg_128:%vreg18 SReg_64:%vreg5
304B		%vreg18:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg18 SGPR_64:%vreg17
320B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
336B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
352B		%vreg24:sub0_sub1<def,read-undef> = COPY %vreg6<kill>; SReg_128:%vreg24 SReg_64:%vreg6
368B		%vreg24:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg24 SGPR_64:%vreg17
384B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
400B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
416B		%vreg111<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106<kill>, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
528B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36<kill>, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109<kill>, %vreg110<kill>, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44<kill>, %vreg35<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118<kill>, %vreg115<kill>, %vreg37<kill>, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19<kill>, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
720B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
736B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
752B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
768B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
784B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
800B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
816B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123<kill>, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
832B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
848B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103<kill>, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
864B		%vreg102<def> = V_ADD_I32_e32 %vreg107<kill>, %vreg101<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
880B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63<kill>, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
896B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102<kill>, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
912B		%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
928B		%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
944B		%vreg86:sub0_sub1<def,read-undef> = COPY %vreg7<kill>; SReg_128:%vreg86 SReg_64:%vreg7
960B		%vreg86:sub2_sub3<def> = COPY %vreg17<kill>; SReg_128:%vreg86 SGPR_64:%vreg17
976B		BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94<kill>, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
992B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Slot index numbering ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4<kill>; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0<kill>; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1<kill>; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg90<def> = V_ADD_I32_e32 %vreg8<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
160B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
176B		%vreg91:sub0<def,read-undef> = COPY %vreg90<kill>; VReg_64:%vreg91 VGPR_32:%vreg90
192B		%vreg91:sub1<def> = COPY %vreg95<kill>; VReg_64:%vreg91 VGPR_32:%vreg95
208B		%vreg94<def> = V_LSHL_B64 %vreg91<kill>, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
224B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
240B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
256B		%vreg17:sub0<def,read-undef> = COPY %vreg16<kill>; SGPR_64:%vreg17 SReg_32:%vreg16
272B		%vreg17:sub1<def> = COPY %vreg15<kill>; SGPR_64:%vreg17 SReg_32:%vreg15
288B		%vreg18:sub0_sub1<def,read-undef> = COPY %vreg5<kill>; SReg_128:%vreg18 SReg_64:%vreg5
304B		%vreg18:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg18 SGPR_64:%vreg17
320B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
336B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
352B		%vreg24:sub0_sub1<def,read-undef> = COPY %vreg6<kill>; SReg_128:%vreg24 SReg_64:%vreg6
368B		%vreg24:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg24 SGPR_64:%vreg17
384B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
400B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
416B		%vreg111<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106<kill>, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
528B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36<kill>, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109<kill>, %vreg110<kill>, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44<kill>, %vreg35<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118<kill>, %vreg115<kill>, %vreg37<kill>, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19<kill>, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
720B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
736B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
752B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
768B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
784B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
800B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
816B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123<kill>, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
832B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
848B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103<kill>, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
864B		%vreg102<def> = V_ADD_I32_e32 %vreg107<kill>, %vreg101<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
880B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63<kill>, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
896B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102<kill>, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
912B		%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
928B		%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
944B		%vreg86:sub0_sub1<def,read-undef> = COPY %vreg7<kill>; SReg_128:%vreg86 SReg_64:%vreg7
960B		%vreg86:sub2_sub3<def> = COPY %vreg17<kill>; SReg_128:%vreg86 SGPR_64:%vreg17
976B		BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94<kill>, %vreg86<kill>, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
992B		S_ENDPGM

# End machine code for function remainder_intint.

Computing live-in reg-units in ABI blocks.
0B	BB#0 SGPR0#0 SGPR1#0 VGPR0#0 SGPR4#0
Created 4 new intervals.
********** INTERVALS **********
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg0 [48r,112r:0)  0@48r
%vreg2 [32r,144r:0)  0@32r
%vreg3 [16r,128r:0)  0@16r
%vreg4 [64r,128r:0)  0@64r
%vreg5 [80r,288r:0)  0@80r
%vreg6 [96r,352r:0)  0@96r
%vreg7 [112r,944r:0)  0@112r
%vreg8 [128r,144r:0)  0@128r
%vreg15 [224r,272r:0)  0@224r
%vreg16 [240r,256r:0)  0@240r
%vreg17 [256r,272r:0)[272r,960r:1)  0@256r 1@272r L0001 [256r,960r:0)  0@256r L0002 [272r,960r:0)  0@272r
%vreg18 [288r,304r:0)[304r,320r:1)  0@288r 1@304r L0003 [288r,320r:0)  0@288r L000C [304r,320r:0)  0@304r
%vreg19 [320r,656r:0)  0@320r
%vreg24 [352r,368r:0)[368r,384r:1)  0@352r 1@368r L0003 [352r,384r:0)  0@352r L000C [368r,384r:0)  0@368r
%vreg25 [384r,416r:0)  0@384r
%vreg32 [448r,464r:0)  0@448r
%vreg33 [464r,480r:0)  0@464r
%vreg34 [480r,496r:0)  0@480r
%vreg35 [496r,624r:0)  0@496r
%vreg36 [512r,528r:0)  0@512r
%vreg37 [528r,640r:0)  0@528r
%vreg41 [576r,592r:0)  0@576r
%vreg44 [592r,624r:0)  0@592r
%vreg51 [640r,688r:0)  0@640r
%vreg57 [688r,704r:0)  0@688r
%vreg60 [720r,736r:0)  0@720r
%vreg63 [736r,880r:0)  0@736r
%vreg66 [768r,784r:0)  0@768r
%vreg68 [784r,800r:0)  0@784r
%vreg73 [816r,848r:0)  0@816r
%vreg76 [848r,896r:0)  0@848r
%vreg80 [880r,896r:0)  0@880r
%vreg81 [896r,912r:0)  0@896r
%vreg86 [944r,960r:0)[960r,976r:1)  0@944r 1@960r L0003 [944r,976r:0)  0@944r L000C [960r,976r:0)  0@960r
%vreg90 [144r,176r:0)  0@144r
%vreg91 [176r,192r:0)[192r,208r:1)  0@176r 1@192r L0001 [176r,208r:0)  0@176r L0002 [192r,208r:0)  0@192r
%vreg94 [208r,976r:0)  0@208r
%vreg95 [160r,192r:0)  0@160r
%vreg97 [336r,928r:0)  0@336r
%vreg98 [928r,976r:0)  0@928r
%vreg99 [912r,928r:0)  0@912r
%vreg100 [672r,752r:0)  0@672r
%vreg101 [752r,864r:0)  0@752r
%vreg102 [864r,896r:0)  0@864r
%vreg103 [832r,848r:0)  0@832r
%vreg104 [656r,672r:0)  0@656r
%vreg106 [400r,432r:0)  0@400r
%vreg107 [432r,864r:0)  0@432r
%vreg108 [704r,752r:0)  0@704r
%vreg109 [544r,576r:0)  0@544r
%vreg110 [560r,576r:0)  0@560r
%vreg111 [416r,432r:0)  0@416r
%vreg115 [608r,640r:0)  0@608r
%vreg118 [624r,640r:0)  0@624r
%vreg123 [800r,816r:0)  0@800r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg90<def> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
160B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
176B		%vreg91:sub0<def,read-undef> = COPY %vreg90; VReg_64:%vreg91 VGPR_32:%vreg90
192B		%vreg91:sub1<def> = COPY %vreg95; VReg_64:%vreg91 VGPR_32:%vreg95
208B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
224B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
240B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
256B		%vreg17:sub0<def,read-undef> = COPY %vreg16; SGPR_64:%vreg17 SReg_32:%vreg16
272B		%vreg17:sub1<def> = COPY %vreg15; SGPR_64:%vreg17 SReg_32:%vreg15
288B		%vreg18:sub0_sub1<def,read-undef> = COPY %vreg5; SReg_128:%vreg18 SReg_64:%vreg5
304B		%vreg18:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg18 SGPR_64:%vreg17
320B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
336B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
352B		%vreg24:sub0_sub1<def,read-undef> = COPY %vreg6; SReg_128:%vreg24 SReg_64:%vreg6
368B		%vreg24:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg24 SGPR_64:%vreg17
384B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
400B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
416B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
528B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
720B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
736B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
752B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
768B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
784B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
800B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
816B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
832B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
848B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
864B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
880B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
896B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
912B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
928B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
944B		%vreg86:sub0_sub1<def,read-undef> = COPY %vreg7; SReg_128:%vreg86 SReg_64:%vreg7
960B		%vreg86:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg86 SGPR_64:%vreg17
976B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
992B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg5<def> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg5,%vreg0
96B		%vreg6<def> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg6,%vreg0
112B		%vreg7<def> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_64:%vreg7,%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg90<def> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg90,%vreg2 SReg_32:%vreg8
160B		%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg90, %EXEC<imp-use>; VGPR_32:%vreg95,%vreg90
176B		%vreg91:sub0<def,read-undef> = COPY %vreg90; VReg_64:%vreg91 VGPR_32:%vreg90
192B		%vreg91:sub1<def> = COPY %vreg95; VReg_64:%vreg91 VGPR_32:%vreg95
208B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
224B		%vreg15<def> = S_MOV_B32 61440; SReg_32:%vreg15
240B		%vreg16<def> = S_MOV_B32 0; SReg_32:%vreg16
256B		%vreg17:sub0<def,read-undef> = COPY %vreg16; SGPR_64:%vreg17 SReg_32:%vreg16
272B		%vreg17:sub1<def> = COPY %vreg15; SGPR_64:%vreg17 SReg_32:%vreg15
288B		%vreg18:sub0_sub1<def,read-undef> = COPY %vreg5; SReg_128:%vreg18 SReg_64:%vreg5
304B		%vreg18:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg18 SGPR_64:%vreg17
320B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
336B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
352B		%vreg24:sub0_sub1<def,read-undef> = COPY %vreg6; SReg_128:%vreg24 SReg_64:%vreg6
368B		%vreg24:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg24 SGPR_64:%vreg17
384B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
400B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
416B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
528B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
720B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
736B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
752B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
768B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
784B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
800B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
816B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
832B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
848B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
864B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
880B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
896B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
912B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
928B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
944B		%vreg86:sub0_sub1<def,read-undef> = COPY %vreg7; SReg_128:%vreg86 SReg_64:%vreg7
960B		%vreg86:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg86 SGPR_64:%vreg17
976B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
992B		S_ENDPGM

# End machine code for function remainder_intint.

********** SIMPLE REGISTER COALESCING **********
********** Function: remainder_intint
********** JOINING INTERVALS ***********
entry:
16B	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	Considering merging %vreg3 with %SGPR4
	Can only merge into reserved registers.
32B	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	Considering merging %vreg2 with %VGPR0
	Can only merge into reserved registers.
48B	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	Considering merging %vreg0 with %SGPR0_SGPR1
	Can only merge into reserved registers.
176B	%vreg91:sub0<def,read-undef> = COPY %vreg90; VReg_64:%vreg91 VGPR_32:%vreg90
	Considering merging to VReg_64 with %vreg90 in %vreg91:sub0
		RHS = %vreg90 [144r,176r:0)  0@144r
		LHS = %vreg91 [176r,192r:0)[192r,208r:1)  0@176r 1@192r L0001 [176r,208r:0)  0@176r L0002 [192r,208r:0)  0@192r
		merge %vreg91:0@176r into %vreg90:0@144r --> @144r
		LHST = %vreg91 %vreg91 [176r,192r:0)[192r,208r:1)  0@176r 1@192r L0001 [176r,208r:0)  0@176r L0002 [192r,208r:0)  0@192r
		Copy+Merge 0001 into 0001
		merge %vreg91:0@176r into %vreg90:0@144r --> @144r
		joined lanes: [144r,208r:0)  0@144r
	Joined SubRanges %vreg91 [176r,192r:0)[192r,208r:1)  0@176r 1@192r L0001 [144r,208r:0)  0@144r L0002 [192r,208r:0)  0@192r
		erased:	176r	%vreg91:sub0<def,read-undef> = COPY %vreg90; VReg_64:%vreg91 VGPR_32:%vreg90
AllocationOrder(VReg_64) = [ %VGPR0_VGPR1 %VGPR1_VGPR2 %VGPR2_VGPR3 %VGPR3_VGPR4 %VGPR4_VGPR5 %VGPR5_VGPR6 %VGPR6_VGPR7 %VGPR7_VGPR8 %VGPR8_VGPR9 %VGPR9_VGPR10 %VGPR10_VGPR11 %VGPR11_VGPR12 %VGPR12_VGPR13 %VGPR13_VGPR14 %VGPR14_VGPR15 %VGPR15_VGPR16 %VGPR16_VGPR17 %VGPR17_VGPR18 %VGPR18_VGPR19 %VGPR19_VGPR20 %VGPR20_VGPR21 %VGPR21_VGPR22 %VGPR22_VGPR23 %VGPR23_VGPR24 %VGPR24_VGPR25 %VGPR25_VGPR26 %VGPR26_VGPR27 %VGPR27_VGPR28 %VGPR28_VGPR29 %VGPR29_VGPR30 %VGPR30_VGPR31 %VGPR31_VGPR32 %VGPR32_VGPR33 %VGPR33_VGPR34 %VGPR34_VGPR35 %VGPR35_VGPR36 %VGPR36_VGPR37 %VGPR37_VGPR38 %VGPR38_VGPR39 %VGPR39_VGPR40 %VGPR40_VGPR41 %VGPR41_VGPR42 %VGPR42_VGPR43 %VGPR43_VGPR44 %VGPR44_VGPR45 %VGPR45_VGPR46 %VGPR46_VGPR47 %VGPR47_VGPR48 %VGPR48_VGPR49 %VGPR49_VGPR50 %VGPR50_VGPR51 %VGPR51_VGPR52 %VGPR52_VGPR53 %VGPR53_VGPR54 %VGPR54_VGPR55 %VGPR55_VGPR56 %VGPR56_VGPR57 %VGPR57_VGPR58 %VGPR58_VGPR59 %VGPR59_VGPR60 %VGPR60_VGPR61 %VGPR61_VGPR62 %VGPR62_VGPR63 %VGPR63_VGPR64 %VGPR64_VGPR65 %VGPR65_VGPR66 %VGPR66_VGPR67 %VGPR67_VGPR68 %VGPR68_VGPR69 %VGPR69_VGPR70 %VGPR70_VGPR71 %VGPR71_VGPR72 %VGPR72_VGPR73 %VGPR73_VGPR74 %VGPR74_VGPR75 %VGPR75_VGPR76 %VGPR76_VGPR77 %VGPR77_VGPR78 %VGPR78_VGPR79 %VGPR79_VGPR80 %VGPR80_VGPR81 %VGPR81_VGPR82 %VGPR82_VGPR83 %VGPR83_VGPR84 %VGPR84_VGPR85 %VGPR85_VGPR86 %VGPR86_VGPR87 %VGPR87_VGPR88 %VGPR88_VGPR89 %VGPR89_VGPR90 %VGPR90_VGPR91 %VGPR91_VGPR92 %VGPR92_VGPR93 %VGPR93_VGPR94 %VGPR94_VGPR95 %VGPR95_VGPR96 %VGPR96_VGPR97 %VGPR97_VGPR98 %VGPR98_VGPR99 %VGPR99_VGPR100 %VGPR100_VGPR101 %VGPR101_VGPR102 %VGPR102_VGPR103 %VGPR103_VGPR104 %VGPR104_VGPR105 %VGPR105_VGPR106 %VGPR106_VGPR107 %VGPR107_VGPR108 %VGPR108_VGPR109 %VGPR109_VGPR110 %VGPR110_VGPR111 %VGPR111_VGPR112 %VGPR112_VGPR113 %VGPR113_VGPR114 %VGPR114_VGPR115 %VGPR115_VGPR116 %VGPR116_VGPR117 %VGPR117_VGPR118 %VGPR118_VGPR119 %VGPR119_VGPR120 %VGPR120_VGPR121 %VGPR121_VGPR122 %VGPR122_VGPR123 %VGPR123_VGPR124 %VGPR124_VGPR125 %VGPR125_VGPR126 %VGPR126_VGPR127 %VGPR127_VGPR128 %VGPR128_VGPR129 %VGPR129_VGPR130 %VGPR130_VGPR131 %VGPR131_VGPR132 %VGPR132_VGPR133 %VGPR133_VGPR134 %VGPR134_VGPR135 %VGPR135_VGPR136 %VGPR136_VGPR137 %VGPR137_VGPR138 %VGPR138_VGPR139 %VGPR139_VGPR140 %VGPR140_VGPR141 %VGPR141_VGPR142 %VGPR142_VGPR143 %VGPR143_VGPR144 %VGPR144_VGPR145 %VGPR145_VGPR146 %VGPR146_VGPR147 %VGPR147_VGPR148 %VGPR148_VGPR149 %VGPR149_VGPR150 %VGPR150_VGPR151 %VGPR151_VGPR152 %VGPR152_VGPR153 %VGPR153_VGPR154 %VGPR154_VGPR155 %VGPR155_VGPR156 %VGPR156_VGPR157 %VGPR157_VGPR158 %VGPR158_VGPR159 %VGPR159_VGPR160 %VGPR160_VGPR161 %VGPR161_VGPR162 %VGPR162_VGPR163 %VGPR163_VGPR164 %VGPR164_VGPR165 %VGPR165_VGPR166 %VGPR166_VGPR167 %VGPR167_VGPR168 %VGPR168_VGPR169 %VGPR169_VGPR170 %VGPR170_VGPR171 %VGPR171_VGPR172 %VGPR172_VGPR173 %VGPR173_VGPR174 %VGPR174_VGPR175 %VGPR175_VGPR176 %VGPR176_VGPR177 %VGPR177_VGPR178 %VGPR178_VGPR179 %VGPR179_VGPR180 %VGPR180_VGPR181 %VGPR181_VGPR182 %VGPR182_VGPR183 %VGPR183_VGPR184 %VGPR184_VGPR185 %VGPR185_VGPR186 %VGPR186_VGPR187 %VGPR187_VGPR188 %VGPR188_VGPR189 %VGPR189_VGPR190 %VGPR190_VGPR191 %VGPR191_VGPR192 %VGPR192_VGPR193 %VGPR193_VGPR194 %VGPR194_VGPR195 %VGPR195_VGPR196 %VGPR196_VGPR197 %VGPR197_VGPR198 %VGPR198_VGPR199 %VGPR199_VGPR200 %VGPR200_VGPR201 %VGPR201_VGPR202 %VGPR202_VGPR203 %VGPR203_VGPR204 %VGPR204_VGPR205 %VGPR205_VGPR206 %VGPR206_VGPR207 %VGPR207_VGPR208 %VGPR208_VGPR209 %VGPR209_VGPR210 %VGPR210_VGPR211 %VGPR211_VGPR212 %VGPR212_VGPR213 %VGPR213_VGPR214 %VGPR214_VGPR215 %VGPR215_VGPR216 %VGPR216_VGPR217 %VGPR217_VGPR218 %VGPR218_VGPR219 %VGPR219_VGPR220 %VGPR220_VGPR221 %VGPR221_VGPR222 %VGPR222_VGPR223 %VGPR223_VGPR224 %VGPR224_VGPR225 %VGPR225_VGPR226 %VGPR226_VGPR227 %VGPR227_VGPR228 %VGPR228_VGPR229 %VGPR229_VGPR230 %VGPR230_VGPR231 %VGPR231_VGPR232 %VGPR232_VGPR233 %VGPR233_VGPR234 %VGPR234_VGPR235 %VGPR235_VGPR236 %VGPR236_VGPR237 %VGPR237_VGPR238 %VGPR238_VGPR239 %VGPR239_VGPR240 %VGPR240_VGPR241 %VGPR241_VGPR242 %VGPR242_VGPR243 %VGPR243_VGPR244 %VGPR244_VGPR245 %VGPR245_VGPR246 %VGPR246_VGPR247 %VGPR247_VGPR248 %VGPR248_VGPR249 %VGPR249_VGPR250 %VGPR250_VGPR251 %VGPR251_VGPR252 %VGPR252_VGPR253 ]
		updated: 144B	%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
		updated: 160B	%vreg95<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VGPR_32:%vreg95 VReg_64:%vreg91
	Success: %vreg90:sub0 -> %vreg91
	Result = %vreg91 [144r,192r:0)[192r,208r:1)  0@144r 1@192r L0001 [144r,208r:0)  0@144r L0002 [192r,208r:0)  0@192r
192B	%vreg91:sub1<def> = COPY %vreg95; VReg_64:%vreg91 VGPR_32:%vreg95
	Considering merging to VReg_64 with %vreg95 in %vreg91:sub1
		RHS = %vreg95 [160r,192r:0)  0@160r
		LHS = %vreg91 [144r,192r:0)[192r,208r:1)  0@144r 1@192r L0001 [144r,208r:0)  0@144r L0002 [192r,208r:0)  0@192r
		merge %vreg91:1@192r into %vreg95:0@160r --> @160r
		LHST = %vreg91 %vreg91 [144r,192r:0)[192r,208r:1)  0@144r 1@192r L0001 [144r,208r:0)  0@144r L0002 [192r,208r:0)  0@192r
		Copy+Merge 0002 into 0002
		merge %vreg91:0@192r into %vreg95:0@160r --> @160r
		joined lanes: [160r,208r:0)  0@160r
	Joined SubRanges %vreg91 [144r,192r:0)[192r,208r:1)  0@144r 1@192r L0001 [144r,208r:0)  0@144r L0002 [160r,208r:0)  0@160r
		pruned %vreg91 at 160r: [144r,160r:0)[192r,208r:1)  0@144r 1@192r
		erased:	192r	%vreg91:sub1<def> = COPY %vreg95; VReg_64:%vreg91 VGPR_32:%vreg95
		restoring liveness to 2 points: %vreg91 [144r,160r:0)[160r,208r:1)  0@144r 1@160r L0001 [144r,208r:0)  0@144r L0002 [160r,208r:0)  0@160r
		updated: 160B	%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
	Success: %vreg95:sub1 -> %vreg91
	Result = %vreg91 [144r,160r:0)[160r,208r:1)  0@144r 1@160r L0001 [144r,208r:0)  0@144r L0002 [160r,208r:0)  0@160r
256B	%vreg17:sub0<def,read-undef> = COPY %vreg16; SGPR_64:%vreg17 SReg_32:%vreg16
	Considering merging to SGPR_64 with %vreg16 in %vreg17:sub0
		RHS = %vreg16 [240r,256r:0)  0@240r
		LHS = %vreg17 [256r,272r:0)[272r,960r:1)  0@256r 1@272r L0001 [256r,960r:0)  0@256r L0002 [272r,960r:0)  0@272r
		merge %vreg17:0@256r into %vreg16:0@240r --> @240r
		LHST = %vreg17 %vreg17 [256r,272r:0)[272r,960r:1)  0@256r 1@272r L0001 [256r,960r:0)  0@256r L0002 [272r,960r:0)  0@272r
		Copy+Merge 0001 into 0001
		merge %vreg17:0@256r into %vreg16:0@240r --> @240r
		joined lanes: [240r,960r:0)  0@240r
	Joined SubRanges %vreg17 [256r,272r:0)[272r,960r:1)  0@256r 1@272r L0001 [240r,960r:0)  0@240r L0002 [272r,960r:0)  0@272r
		erased:	256r	%vreg17:sub0<def,read-undef> = COPY %vreg16; SGPR_64:%vreg17 SReg_32:%vreg16
AllocationOrder(SGPR_64) = [ %SGPR0_SGPR1 %SGPR2_SGPR3 %SGPR4_SGPR5 %SGPR6_SGPR7 %SGPR8_SGPR9 %SGPR10_SGPR11 %SGPR12_SGPR13 %SGPR14_SGPR15 %SGPR16_SGPR17 %SGPR18_SGPR19 %SGPR20_SGPR21 %SGPR22_SGPR23 %SGPR24_SGPR25 %SGPR26_SGPR27 %SGPR28_SGPR29 %SGPR30_SGPR31 %SGPR32_SGPR33 %SGPR34_SGPR35 %SGPR36_SGPR37 %SGPR38_SGPR39 %SGPR40_SGPR41 %SGPR42_SGPR43 %SGPR44_SGPR45 %SGPR46_SGPR47 %SGPR48_SGPR49 %SGPR50_SGPR51 %SGPR52_SGPR53 %SGPR54_SGPR55 %SGPR56_SGPR57 %SGPR58_SGPR59 %SGPR60_SGPR61 %SGPR62_SGPR63 %SGPR64_SGPR65 %SGPR66_SGPR67 %SGPR68_SGPR69 %SGPR70_SGPR71 %SGPR72_SGPR73 %SGPR74_SGPR75 %SGPR76_SGPR77 %SGPR78_SGPR79 %SGPR80_SGPR81 %SGPR82_SGPR83 %SGPR84_SGPR85 %SGPR86_SGPR87 %SGPR88_SGPR89 %SGPR90_SGPR91 %SGPR92_SGPR93 %SGPR94_SGPR95 %SGPR96_SGPR97 %SGPR98_SGPR99 %SGPR100_SGPR101 ]
		updated: 240B	%vreg17:sub0<def,read-undef> = S_MOV_B32 0; SGPR_64:%vreg17
	Success: %vreg16:sub0 -> %vreg17
	Result = %vreg17 [240r,272r:0)[272r,960r:1)  0@240r 1@272r L0001 [240r,960r:0)  0@240r L0002 [272r,960r:0)  0@272r
272B	%vreg17:sub1<def> = COPY %vreg15; SGPR_64:%vreg17 SReg_32:%vreg15
	Considering merging to SGPR_64 with %vreg15 in %vreg17:sub1
		RHS = %vreg15 [224r,272r:0)  0@224r
		LHS = %vreg17 [240r,272r:0)[272r,960r:1)  0@240r 1@272r L0001 [240r,960r:0)  0@240r L0002 [272r,960r:0)  0@272r
		merge %vreg17:1@272r into %vreg15:0@224r --> @224r
		LHST = %vreg17 %vreg17 [240r,272r:0)[272r,960r:1)  0@240r 1@272r L0001 [240r,960r:0)  0@240r L0002 [272r,960r:0)  0@272r
		Copy+Merge 0002 into 0002
		merge %vreg17:0@272r into %vreg15:0@224r --> @224r
		joined lanes: [224r,960r:0)  0@224r
	Joined SubRanges %vreg17 [240r,272r:0)[272r,960r:1)  0@240r 1@272r L0001 [240r,960r:0)  0@240r L0002 [224r,960r:0)  0@224r
		pruned %vreg15 at 240r: [224r,240r:0)  0@224r
		pruned all of %vreg17 at 272r: [240r,272r:0)  0@240r 1@272r
		erased:	272r	%vreg17:sub1<def> = COPY %vreg15; SGPR_64:%vreg17 SReg_32:%vreg15
		restoring liveness to 3 points: %vreg17 [224r,240r:0)[240r,272r:1)  0@224r 1@240r L0001 [240r,960r:0)  0@240r L0002 [224r,960r:0)  0@224r
		updated: 224B	%vreg17:sub1<def,read-undef> = S_MOV_B32 61440; SGPR_64:%vreg17
	Success: %vreg15:sub1 -> %vreg17
	Result = %vreg17 [224r,240r:0)[240r,960r:1)  0@224r 1@240r L0001 [240r,960r:0)  0@240r L0002 [224r,960r:0)  0@224r
288B	%vreg18:sub0_sub1<def,read-undef> = COPY %vreg5; SReg_128:%vreg18 SReg_64:%vreg5
	Considering merging to SReg_128 with %vreg5 in %vreg18:sub0_sub1
		RHS = %vreg5 [80r,288r:0)  0@80r
		LHS = %vreg18 [288r,304r:0)[304r,320r:1)  0@288r 1@304r L0003 [288r,320r:0)  0@288r L000C [304r,320r:0)  0@304r
		merge %vreg18:0@288r into %vreg5:0@80r --> @80r
		LHST = %vreg18 %vreg18 [288r,304r:0)[304r,320r:1)  0@288r 1@304r L0003 [288r,320r:0)  0@288r L000C [304r,320r:0)  0@304r
		Copy+Merge 0003 into 0003
		merge %vreg18:0@288r into %vreg5:0@80r --> @80r
		joined lanes: [80r,320r:0)  0@80r
	Joined SubRanges %vreg18 [288r,304r:0)[304r,320r:1)  0@288r 1@304r L0003 [80r,320r:0)  0@80r L000C [304r,320r:0)  0@304r
		erased:	288r	%vreg18:sub0_sub1<def,read-undef> = COPY %vreg5; SReg_128:%vreg18 SReg_64:%vreg5
AllocationOrder(SReg_128) = [ %SGPR0_SGPR1_SGPR2_SGPR3 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR12_SGPR13_SGPR14_SGPR15 %SGPR16_SGPR17_SGPR18_SGPR19 %SGPR20_SGPR21_SGPR22_SGPR23 %SGPR24_SGPR25_SGPR26_SGPR27 %SGPR28_SGPR29_SGPR30_SGPR31 %SGPR32_SGPR33_SGPR34_SGPR35 %SGPR36_SGPR37_SGPR38_SGPR39 %SGPR40_SGPR41_SGPR42_SGPR43 %SGPR44_SGPR45_SGPR46_SGPR47 %SGPR48_SGPR49_SGPR50_SGPR51 %SGPR52_SGPR53_SGPR54_SGPR55 %SGPR56_SGPR57_SGPR58_SGPR59 %SGPR60_SGPR61_SGPR62_SGPR63 %SGPR64_SGPR65_SGPR66_SGPR67 %SGPR68_SGPR69_SGPR70_SGPR71 %SGPR72_SGPR73_SGPR74_SGPR75 %SGPR76_SGPR77_SGPR78_SGPR79 %SGPR80_SGPR81_SGPR82_SGPR83 %SGPR84_SGPR85_SGPR86_SGPR87 %SGPR88_SGPR89_SGPR90_SGPR91 %SGPR92_SGPR93_SGPR94_SGPR95 %SGPR96_SGPR97_SGPR98_SGPR99 ]
		updated: 80B	%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
	Success: %vreg5:sub0_sub1 -> %vreg18
	Result = %vreg18 [80r,304r:0)[304r,320r:1)  0@80r 1@304r L0003 [80r,320r:0)  0@80r L000C [304r,320r:0)  0@304r
304B	%vreg18:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg18 SGPR_64:%vreg17
	Considering merging to SReg_128 with %vreg17 in %vreg18:sub2_sub3
		RHS = %vreg17 [224r,240r:0)[240r,960r:1)  0@224r 1@240r L0001 [240r,960r:0)  0@240r L0002 [224r,960r:0)  0@224r
		LHS = %vreg18 [80r,304r:0)[304r,320r:1)  0@80r 1@304r L0003 [80r,320r:0)  0@80r L000C [304r,320r:0)  0@304r
		merge %vreg18:1@304r into %vreg17:1@240r --> @240r
		LHST = %vreg18 %vreg18 [80r,304r:0)[304r,320r:1)  0@80r 1@304r L0003 [80r,320r:0)  0@80r L000C [304r,320r:0)  0@304r
		Copy+Merge 000C into 0004
		Reduce Lane to 0008
		merge %vreg18:0@304r into %vreg17:0@240r --> @240r
		joined lanes: [240r,960r:0)  0@240r
		Copy+Merge 0008 into 0008
		merge %vreg18:0@304r into %vreg17:0@224r --> @224r
		joined lanes: [224r,960r:0)  0@224r
	Joined SubRanges %vreg18 [80r,304r:0)[304r,320r:1)  0@80r 1@304r L0004 [240r,960r:0)  0@240r L0003 [80r,320r:0)  0@80r L0008 [224r,960r:0)  0@224r
		pruned %vreg18 at 224r: [80r,224r:0)[304r,320r:1)  0@80r 1@304r
		pruned %vreg18 at 240r: [80r,224r:0)[304r,320r:1)  0@80r 1@304r
		erased:	304r	%vreg18:sub2_sub3<def> = COPY %vreg17; SReg_128:%vreg18 SGPR_64:%vreg17
		restoring liveness to 3 points: %vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,320r:0)  0@80r L0008 [224r,960r:0)  0@224r
		updated: 224B	%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
		updated: 240B	%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
		updated: 368B	%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
		updated: 960B	%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
	Success: %vreg17:sub2_sub3 -> %vreg18
	Result = %vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,320r:0)  0@80r L0008 [224r,960r:0)  0@224r
352B	%vreg24:sub0_sub1<def,read-undef> = COPY %vreg6; SReg_128:%vreg24 SReg_64:%vreg6
	Considering merging to SReg_128 with %vreg6 in %vreg24:sub0_sub1
		RHS = %vreg6 [96r,352r:0)  0@96r
		LHS = %vreg24 [352r,368r:0)[368r,384r:1)  0@352r 1@368r L0003 [352r,384r:0)  0@352r L000C [368r,384r:0)  0@368r
		merge %vreg24:0@352r into %vreg6:0@96r --> @96r
		LHST = %vreg24 %vreg24 [352r,368r:0)[368r,384r:1)  0@352r 1@368r L0003 [352r,384r:0)  0@352r L000C [368r,384r:0)  0@368r
		Copy+Merge 0003 into 0003
		merge %vreg24:0@352r into %vreg6:0@96r --> @96r
		joined lanes: [96r,384r:0)  0@96r
	Joined SubRanges %vreg24 [352r,368r:0)[368r,384r:1)  0@352r 1@368r L0003 [96r,384r:0)  0@96r L000C [368r,384r:0)  0@368r
		erased:	352r	%vreg24:sub0_sub1<def,read-undef> = COPY %vreg6; SReg_128:%vreg24 SReg_64:%vreg6
		updated: 96B	%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
	Success: %vreg6:sub0_sub1 -> %vreg24
	Result = %vreg24 [96r,368r:0)[368r,384r:1)  0@96r 1@368r L0003 [96r,384r:0)  0@96r L000C [368r,384r:0)  0@368r
368B	%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
	Considering merging to SReg_128 with %vreg18 in %vreg24
		RHS = %vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,320r:0)  0@80r L0008 [224r,960r:0)  0@224r
		LHS = %vreg24 [96r,368r:0)[368r,384r:1)  0@96r 1@368r L0003 [96r,384r:0)  0@96r L000C [368r,384r:0)  0@368r
		merge %vreg24:1@368r into %vreg18:2@240r --> @240r
		conflict at %vreg24:0@96r
		taints local %vreg18:0@80r to 224r
		taints local %vreg18:1@224r to 240r
		taints local %vreg18:2@240r to 960r
		tainted lanes used by: %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	Interference!
944B	%vreg86:sub0_sub1<def,read-undef> = COPY %vreg7; SReg_128:%vreg86 SReg_64:%vreg7
	Considering merging to SReg_128 with %vreg7 in %vreg86:sub0_sub1
		RHS = %vreg7 [112r,944r:0)  0@112r
		LHS = %vreg86 [944r,960r:0)[960r,976r:1)  0@944r 1@960r L0003 [944r,976r:0)  0@944r L000C [960r,976r:0)  0@960r
		merge %vreg86:0@944r into %vreg7:0@112r --> @112r
		LHST = %vreg86 %vreg86 [944r,960r:0)[960r,976r:1)  0@944r 1@960r L0003 [944r,976r:0)  0@944r L000C [960r,976r:0)  0@960r
		Copy+Merge 0003 into 0003
		merge %vreg86:0@944r into %vreg7:0@112r --> @112r
		joined lanes: [112r,976r:0)  0@112r
	Joined SubRanges %vreg86 [944r,960r:0)[960r,976r:1)  0@944r 1@960r L0003 [112r,976r:0)  0@112r L000C [960r,976r:0)  0@960r
		erased:	944r	%vreg86:sub0_sub1<def,read-undef> = COPY %vreg7; SReg_128:%vreg86 SReg_64:%vreg7
		updated: 112B	%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
	Success: %vreg7:sub0_sub1 -> %vreg86
	Result = %vreg86 [112r,960r:0)[960r,976r:1)  0@112r 1@960r L0003 [112r,976r:0)  0@112r L000C [960r,976r:0)  0@960r
960B	%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
	Considering merging to SReg_128 with %vreg18 in %vreg86
		RHS = %vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,320r:0)  0@80r L0008 [224r,960r:0)  0@224r
		LHS = %vreg86 [112r,960r:0)[960r,976r:1)  0@112r 1@960r L0003 [112r,976r:0)  0@112r L000C [960r,976r:0)  0@960r
		merge %vreg86:1@960r into %vreg18:2@240r --> @240r
		conflict at %vreg86:0@112r
		taints local %vreg18:0@80r to 224r
		taints local %vreg18:1@224r to 240r
		taints local %vreg18:2@240r to 960r
		tainted lanes used by: %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	Interference!
368B	%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
	Considering merging to SReg_128 with %vreg18 in %vreg24
		RHS = %vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,320r:0)  0@80r L0008 [224r,960r:0)  0@224r
		LHS = %vreg24 [96r,368r:0)[368r,384r:1)  0@96r 1@368r L0003 [96r,384r:0)  0@96r L000C [368r,384r:0)  0@368r
		merge %vreg24:1@368r into %vreg18:2@240r --> @240r
		conflict at %vreg24:0@96r
		taints local %vreg18:0@80r to 224r
		taints local %vreg18:1@224r to 240r
		taints local %vreg18:2@240r to 960r
		tainted lanes used by: %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	Interference!
960B	%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
	Considering merging to SReg_128 with %vreg18 in %vreg86
		RHS = %vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,320r:0)  0@80r L0008 [224r,960r:0)  0@224r
		LHS = %vreg86 [112r,960r:0)[960r,976r:1)  0@112r 1@960r L0003 [112r,976r:0)  0@112r L000C [960r,976r:0)  0@960r
		merge %vreg86:1@960r into %vreg18:2@240r --> @240r
		conflict at %vreg86:0@112r
		taints local %vreg18:0@80r to 224r
		taints local %vreg18:1@224r to 240r
		taints local %vreg18:2@240r to 960r
		tainted lanes used by: %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	Interference!
Trying to inflate 0 regs.
********** INTERVALS **********
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,16r:0)  0@0B-phi
VGPR0 [0B,32r:0)  0@0B-phi
%vreg0 [48r,112r:0)  0@48r
%vreg2 [32r,144r:0)  0@32r
%vreg3 [16r,128r:0)  0@16r
%vreg4 [64r,128r:0)  0@64r
%vreg8 [128r,144r:0)  0@128r
%vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,320r:0)  0@80r L0008 [224r,960r:0)  0@224r
%vreg19 [320r,656r:0)  0@320r
%vreg24 [96r,368r:0)[368r,384r:1)  0@96r 1@368r L0003 [96r,384r:0)  0@96r L000C [368r,384r:0)  0@368r
%vreg25 [384r,416r:0)  0@384r
%vreg32 [448r,464r:0)  0@448r
%vreg33 [464r,480r:0)  0@464r
%vreg34 [480r,496r:0)  0@480r
%vreg35 [496r,624r:0)  0@496r
%vreg36 [512r,528r:0)  0@512r
%vreg37 [528r,640r:0)  0@528r
%vreg41 [576r,592r:0)  0@576r
%vreg44 [592r,624r:0)  0@592r
%vreg51 [640r,688r:0)  0@640r
%vreg57 [688r,704r:0)  0@688r
%vreg60 [720r,736r:0)  0@720r
%vreg63 [736r,880r:0)  0@736r
%vreg66 [768r,784r:0)  0@768r
%vreg68 [784r,800r:0)  0@784r
%vreg73 [816r,848r:0)  0@816r
%vreg76 [848r,896r:0)  0@848r
%vreg80 [880r,896r:0)  0@880r
%vreg81 [896r,912r:0)  0@896r
%vreg86 [112r,960r:0)[960r,976r:1)  0@112r 1@960r L0003 [112r,976r:0)  0@112r L000C [960r,976r:0)  0@960r
%vreg91 [144r,160r:0)[160r,208r:1)  0@144r 1@160r L0001 [144r,208r:0)  0@144r L0002 [160r,208r:0)  0@160r
%vreg94 [208r,976r:0)  0@208r
%vreg97 [336r,928r:0)  0@336r
%vreg98 [928r,976r:0)  0@928r
%vreg99 [912r,928r:0)  0@912r
%vreg100 [672r,752r:0)  0@672r
%vreg101 [752r,864r:0)  0@752r
%vreg102 [864r,896r:0)  0@864r
%vreg103 [832r,848r:0)  0@832r
%vreg104 [656r,672r:0)  0@656r
%vreg106 [400r,432r:0)  0@400r
%vreg107 [432r,864r:0)  0@432r
%vreg108 [704r,752r:0)  0@704r
%vreg109 [544r,576r:0)  0@544r
%vreg110 [560r,576r:0)  0@560r
%vreg111 [416r,432r:0)  0@416r
%vreg115 [608r,640r:0)  0@608r
%vreg118 [624r,640r:0)  0@624r
%vreg123 [800r,816r:0)  0@800r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
160B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
208B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
320B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
336B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
384B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
400B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
416B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
528B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
720B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
736B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
752B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
768B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
784B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
800B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
816B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
832B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
848B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
864B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
880B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
896B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
912B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
928B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
976B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
992B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
16B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
32B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
128B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
144B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
160B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
208B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
320B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
336B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
384B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
400B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
416B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
528B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
720B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
736B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
752B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
768B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
784B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
800B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
816B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
832B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
848B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
864B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
880B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
896B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
912B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
928B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
976B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
992B		S_ENDPGM

# End machine code for function remainder_intint.

Before MISsched:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
	%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
	%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
	%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
	%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
	%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
	%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
	%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
	%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
	%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
	%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
	%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
	%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
	%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
	%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
	%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
	%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
	%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
	%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
	%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
	%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
	%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
	%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
	%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
	%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
	%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
	%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
	%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
	%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
	%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
	%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
	%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
	%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
	%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
	%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
	%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
	%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
	%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
	%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
	%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
	%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
	%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
	%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
	%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
	%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
	%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
	%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
	%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
	%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
	%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
	%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
	%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
	%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
	BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
	S_ENDPGM

# End machine code for function remainder_intint.

AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
********** MI Scheduling **********
remainder_intint:BB#0 entry
  From: %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
    To: S_ENDPGM
 RegionInstrs: 53 Remaining: 0
Max Pressure: SGPR_32=13
SReg_32=14
VGPR_32=8
VS_32=20
Live In: SGPR0 SGPR1 VGPR0 SGPR4 
Live Out: 
Live Thru: 
AllocationOrder(R600_Predicate_Bit) = [ %PREDICATE_BIT ]
AllocationOrder(R600_Predicate) = [ %PRED_SEL_OFF %PRED_SEL_ZERO %PRED_SEL_ONE ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_W) = [ %V01_W %V23_W ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_X) = [ %V01_X %V23_X ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_Y) = [ %V01_Y %V23_Y ]
AllocationOrder(R600_Reg64Vertical_with_sub0_in_R600_TReg32_Z) = [ %V01_Z %V23_Z ]
AllocationOrder(R600_Reg64Vertical) = [ %V01_X %V01_Y %V01_Z %V01_W %V23_X %V23_Y %V23_Z %V23_W ]
AllocationOrder(R600_ArrayBase) = [ %ArrayBase448 %ArrayBase449 %ArrayBase450 %ArrayBase451 %ArrayBase452 %ArrayBase453 %ArrayBase454 %ArrayBase455 %ArrayBase456 %ArrayBase457 %ArrayBase458 %ArrayBase459 %ArrayBase460 %ArrayBase461 %ArrayBase462 %ArrayBase463 %ArrayBase464 %ArrayBase465 %ArrayBase466 %ArrayBase467 %ArrayBase468 %ArrayBase469 %ArrayBase470 %ArrayBase471 %ArrayBase472 %ArrayBase473 %ArrayBase474 %ArrayBase475 %ArrayBase476 %ArrayBase477 %ArrayBase478 %ArrayBase479 %ArrayBase480 ]
AllocationOrder(SGPR_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 ]
AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
AllocationOrder(R600_TReg32_W) = [ %T0_W %T1_W %T2_W %T3_W %T4_W %T5_W %T6_W %T7_W %T8_W %T9_W %T10_W %T11_W %T12_W %T13_W %T14_W %T15_W %T16_W %T17_W %T18_W %T19_W %T20_W %T21_W %T22_W %T23_W %T24_W %T25_W %T26_W %T27_W %T28_W %T29_W %T30_W %T31_W %T32_W %T33_W %T34_W %T35_W %T36_W %T37_W %T38_W %T39_W %T40_W %T41_W %T42_W %T43_W %T44_W %T45_W %T46_W %T47_W %T48_W %T49_W %T50_W %T51_W %T52_W %T53_W %T54_W %T55_W %T56_W %T57_W %T58_W %T59_W %T60_W %T61_W %T62_W %T63_W %T64_W %T65_W %T66_W %T67_W %T68_W %T69_W %T70_W %T71_W %T72_W %T73_W %T74_W %T75_W %T76_W %T77_W %T78_W %T79_W %T80_W %T81_W %T82_W %T83_W %T84_W %T85_W %T86_W %T87_W %T88_W %T89_W %T90_W %T91_W %T92_W %T93_W %T94_W %T95_W %T96_W %T97_W %T98_W %T99_W %T100_W %T101_W %T102_W %T103_W %T104_W %T105_W %T106_W %T107_W %T108_W %T109_W %T110_W %T111_W %T112_W %T113_W %T114_W %T115_W %T116_W %T117_W %T118_W %T119_W %T120_W %T121_W %T122_W %T123_W %T124_W %T125_W %T126_W %T127_W ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_Z) = [ %T0_Z %T1_Z %T2_Z %T3_Z %T4_Z %T5_Z %T6_Z %T7_Z %T8_Z %T9_Z %T10_Z %T11_Z %T12_Z %T13_Z %T14_Z %T15_Z %T16_Z %T17_Z %T18_Z %T19_Z %T20_Z %T21_Z %T22_Z %T23_Z %T24_Z %T25_Z %T26_Z %T27_Z %T28_Z %T29_Z %T30_Z %T31_Z %T32_Z %T33_Z %T34_Z %T35_Z %T36_Z %T37_Z %T38_Z %T39_Z %T40_Z %T41_Z %T42_Z %T43_Z %T44_Z %T45_Z %T46_Z %T47_Z %T48_Z %T49_Z %T50_Z %T51_Z %T52_Z %T53_Z %T54_Z %T55_Z %T56_Z %T57_Z %T58_Z %T59_Z %T60_Z %T61_Z %T62_Z %T63_Z %T64_Z %T65_Z %T66_Z %T67_Z %T68_Z %T69_Z %T70_Z %T71_Z %T72_Z %T73_Z %T74_Z %T75_Z %T76_Z %T77_Z %T78_Z %T79_Z %T80_Z %T81_Z %T82_Z %T83_Z %T84_Z %T85_Z %T86_Z %T87_Z %T88_Z %T89_Z %T90_Z %T91_Z %T92_Z %T93_Z %T94_Z %T95_Z %T96_Z %T97_Z %T98_Z %T99_Z %T100_Z %T101_Z %T102_Z %T103_Z %T104_Z %T105_Z %T106_Z %T107_Z %T108_Z %T109_Z %T110_Z %T111_Z %T112_Z %T113_Z %T114_Z %T115_Z %T116_Z %T117_Z %T118_Z %T119_Z %T120_Z %T121_Z %T122_Z %T123_Z %T124_Z %T125_Z %T126_Z %T127_Z ]
AllocationOrder(R600_Reg64) = [ %T0_XY %T1_XY %T2_XY %T3_XY %T4_XY %T5_XY %T6_XY %T7_XY %T8_XY %T9_XY %T10_XY %T11_XY %T12_XY %T13_XY %T14_XY %T15_XY %T16_XY %T17_XY %T18_XY %T19_XY %T20_XY %T21_XY %T22_XY %T23_XY %T24_XY %T25_XY %T26_XY %T27_XY %T28_XY %T29_XY %T30_XY %T31_XY %T32_XY %T33_XY %T34_XY %T35_XY %T36_XY %T37_XY %T38_XY %T39_XY %T40_XY %T41_XY %T42_XY %T43_XY %T44_XY %T45_XY %T46_XY %T47_XY %T48_XY %T49_XY %T50_XY %T51_XY %T52_XY %T53_XY %T54_XY %T55_XY %T56_XY %T57_XY %T58_XY %T59_XY %T60_XY %T61_XY %T62_XY %T63_XY ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(R600_Reg64) = [ %T0_XY %T1_XY %T2_XY %T3_XY %T4_XY %T5_XY %T6_XY %T7_XY %T8_XY %T9_XY %T10_XY %T11_XY %T12_XY %T13_XY %T14_XY %T15_XY %T16_XY %T17_XY %T18_XY %T19_XY %T20_XY %T21_XY %T22_XY %T23_XY %T24_XY %T25_XY %T26_XY %T27_XY %T28_XY %T29_XY %T30_XY %T31_XY %T32_XY %T33_XY %T34_XY %T35_XY %T36_XY %T37_XY %T38_XY %T39_XY %T40_XY %T41_XY %T42_XY %T43_XY %T44_XY %T45_XY %T46_XY %T47_XY %T48_XY %T49_XY %T50_XY %T51_XY %T52_XY %T53_XY %T54_XY %T55_XY %T56_XY %T57_XY %T58_XY %T59_XY %T60_XY %T61_XY %T62_XY %T63_XY ]
AllocationOrder(R600_TReg32_W) = [ %T0_W %T1_W %T2_W %T3_W %T4_W %T5_W %T6_W %T7_W %T8_W %T9_W %T10_W %T11_W %T12_W %T13_W %T14_W %T15_W %T16_W %T17_W %T18_W %T19_W %T20_W %T21_W %T22_W %T23_W %T24_W %T25_W %T26_W %T27_W %T28_W %T29_W %T30_W %T31_W %T32_W %T33_W %T34_W %T35_W %T36_W %T37_W %T38_W %T39_W %T40_W %T41_W %T42_W %T43_W %T44_W %T45_W %T46_W %T47_W %T48_W %T49_W %T50_W %T51_W %T52_W %T53_W %T54_W %T55_W %T56_W %T57_W %T58_W %T59_W %T60_W %T61_W %T62_W %T63_W %T64_W %T65_W %T66_W %T67_W %T68_W %T69_W %T70_W %T71_W %T72_W %T73_W %T74_W %T75_W %T76_W %T77_W %T78_W %T79_W %T80_W %T81_W %T82_W %T83_W %T84_W %T85_W %T86_W %T87_W %T88_W %T89_W %T90_W %T91_W %T92_W %T93_W %T94_W %T95_W %T96_W %T97_W %T98_W %T99_W %T100_W %T101_W %T102_W %T103_W %T104_W %T105_W %T106_W %T107_W %T108_W %T109_W %T110_W %T111_W %T112_W %T113_W %T114_W %T115_W %T116_W %T117_W %T118_W %T119_W %T120_W %T121_W %T122_W %T123_W %T124_W %T125_W %T126_W %T127_W ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_Z) = [ %T0_Z %T1_Z %T2_Z %T3_Z %T4_Z %T5_Z %T6_Z %T7_Z %T8_Z %T9_Z %T10_Z %T11_Z %T12_Z %T13_Z %T14_Z %T15_Z %T16_Z %T17_Z %T18_Z %T19_Z %T20_Z %T21_Z %T22_Z %T23_Z %T24_Z %T25_Z %T26_Z %T27_Z %T28_Z %T29_Z %T30_Z %T31_Z %T32_Z %T33_Z %T34_Z %T35_Z %T36_Z %T37_Z %T38_Z %T39_Z %T40_Z %T41_Z %T42_Z %T43_Z %T44_Z %T45_Z %T46_Z %T47_Z %T48_Z %T49_Z %T50_Z %T51_Z %T52_Z %T53_Z %T54_Z %T55_Z %T56_Z %T57_Z %T58_Z %T59_Z %T60_Z %T61_Z %T62_Z %T63_Z %T64_Z %T65_Z %T66_Z %T67_Z %T68_Z %T69_Z %T70_Z %T71_Z %T72_Z %T73_Z %T74_Z %T75_Z %T76_Z %T77_Z %T78_Z %T79_Z %T80_Z %T81_Z %T82_Z %T83_Z %T84_Z %T85_Z %T86_Z %T87_Z %T88_Z %T89_Z %T90_Z %T91_Z %T92_Z %T93_Z %T94_Z %T95_Z %T96_Z %T97_Z %T98_Z %T99_Z %T100_Z %T101_Z %T102_Z %T103_Z %T104_Z %T105_Z %T106_Z %T107_Z %T108_Z %T109_Z %T110_Z %T111_Z %T112_Z %T113_Z %T114_Z %T115_Z %T116_Z %T117_Z %T118_Z %T119_Z %T120_Z %T121_Z %T122_Z %T123_Z %T124_Z %T125_Z %T126_Z %T127_Z ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(R600_TReg32_Y) = [ %T0_Y %T1_Y %T2_Y %T3_Y %T4_Y %T5_Y %T6_Y %T7_Y %T8_Y %T9_Y %T10_Y %T11_Y %T12_Y %T13_Y %T14_Y %T15_Y %T16_Y %T17_Y %T18_Y %T19_Y %T20_Y %T21_Y %T22_Y %T23_Y %T24_Y %T25_Y %T26_Y %T27_Y %T28_Y %T29_Y %T30_Y %T31_Y %T32_Y %T33_Y %T34_Y %T35_Y %T36_Y %T37_Y %T38_Y %T39_Y %T40_Y %T41_Y %T42_Y %T43_Y %T44_Y %T45_Y %T46_Y %T47_Y %T48_Y %T49_Y %T50_Y %T51_Y %T52_Y %T53_Y %T54_Y %T55_Y %T56_Y %T57_Y %T58_Y %T59_Y %T60_Y %T61_Y %T62_Y %T63_Y %T64_Y %T65_Y %T66_Y %T67_Y %T68_Y %T69_Y %T70_Y %T71_Y %T72_Y %T73_Y %T74_Y %T75_Y %T76_Y %T77_Y %T78_Y %T79_Y %T80_Y %T81_Y %T82_Y %T83_Y %T84_Y %T85_Y %T86_Y %T87_Y %T88_Y %T89_Y %T90_Y %T91_Y %T92_Y %T93_Y %T94_Y %T95_Y %T96_Y %T97_Y %T98_Y %T99_Y %T100_Y %T101_Y %T102_Y %T103_Y %T104_Y %T105_Y %T106_Y %T107_Y %T108_Y %T109_Y %T110_Y %T111_Y %T112_Y %T113_Y %T114_Y %T115_Y %T116_Y %T117_Y %T118_Y %T119_Y %T120_Y %T121_Y %T122_Y %T123_Y %T124_Y %T125_Y %T126_Y %T127_Y ]
AllocationOrder(R600_TReg32_X) = [ %T0_X %T1_X %T2_X %T3_X %T4_X %T5_X %T6_X %T7_X %T8_X %T9_X %T10_X %T11_X %T12_X %T13_X %T14_X %T15_X %T16_X %T17_X %T18_X %T19_X %T20_X %T21_X %T22_X %T23_X %T24_X %T25_X %T26_X %T27_X %T28_X %T29_X %T30_X %T31_X %T32_X %T33_X %T34_X %T35_X %T36_X %T37_X %T38_X %T39_X %T40_X %T41_X %T42_X %T43_X %T44_X %T45_X %T46_X %T47_X %T48_X %T49_X %T50_X %T51_X %T52_X %T53_X %T54_X %T55_X %T56_X %T57_X %T58_X %T59_X %T60_X %T61_X %T62_X %T63_X %T64_X %T65_X %T66_X %T67_X %T68_X %T69_X %T70_X %T71_X %T72_X %T73_X %T74_X %T75_X %T76_X %T77_X %T78_X %T79_X %T80_X %T81_X %T82_X %T83_X %T84_X %T85_X %T86_X %T87_X %T88_X %T89_X %T90_X %T91_X %T92_X %T93_X %T94_X %T95_X %T96_X %T97_X %T98_X %T99_X %T100_X %T101_X %T102_X %T103_X %T104_X %T105_X %T106_X %T107_X %T108_X %T109_X %T110_X %T111_X %T112_X %T113_X %T114_X %T115_X %T116_X %T117_X %T118_X %T119_X %T120_X %T121_X %T122_X %T123_X %T124_X %T125_X %T126_X %T127_X %AR_X ]
AllocationOrder(VGPR_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 ]
AllocationOrder(VS_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
VS_32 Limit 18 Actual 20
AllocationOrder(R600_TReg32) = [ %T0_X %T0_Y %T0_Z %T0_W %T1_X %T1_Y %T1_Z %T1_W %T2_X %T2_Y %T2_Z %T2_W %T3_X %T3_Y %T3_Z %T3_W %T4_X %T4_Y %T4_Z %T4_W %T5_X %T5_Y %T5_Z %T5_W %T6_X %T6_Y %T6_Z %T6_W %T7_X %T7_Y %T7_Z %T7_W %T8_X %T8_Y %T8_Z %T8_W %T9_X %T9_Y %T9_Z %T9_W %T10_X %T10_Y %T10_Z %T10_W %T11_X %T11_Y %T11_Z %T11_W %T12_X %T12_Y %T12_Z %T12_W %T13_X %T13_Y %T13_Z %T13_W %T14_X %T14_Y %T14_Z %T14_W %T15_X %T15_Y %T15_Z %T15_W %T16_X %T16_Y %T16_Z %T16_W %T17_X %T17_Y %T17_Z %T17_W %T18_X %T18_Y %T18_Z %T18_W %T19_X %T19_Y %T19_Z %T19_W %T20_X %T20_Y %T20_Z %T20_W %T21_X %T21_Y %T21_Z %T21_W %T22_X %T22_Y %T22_Z %T22_W %T23_X %T23_Y %T23_Z %T23_W %T24_X %T24_Y %T24_Z %T24_W %T25_X %T25_Y %T25_Z %T25_W %T26_X %T26_Y %T26_Z %T26_W %T27_X %T27_Y %T27_Z %T27_W %T28_X %T28_Y %T28_Z %T28_W %T29_X %T29_Y %T29_Z %T29_W %T30_X %T30_Y %T30_Z %T30_W %T31_X %T31_Y %T31_Z %T31_W %T32_X %T32_Y %T32_Z %T32_W %T33_X %T33_Y %T33_Z %T33_W %T34_X %T34_Y %T34_Z %T34_W %T35_X %T35_Y %T35_Z %T35_W %T36_X %T36_Y %T36_Z %T36_W %T37_X %T37_Y %T37_Z %T37_W %T38_X %T38_Y %T38_Z %T38_W %T39_X %T39_Y %T39_Z %T39_W %T40_X %T40_Y %T40_Z %T40_W %T41_X %T41_Y %T41_Z %T41_W %T42_X %T42_Y %T42_Z %T42_W %T43_X %T43_Y %T43_Z %T43_W %T44_X %T44_Y %T44_Z %T44_W %T45_X %T45_Y %T45_Z %T45_W %T46_X %T46_Y %T46_Z %T46_W %T47_X %T47_Y %T47_Z %T47_W %T48_X %T48_Y %T48_Z %T48_W %T49_X %T49_Y %T49_Z %T49_W %T50_X %T50_Y %T50_Z %T50_W %T51_X %T51_Y %T51_Z %T51_W %T52_X %T52_Y %T52_Z %T52_W %T53_X %T53_Y %T53_Z %T53_W %T54_X %T54_Y %T54_Z %T54_W %T55_X %T55_Y %T55_Z %T55_W %T56_X %T56_Y %T56_Z %T56_W %T57_X %T57_Y %T57_Z %T57_W %T58_X %T58_Y %T58_Z %T58_W %T59_X %T59_Y %T59_Z %T59_W %T60_X %T60_Y %T60_Z %T60_W %T61_X %T61_Y %T61_Z %T61_W %T62_X %T62_Y %T62_Z %T62_W %T63_X %T63_Y %T63_Z %T63_W %T64_X %T64_Y %T64_Z %T64_W %T65_X %T65_Y %T65_Z %T65_W %T66_X %T66_Y %T66_Z %T66_W %T67_X %T67_Y %T67_Z %T67_W %T68_X %T68_Y %T68_Z %T68_W %T69_X %T69_Y %T69_Z %T69_W %T70_X %T70_Y %T70_Z %T70_W %T71_X %T71_Y %T71_Z %T71_W %T72_X %T72_Y %T72_Z %T72_W %T73_X %T73_Y %T73_Z %T73_W %T74_X %T74_Y %T74_Z %T74_W %T75_X %T75_Y %T75_Z %T75_W %T76_X %T76_Y %T76_Z %T76_W %T77_X %T77_Y %T77_Z %T77_W %T78_X %T78_Y %T78_Z %T78_W %T79_X %T79_Y %T79_Z %T79_W %T80_X %T80_Y %T80_Z %T80_W %T81_X %T81_Y %T81_Z %T81_W %T82_X %T82_Y %T82_Z %T82_W %T83_X %T83_Y %T83_Z %T83_W %T84_X %T84_Y %T84_Z %T84_W %T85_X %T85_Y %T85_Z %T85_W %T86_X %T86_Y %T86_Z %T86_W %T87_X %T87_Y %T87_Z %T87_W %T88_X %T88_Y %T88_Z %T88_W %T89_X %T89_Y %T89_Z %T89_W %T90_X %T90_Y %T90_Z %T90_W %T91_X %T91_Y %T91_Z %T91_W %T92_X %T92_Y %T92_Z %T92_W %T93_X %T93_Y %T93_Z %T93_W %T94_X %T94_Y %T94_Z %T94_W %T95_X %T95_Y %T95_Z %T95_W %T96_X %T96_Y %T96_Z %T96_W %T97_X %T97_Y %T97_Z %T97_W %T98_X %T98_Y %T98_Z %T98_W %T99_X %T99_Y %T99_Z %T99_W %T100_X %T100_Y %T100_Z %T100_W %T101_X %T101_Y %T101_Z %T101_W %T102_X %T102_Y %T102_Z %T102_W %T103_X %T103_Y %T103_Z %T103_W %T104_X %T104_Y %T104_Z %T104_W %T105_X %T105_Y %T105_Z %T105_W %T106_X %T106_Y %T106_Z %T106_W %T107_X %T107_Y %T107_Z %T107_W %T108_X %T108_Y %T108_Z %T108_W %T109_X %T109_Y %T109_Z %T109_W %T110_X %T110_Y %T110_Z %T110_W %T111_X %T111_Y %T111_Z %T111_W %T112_X %T112_Y %T112_Z %T112_W %T113_X %T113_Y %T113_Z %T113_W %T114_X %T114_Y %T114_Z %T114_W %T115_X %T115_Y %T115_Z %T115_W %T116_X %T116_Y %T116_Z %T116_W %T117_X %T117_Y %T117_Z %T117_W %T118_X %T118_Y %T118_Z %T118_W %T119_X %T119_Y %T119_Z %T119_W %T120_X %T120_Y %T120_Z %T120_W %T121_X %T121_Y %T121_Z %T121_W %T122_X %T122_Y %T122_Z %T122_W %T123_X %T123_Y %T123_Z %T123_W %T124_X %T124_Y %T124_Z %T124_W %T125_X %T125_Y %T125_Z %T125_W %T126_X %T126_Y %T126_Z %T126_W %T127_X %T127_Y %T127_Z %T127_W %AR_X ]
AllocationOrder(R600_Reg32) = [ %T0_X %T0_Y %T0_Z %T0_W %T1_X %T1_Y %T1_Z %T1_W %T2_X %T2_Y %T2_Z %T2_W %T3_X %T3_Y %T3_Z %T3_W %T4_X %T4_Y %T4_Z %T4_W %T5_X %T5_Y %T5_Z %T5_W %T6_X %T6_Y %T6_Z %T6_W %T7_X %T7_Y %T7_Z %T7_W %T8_X %T8_Y %T8_Z %T8_W %T9_X %T9_Y %T9_Z %T9_W %T10_X %T10_Y %T10_Z %T10_W %T11_X %T11_Y %T11_Z %T11_W %T12_X %T12_Y %T12_Z %T12_W %T13_X %T13_Y %T13_Z %T13_W %T14_X %T14_Y %T14_Z %T14_W %T15_X %T15_Y %T15_Z %T15_W %T16_X %T16_Y %T16_Z %T16_W %T17_X %T17_Y %T17_Z %T17_W %T18_X %T18_Y %T18_Z %T18_W %T19_X %T19_Y %T19_Z %T19_W %T20_X %T20_Y %T20_Z %T20_W %T21_X %T21_Y %T21_Z %T21_W %T22_X %T22_Y %T22_Z %T22_W %T23_X %T23_Y %T23_Z %T23_W %T24_X %T24_Y %T24_Z %T24_W %T25_X %T25_Y %T25_Z %T25_W %T26_X %T26_Y %T26_Z %T26_W %T27_X %T27_Y %T27_Z %T27_W %T28_X %T28_Y %T28_Z %T28_W %T29_X %T29_Y %T29_Z %T29_W %T30_X %T30_Y %T30_Z %T30_W %T31_X %T31_Y %T31_Z %T31_W %T32_X %T32_Y %T32_Z %T32_W %T33_X %T33_Y %T33_Z %T33_W %T34_X %T34_Y %T34_Z %T34_W %T35_X %T35_Y %T35_Z %T35_W %T36_X %T36_Y %T36_Z %T36_W %T37_X %T37_Y %T37_Z %T37_W %T38_X %T38_Y %T38_Z %T38_W %T39_X %T39_Y %T39_Z %T39_W %T40_X %T40_Y %T40_Z %T40_W %T41_X %T41_Y %T41_Z %T41_W %T42_X %T42_Y %T42_Z %T42_W %T43_X %T43_Y %T43_Z %T43_W %T44_X %T44_Y %T44_Z %T44_W %T45_X %T45_Y %T45_Z %T45_W %T46_X %T46_Y %T46_Z %T46_W %T47_X %T47_Y %T47_Z %T47_W %T48_X %T48_Y %T48_Z %T48_W %T49_X %T49_Y %T49_Z %T49_W %T50_X %T50_Y %T50_Z %T50_W %T51_X %T51_Y %T51_Z %T51_W %T52_X %T52_Y %T52_Z %T52_W %T53_X %T53_Y %T53_Z %T53_W %T54_X %T54_Y %T54_Z %T54_W %T55_X %T55_Y %T55_Z %T55_W %T56_X %T56_Y %T56_Z %T56_W %T57_X %T57_Y %T57_Z %T57_W %T58_X %T58_Y %T58_Z %T58_W %T59_X %T59_Y %T59_Z %T59_W %T60_X %T60_Y %T60_Z %T60_W %T61_X %T61_Y %T61_Z %T61_W %T62_X %T62_Y %T62_Z %T62_W %T63_X %T63_Y %T63_Z %T63_W %T64_X %T64_Y %T64_Z %T64_W %T65_X %T65_Y %T65_Z %T65_W %T66_X %T66_Y %T66_Z %T66_W %T67_X %T67_Y %T67_Z %T67_W %T68_X %T68_Y %T68_Z %T68_W %T69_X %T69_Y %T69_Z %T69_W %T70_X %T70_Y %T70_Z %T70_W %T71_X %T71_Y %T71_Z %T71_W %T72_X %T72_Y %T72_Z %T72_W %T73_X %T73_Y %T73_Z %T73_W %T74_X %T74_Y %T74_Z %T74_W %T75_X %T75_Y %T75_Z %T75_W %T76_X %T76_Y %T76_Z %T76_W %T77_X %T77_Y %T77_Z %T77_W %T78_X %T78_Y %T78_Z %T78_W %T79_X %T79_Y %T79_Z %T79_W %T80_X %T80_Y %T80_Z %T80_W %T81_X %T81_Y %T81_Z %T81_W %T82_X %T82_Y %T82_Z %T82_W %T83_X %T83_Y %T83_Z %T83_W %T84_X %T84_Y %T84_Z %T84_W %T85_X %T85_Y %T85_Z %T85_W %T86_X %T86_Y %T86_Z %T86_W %T87_X %T87_Y %T87_Z %T87_W %T88_X %T88_Y %T88_Z %T88_W %T89_X %T89_Y %T89_Z %T89_W %T90_X %T90_Y %T90_Z %T90_W %T91_X %T91_Y %T91_Z %T91_W %T92_X %T92_Y %T92_Z %T92_W %T93_X %T93_Y %T93_Z %T93_W %T94_X %T94_Y %T94_Z %T94_W %T95_X %T95_Y %T95_Z %T95_W %T96_X %T96_Y %T96_Z %T96_W %T97_X %T97_Y %T97_Z %T97_W %T98_X %T98_Y %T98_Z %T98_W %T99_X %T99_Y %T99_Z %T99_W %T100_X %T100_Y %T100_Z %T100_W %T101_X %T101_Y %T101_Z %T101_W %T102_X %T102_Y %T102_Z %T102_W %T103_X %T103_Y %T103_Z %T103_W %T104_X %T104_Y %T104_Z %T104_W %T105_X %T105_Y %T105_Z %T105_W %T106_X %T106_Y %T106_Z %T106_W %T107_X %T107_Y %T107_Z %T107_W %T108_X %T108_Y %T108_Z %T108_W %T109_X %T109_Y %T109_Z %T109_W %T110_X %T110_Y %T110_Z %T110_W %T111_X %T111_Y %T111_Z %T111_W %T112_X %T112_Y %T112_Z %T112_W %T113_X %T113_Y %T113_Z %T113_W %T114_X %T114_Y %T114_Z %T114_W %T115_X %T115_Y %T115_Z %T115_W %T116_X %T116_Y %T116_Z %T116_W %T117_X %T117_Y %T117_Z %T117_W %T118_X %T118_Y %T118_Z %T118_W %T119_X %T119_Y %T119_Z %T119_W %T120_X %T120_Y %T120_Z %T120_W %T121_X %T121_Y %T121_Z %T121_W %T122_X %T122_Y %T122_Z %T122_W %T123_X %T123_Y %T123_Z %T123_W %T124_X %T124_Y %T124_Z %T124_W %T125_X %T125_Y %T125_Z %T125_W %T126_X %T126_Y %T126_Z %T126_W %T127_X %T127_Y %T127_Z %T127_W %AR_X %ArrayBase448 %ArrayBase449 %ArrayBase450 %ArrayBase451 %ArrayBase452 %ArrayBase453 %ArrayBase454 %ArrayBase455 %ArrayBase456 %ArrayBase457 %ArrayBase458 %ArrayBase459 %ArrayBase460 %ArrayBase461 %ArrayBase462 %ArrayBase463 %ArrayBase464 %ArrayBase465 %ArrayBase466 %ArrayBase467 %ArrayBase468 %ArrayBase469 %ArrayBase470 %ArrayBase471 %ArrayBase472 %ArrayBase473 %ArrayBase474 %ArrayBase475 %ArrayBase476 %ArrayBase477 %ArrayBase478 %ArrayBase479 %ArrayBase480 %Addr0_X %Addr1_X %Addr2_X %Addr3_X %Addr4_X %Addr5_X %Addr6_X %Addr7_X %Addr8_X %Addr9_X %Addr10_X %Addr11_X %Addr12_X %Addr13_X %Addr14_X %Addr15_X %Addr16_X %Addr17_X %Addr18_X %Addr19_X %Addr20_X %Addr21_X %Addr22_X %Addr23_X %Addr24_X %Addr25_X %Addr26_X %Addr27_X %Addr28_X %Addr29_X %Addr30_X %Addr31_X %Addr32_X %Addr33_X %Addr34_X %Addr35_X %Addr36_X %Addr37_X %Addr38_X %Addr39_X %Addr40_X %Addr41_X %Addr42_X %Addr43_X %Addr44_X %Addr45_X %Addr46_X %Addr47_X %Addr48_X %Addr49_X %Addr50_X %Addr51_X %Addr52_X %Addr53_X %Addr54_X %Addr55_X %Addr56_X %Addr57_X %Addr58_X %Addr59_X %Addr60_X %Addr61_X %Addr62_X %Addr63_X %Addr64_X %Addr65_X %Addr66_X %Addr67_X %Addr68_X %Addr69_X %Addr70_X %Addr71_X %Addr72_X %Addr73_X %Addr74_X %Addr75_X %Addr76_X %Addr77_X %Addr78_X %Addr79_X %Addr80_X %Addr81_X %Addr82_X %Addr83_X %Addr84_X %Addr85_X %Addr86_X %Addr87_X %Addr88_X %Addr89_X %Addr90_X %Addr91_X %Addr92_X %Addr93_X %Addr94_X %Addr95_X %Addr96_X %Addr97_X %Addr98_X %Addr99_X %Addr100_X %Addr101_X %Addr102_X %Addr103_X %Addr104_X %Addr105_X %Addr106_X %Addr107_X %Addr108_X %Addr109_X %Addr110_X %Addr111_X %Addr112_X %Addr113_X %Addr114_X %Addr115_X %Addr116_X %Addr117_X %Addr118_X %Addr119_X %Addr120_X %Addr121_X %Addr122_X %Addr123_X %Addr124_X %Addr125_X %Addr126_X %Addr127_X %KC0_128_X %KC0_128_Y %KC0_128_Z %KC0_128_W %KC0_129_X %KC0_129_Y %KC0_129_Z %KC0_129_W %KC0_130_X %KC0_130_Y %KC0_130_Z %KC0_130_W %KC0_131_X %KC0_131_Y %KC0_131_Z %KC0_131_W %KC0_132_X %KC0_132_Y %KC0_132_Z %KC0_132_W %KC0_133_X %KC0_133_Y %KC0_133_Z %KC0_133_W %KC0_134_X %KC0_134_Y %KC0_134_Z %KC0_134_W %KC0_135_X %KC0_135_Y %KC0_135_Z %KC0_135_W %KC0_136_X %KC0_136_Y %KC0_136_Z %KC0_136_W %KC0_137_X %KC0_137_Y %KC0_137_Z %KC0_137_W %KC0_138_X %KC0_138_Y %KC0_138_Z %KC0_138_W %KC0_139_X %KC0_139_Y %KC0_139_Z %KC0_139_W %KC0_140_X %KC0_140_Y %KC0_140_Z %KC0_140_W %KC0_141_X %KC0_141_Y %KC0_141_Z %KC0_141_W %KC0_142_X %KC0_142_Y %KC0_142_Z %KC0_142_W %KC0_143_X %KC0_143_Y %KC0_143_Z %KC0_143_W %KC0_144_X %KC0_144_Y %KC0_144_Z %KC0_144_W %KC0_145_X %KC0_145_Y %KC0_145_Z %KC0_145_W %KC0_146_X %KC0_146_Y %KC0_146_Z %KC0_146_W %KC0_147_X %KC0_147_Y %KC0_147_Z %KC0_147_W %KC0_148_X %KC0_148_Y %KC0_148_Z %KC0_148_W %KC0_149_X %KC0_149_Y %KC0_149_Z %KC0_149_W %KC0_150_X %KC0_150_Y %KC0_150_Z %KC0_150_W %KC0_151_X %KC0_151_Y %KC0_151_Z %KC0_151_W %KC0_152_X %KC0_152_Y %KC0_152_Z %KC0_152_W %KC0_153_X %KC0_153_Y %KC0_153_Z %KC0_153_W %KC0_154_X %KC0_154_Y %KC0_154_Z %KC0_154_W %KC0_155_X %KC0_155_Y %KC0_155_Z %KC0_155_W %KC0_156_X %KC0_156_Y %KC0_156_Z %KC0_156_W %KC0_157_X %KC0_157_Y %KC0_157_Z %KC0_157_W %KC0_158_X %KC0_158_Y %KC0_158_Z %KC0_158_W %KC0_159_X %KC0_159_Y %KC0_159_Z %KC0_159_W %KC1_160_X %KC1_160_Y %KC1_160_Z %KC1_160_W %KC1_161_X %KC1_161_Y %KC1_161_Z %KC1_161_W %KC1_162_X %KC1_162_Y %KC1_162_Z %KC1_162_W %KC1_163_X %KC1_163_Y %KC1_163_Z %KC1_163_W %KC1_164_X %KC1_164_Y %KC1_164_Z %KC1_164_W %KC1_165_X %KC1_165_Y %KC1_165_Z %KC1_165_W %KC1_166_X %KC1_166_Y %KC1_166_Z %KC1_166_W %KC1_167_X %KC1_167_Y %KC1_167_Z %KC1_167_W %KC1_168_X %KC1_168_Y %KC1_168_Z %KC1_168_W %KC1_169_X %KC1_169_Y %KC1_169_Z %KC1_169_W %KC1_170_X %KC1_170_Y %KC1_170_Z %KC1_170_W %KC1_171_X %KC1_171_Y %KC1_171_Z %KC1_171_W %KC1_172_X %KC1_172_Y %KC1_172_Z %KC1_172_W %KC1_173_X %KC1_173_Y %KC1_173_Z %KC1_173_W %KC1_174_X %KC1_174_Y %KC1_174_Z %KC1_174_W %KC1_175_X %KC1_175_Y %KC1_175_Z %KC1_175_W %KC1_176_X %KC1_176_Y %KC1_176_Z %KC1_176_W %KC1_177_X %KC1_177_Y %KC1_177_Z %KC1_177_W %KC1_178_X %KC1_178_Y %KC1_178_Z %KC1_178_W %KC1_179_X %KC1_179_Y %KC1_179_Z %KC1_179_W %KC1_180_X %KC1_180_Y %KC1_180_Z %KC1_180_W %KC1_181_X %KC1_181_Y %KC1_181_Z %KC1_181_W %KC1_182_X %KC1_182_Y %KC1_182_Z %KC1_182_W %KC1_183_X %KC1_183_Y %KC1_183_Z %KC1_183_W %KC1_184_X %KC1_184_Y %KC1_184_Z %KC1_184_W %KC1_185_X %KC1_185_Y %KC1_185_Z %KC1_185_W %KC1_186_X %KC1_186_Y %KC1_186_Z %KC1_186_W %KC1_187_X %KC1_187_Y %KC1_187_Z %KC1_187_W %KC1_188_X %KC1_188_Y %KC1_188_Z %KC1_188_W %KC1_189_X %KC1_189_Y %KC1_189_Z %KC1_189_W %KC1_190_X %KC1_190_Y %KC1_190_Z %KC1_190_W %KC1_191_X %KC1_191_Y %KC1_191_Z %KC1_191_W %ZERO %HALF %ONE %ONE_INT %PV_X %ALU_LITERAL_X %NEG_ONE %NEG_HALF %ALU_CONST %ALU_PARAM %OQAP ]
Excess PSets: VS_32 
Cluster loads SU(3) - SU(4)
  Copy Succ SU(7)
Cluster loads SU(4) - SU(5)
  Copy Succ SU(11)
  Copy Succ SU(4294967295)
  Copy Succ SU(7)
Cluster loads SU(5) - SU(6)
  Copy Succ SU(15)
  Copy Succ SU(4294967295)
  Copy Succ SU(11)
  Copy Succ SU(7)
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 499
  Successors:
   val SU(7): Latency=0 Reg=%vreg3

SU(1):   %vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 498
  Successors:
   val SU(8): Latency=0 Reg=%vreg2

SU(2):   %vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 509
  Successors:
   val SU(6): Latency=0 Reg=%vreg0
   val SU(5): Latency=0 Reg=%vreg0
   val SU(4): Latency=0 Reg=%vreg0
   val SU(3): Latency=0 Reg=%vreg0

SU(3):   %vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 509
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg0
  Successors:
   val SU(7): Latency=10 Reg=%vreg4
   ch  SU(4): Latency=0

SU(4):   %vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
  # preds left       : 1
  # succs left       : 3
  # weak preds left  : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 499
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg0
   ch  SU(3): Latency=0
  Successors:
   out SU(11): Latency=1
   ch  SU(4294967295) *: Latency=9
   ch  SU(7) *: Latency=0
   ch  SU(5): Latency=0

SU(5):   %vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
  # preds left       : 1
  # succs left       : 4
  # weak preds left  : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 499
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg0
   ch  SU(4): Latency=0
  Successors:
   out SU(15): Latency=1
   ch  SU(4294967295) *: Latency=9
   ch  SU(11) *: Latency=0
   ch  SU(7) *: Latency=0
   ch  SU(6): Latency=0

SU(6):   %vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
  # preds left       : 1
  # succs left       : 5
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 499
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg0
   ch  SU(5): Latency=0
  Successors:
   out SU(51): Latency=1
   ch  SU(4294967295) *: Latency=9
   ch  SU(15) *: Latency=0
   ch  SU(11) *: Latency=0
   ch  SU(7) *: Latency=0

SU(7):   %vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 499
  Predecessors:
   val SU(3): Latency=10 Reg=%vreg4
   val SU(0): Latency=0 Reg=%vreg3
   ch  SU(4) *: Latency=0
   ch  SU(5) *: Latency=0
   ch  SU(6) *: Latency=0
  Successors:
   val SU(8): Latency=1 Reg=%vreg8

SU(8):   %vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 498
  Predecessors:
   val SU(7): Latency=1 Reg=%vreg8
   val SU(1): Latency=0 Reg=%vreg2
  Successors:
   val SU(9): Latency=1 Reg=%vreg91
   out SU(9): Latency=1

SU(9):   %vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 497
  Predecessors:
   val SU(8): Latency=1 Reg=%vreg91
   out SU(8): Latency=1
  Successors:
   val SU(10): Latency=1 Reg=%vreg91

SU(10):   %vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 496
  Predecessors:
   val SU(9): Latency=1 Reg=%vreg91
  Successors:
   val SU(52): Latency=1 Reg=%vreg94
   val SU(16): Latency=1 Reg=%vreg94
   val SU(13): Latency=1 Reg=%vreg94

SU(11):   %vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 497
  Predecessors:
   out SU(4): Latency=1
   ch  SU(5) *: Latency=0
   ch  SU(6) *: Latency=0
  Successors:
   out SU(12): Latency=1

SU(12):   %vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 496
  Predecessors:
   out SU(11): Latency=1
  Successors:
   val SU(51): Latency=1 Reg=%vreg18
   val SU(15): Latency=1 Reg=%vreg18
   val SU(13): Latency=1 Reg=%vreg18

SU(13):   %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 450
  Depth              : 14
  Height             : 470
  Predecessors:
   val SU(10): Latency=1 Reg=%vreg94
   val SU(12): Latency=1 Reg=%vreg18
  Successors:
   val SU(33): Latency=450 Reg=%vreg19
   val SU(14): Latency=450 Reg=%vreg19
   ch  SU(52): Latency=0

SU(14):   %vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 464
  Height             : 20
  Predecessors:
   val SU(13): Latency=450 Reg=%vreg19
  Successors:
   val SU(50): Latency=1 Reg=%vreg97
   val SU(49): Latency=1 Reg=%vreg97
   val SU(34): Latency=1 Reg=%vreg97
   val SU(33): Latency=1 Reg=%vreg97

SU(15):   %vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 495
  Predecessors:
   val SU(12): Latency=1 Reg=%vreg18
   out SU(5): Latency=1
   ch  SU(6) *: Latency=0
  Successors:
   val SU(16): Latency=0 Reg=%vreg24

SU(16):   %vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 450
  Depth              : 14
  Height             : 495
  Predecessors:
   val SU(10): Latency=1 Reg=%vreg94
   val SU(15): Latency=0 Reg=%vreg24
  Successors:
   val SU(18): Latency=450 Reg=%vreg25
   val SU(17): Latency=450 Reg=%vreg25
   ch  SU(52): Latency=0

SU(17):   %vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 464
  Height             : 45
  Predecessors:
   val SU(16): Latency=450 Reg=%vreg25
  Successors:
   val SU(19): Latency=1 Reg=%vreg106
   val SU(18): Latency=1 Reg=%vreg106

SU(18):   %vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 465
  Height             : 44
  Predecessors:
   val SU(17): Latency=1 Reg=%vreg106
   val SU(16): Latency=450 Reg=%vreg25
  Successors:
   val SU(19): Latency=1 Reg=%vreg111

SU(19):   %vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 466
  Height             : 43
  Predecessors:
   val SU(18): Latency=1 Reg=%vreg111
   val SU(17): Latency=1 Reg=%vreg106
  Successors:
   val SU(46): Latency=1 Reg=%vreg107
   val SU(44): Latency=1 Reg=%vreg107
   val SU(40): Latency=1 Reg=%vreg107
   val SU(36): Latency=1 Reg=%vreg107
   val SU(26): Latency=1 Reg=%vreg107
   val SU(24): Latency=1 Reg=%vreg107
   val SU(20): Latency=1 Reg=%vreg107

SU(20):   %vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 467
  Height             : 42
  Predecessors:
   val SU(19): Latency=1 Reg=%vreg107
  Successors:
   val SU(21): Latency=4 Reg=%vreg32

SU(21):   %vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 471
  Height             : 38
  Predecessors:
   val SU(20): Latency=4 Reg=%vreg32
  Successors:
   val SU(22): Latency=4 Reg=%vreg33

SU(22):   %vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 475
  Height             : 34
  Predecessors:
   val SU(21): Latency=4 Reg=%vreg33
  Successors:
   val SU(23): Latency=1 Reg=%vreg34

SU(23):   %vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 476
  Height             : 33
  Predecessors:
   val SU(22): Latency=1 Reg=%vreg34
  Successors:
   val SU(31): Latency=4 Reg=%vreg35
   val SU(30): Latency=4 Reg=%vreg35
   val SU(29): Latency=4 Reg=%vreg35
   val SU(26): Latency=4 Reg=%vreg35
   val SU(24): Latency=4 Reg=%vreg35

SU(24):   %vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 480
  Height             : 29
  Predecessors:
   val SU(23): Latency=4 Reg=%vreg35
   val SU(19): Latency=1 Reg=%vreg107
  Successors:
   val SU(25): Latency=4 Reg=%vreg36

SU(25):   %vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 484
  Height             : 25
  Predecessors:
   val SU(24): Latency=4 Reg=%vreg36
  Successors:
   val SU(32): Latency=1 Reg=%vreg37
   val SU(28): Latency=1 Reg=%vreg37

SU(26):   %vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 480
  Height             : 29
  Predecessors:
   val SU(23): Latency=4 Reg=%vreg35
   val SU(19): Latency=1 Reg=%vreg107
  Successors:
   val SU(28): Latency=4 Reg=%vreg109
   val SU(27): Latency=4 Reg=%vreg109

SU(27):   %vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 484
  Height             : 25
  Predecessors:
   val SU(26): Latency=4 Reg=%vreg109
  Successors:
   val SU(28): Latency=1 Reg=%vreg110

SU(28):   %vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 485
  Height             : 24
  Predecessors:
   val SU(25): Latency=1 Reg=%vreg37
   val SU(27): Latency=1 Reg=%vreg110
   val SU(26): Latency=4 Reg=%vreg109
  Successors:
   val SU(29): Latency=1 Reg=%vreg41

SU(29):   %vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 486
  Height             : 23
  Predecessors:
   val SU(28): Latency=1 Reg=%vreg41
   val SU(23): Latency=4 Reg=%vreg35
  Successors:
   val SU(31): Latency=4 Reg=%vreg44
   val SU(30): Latency=4 Reg=%vreg44

SU(30):   %vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 490
  Height             : 19
  Predecessors:
   val SU(29): Latency=4 Reg=%vreg44
   val SU(23): Latency=4 Reg=%vreg35
  Successors:
   val SU(32): Latency=1 Reg=%vreg115

SU(31):   %vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 490
  Height             : 19
  Predecessors:
   val SU(29): Latency=4 Reg=%vreg44
   val SU(23): Latency=4 Reg=%vreg35
  Successors:
   val SU(32): Latency=1 Reg=%vreg118

SU(32):   %vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 491
  Height             : 18
  Predecessors:
   val SU(31): Latency=1 Reg=%vreg118
   val SU(30): Latency=1 Reg=%vreg115
   val SU(25): Latency=1 Reg=%vreg37
  Successors:
   val SU(35): Latency=1 Reg=%vreg51

SU(33):   %vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 465
  Height             : 19
  Predecessors:
   val SU(14): Latency=1 Reg=%vreg97
   val SU(13): Latency=450 Reg=%vreg19
  Successors:
   val SU(34): Latency=1 Reg=%vreg104

SU(34):   %vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 466
  Height             : 18
  Predecessors:
   val SU(33): Latency=1 Reg=%vreg104
   val SU(14): Latency=1 Reg=%vreg97
  Successors:
   val SU(39): Latency=1 Reg=%vreg100
   val SU(37): Latency=1 Reg=%vreg100
   val SU(35): Latency=1 Reg=%vreg100

SU(35):   %vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 492
  Height             : 17
  Predecessors:
   val SU(32): Latency=1 Reg=%vreg51
   val SU(34): Latency=1 Reg=%vreg100
  Successors:
   val SU(36): Latency=4 Reg=%vreg57

SU(36):   %vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 496
  Height             : 13
  Predecessors:
   val SU(35): Latency=4 Reg=%vreg57
   val SU(19): Latency=1 Reg=%vreg107
  Successors:
   val SU(39): Latency=4 Reg=%vreg108
   val SU(37): Latency=4 Reg=%vreg108

SU(37):   %vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 500
  Height             : 8
  Predecessors:
   val SU(36): Latency=4 Reg=%vreg108
   val SU(34): Latency=1 Reg=%vreg100
  Successors:
   val SU(38): Latency=1 Reg=%vreg60

SU(38):   %vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 501
  Height             : 7
  Predecessors:
   val SU(37): Latency=1 Reg=%vreg60
  Successors:
   val SU(47): Latency=1 Reg=%vreg63
   val SU(42): Latency=1 Reg=%vreg63

SU(39):   %vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 500
  Height             : 9
  Predecessors:
   val SU(36): Latency=4 Reg=%vreg108
   val SU(34): Latency=1 Reg=%vreg100
  Successors:
   val SU(46): Latency=1 Reg=%vreg101
   val SU(45): Latency=1 Reg=%vreg101
   val SU(44): Latency=1 Reg=%vreg101
   val SU(40): Latency=1 Reg=%vreg101

SU(40):   %vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 501
  Height             : 8
  Predecessors:
   val SU(39): Latency=1 Reg=%vreg101
   val SU(19): Latency=1 Reg=%vreg107
  Successors:
   val SU(41): Latency=1 Reg=%vreg66

SU(41):   %vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 502
  Height             : 7
  Predecessors:
   val SU(40): Latency=1 Reg=%vreg66
  Successors:
   val SU(42): Latency=1 Reg=%vreg68

SU(42):   %vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 503
  Height             : 6
  Predecessors:
   val SU(41): Latency=1 Reg=%vreg68
   val SU(38): Latency=1 Reg=%vreg63
  Successors:
   val SU(43): Latency=1 Reg=%vreg123

SU(43):   %vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 504
  Height             : 5
  Predecessors:
   val SU(42): Latency=1 Reg=%vreg123
  Successors:
   val SU(45): Latency=1 Reg=%vreg73

SU(44):   %vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 501
  Height             : 5
  Predecessors:
   val SU(39): Latency=1 Reg=%vreg101
   val SU(19): Latency=1 Reg=%vreg107
  Successors:
   val SU(45): Latency=1 Reg=%vreg103

SU(45):   %vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 505
  Height             : 4
  Predecessors:
   val SU(43): Latency=1 Reg=%vreg73
   val SU(39): Latency=1 Reg=%vreg101
   val SU(44): Latency=1 Reg=%vreg103
  Successors:
   val SU(48): Latency=1 Reg=%vreg76

SU(46):   %vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 501
  Height             : 4
  Predecessors:
   val SU(39): Latency=1 Reg=%vreg101
   val SU(19): Latency=1 Reg=%vreg107
  Successors:
   val SU(48): Latency=1 Reg=%vreg102

SU(47):   %vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 502
  Height             : 4
  Predecessors:
   val SU(38): Latency=1 Reg=%vreg63
  Successors:
   val SU(48): Latency=1 Reg=%vreg80

SU(48):   %vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 506
  Height             : 3
  Predecessors:
   val SU(45): Latency=1 Reg=%vreg76
   val SU(46): Latency=1 Reg=%vreg102
   val SU(47): Latency=1 Reg=%vreg80
  Successors:
   val SU(49): Latency=1 Reg=%vreg81

SU(49):   %vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 507
  Height             : 2
  Predecessors:
   val SU(48): Latency=1 Reg=%vreg81
   val SU(14): Latency=1 Reg=%vreg97
  Successors:
   val SU(50): Latency=1 Reg=%vreg99

SU(50):   %vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 508
  Height             : 1
  Predecessors:
   val SU(49): Latency=1 Reg=%vreg99
   val SU(14): Latency=1 Reg=%vreg97
  Successors:
   val SU(52): Latency=1 Reg=%vreg98

SU(51):   %vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
   val SU(12): Latency=1 Reg=%vreg18
   out SU(6): Latency=1
  Successors:
   val SU(52): Latency=0 Reg=%vreg86

SU(52):   BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 450
  Depth              : 509
  Height             : 0
  Predecessors:
   val SU(50): Latency=1 Reg=%vreg98
   val SU(10): Latency=1 Reg=%vreg94
   val SU(51): Latency=0 Reg=%vreg86
   ch  SU(16): Latency=0
   ch  SU(13): Latency=0

Critical Path(GS-RR ): 509
Pick Bot NOCAND
Scheduling SU(52) BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
  LiveReg: %vreg98
  UpdateRegP: SU(52) BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
  LiveReg: %vreg94
  UpdateRegP: SU(52) BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
  UpdateRegP: SU(16) %vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
  UpdateRegP: SU(13) %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
  LiveReg: %vreg86
  UpdateRegP: SU(52) BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
  Ready @0c
  HWVMEM +1x217u
  BotQ.A TopLatency SU(52) 509c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
BotQ.A RemLatency SU(50) 508c
  TopQ.A + Remain MOps: 47
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 50 51 
  SU(50) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(50) %vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
handleMove 928B -> 968B: %vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
     %vreg98:	[928r,976r:0)  0@928r
        -->	[968r,976r:0)  0@968r
     %vreg99:	[912r,928r:0)  0@912r
        -->	[912r,968r:0)  0@912r
     %vreg97:	[336r,928r:0)  0@336r
        -->	[336r,968r:0)  0@336r
     VCC_LO:	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[864r,864d:6)[968r,968d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@864r 7@752r 8@968r 9@144r
        -->	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[864r,864d:6)[968r,968d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@864r 7@752r 8@968r 9@144r
     VCC_HI:	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[864r,864d:6)[968r,968d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@864r 7@752r 8@968r 9@144r
        -->	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[864r,864d:6)[968r,968d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@864r 7@752r 8@968r 9@144r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg99
  UpdateRegP: SU(50) %vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
  LiveReg: %vreg97
  UpdateRegP: SU(50) %vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
  UpdateRegP: SU(49) %vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
  UpdateRegP: SU(34) %vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
  UpdateRegP: SU(33) %vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
  Ready @1c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(50) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
BotQ.A RemLatency SU(49) 507c
  TopQ.A + Remain MOps: 46
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 49 
  SU(51) ORDER                              
  SU(49) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(49) %vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
handleMove 912B -> 964B: %vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
     %vreg99:	[912r,968r:0)  0@912r
        -->	[964r,968r:0)  0@964r
     %vreg81:	[896r,912r:0)  0@896r
        -->	[896r,964r:0)  0@896r
     %vreg97:	[336r,968r:0)  0@336r
        -->	[336r,968r:0)  0@336r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg81
  UpdateRegP: SU(49) %vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
  Ready @2c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(49) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
BotQ.A RemLatency SU(48) 506c
  TopQ.A + Remain MOps: 45
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 48 
  SU(51) ORDER                              
  SU(48) REG-CRIT   VS_32:2                    
Pick Bot REG-CRIT  
Scheduling SU(48) %vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80

*** Renumbered SlotIndexes 960-1000 ***
handleMove 896B -> 968B: %vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
     %vreg81:	[896r,976r:0)  0@896r
        -->	[968r,976r:0)  0@968r
     %vreg76:	[848r,896r:0)  0@848r
        -->	[848r,968r:0)  0@848r
     %vreg102:	[864r,896r:0)  0@864r
        -->	[864r,968r:0)  0@864r
     %vreg80:	[880r,896r:0)  0@880r
        -->	[880r,968r:0)  0@880r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg76
  UpdateRegP: SU(48) %vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
  LiveReg: %vreg102
  UpdateRegP: SU(48) %vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
  LiveReg: %vreg80
  UpdateRegP: SU(48) %vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
  Ready @3c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(48) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
BotQ.A RemLatency SU(45) 505c
  TopQ.A + Remain MOps: 44
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 45 46 47 
  SU(51) ORDER                              
  SU(45) REG-CRIT   VS_32:3                    
  SU(46) REG-CRIT   VS_32:1                    
  SU(47) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(47) %vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
handleMove 880B -> 964B: %vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
     %vreg80:	[880r,968r:0)  0@880r
        -->	[964r,968r:0)  0@964r
     %vreg63:	[736r,880r:0)  0@736r
        -->	[736r,964r:0)  0@736r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg63
  UpdateRegP: SU(47) %vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
  UpdateRegP: SU(42) %vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
  Ready @4c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(47) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.A RemLatency SU(45) 505c
  TopQ.A + Remain MOps: 43
  BotQ.A RemainingLatency 505 + 5c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 45 46 
  SU(51) ORDER                              
  SU(45) REG-CRIT   VS_32:2                    
  SU(46) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(46) %vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101

*** Renumbered SlotIndexes 960-1024 ***
handleMove 864B -> 968B: %vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
     %vreg102:	[864r,984r:0)  0@864r
        -->	[968r,984r:0)  0@968r
     %vreg107:	[432r,864r:0)  0@432r
        -->	[432r,968r:0)  0@432r
     %vreg101:	[752r,864r:0)  0@752r
        -->	[752r,968r:0)  0@752r
     VCC_LO:	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[864r,864d:6)[1000r,1000d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@864r 7@752r 8@1000r 9@144r
        -->	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[968r,968d:6)[1000r,1000d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@968r 7@752r 8@1000r 9@144r
     VCC_HI:	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[864r,864d:6)[1000r,1000d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@864r 7@752r 8@1000r 9@144r
        -->	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[968r,968d:6)[1000r,1000d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@968r 7@752r 8@1000r 9@144r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg107
  UpdateRegP: SU(46) %vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
  UpdateRegP: SU(44) %vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
  UpdateRegP: SU(40) %vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
  UpdateRegP: SU(36) %vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
  UpdateRegP: SU(26) %vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
  UpdateRegP: SU(24) %vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
  UpdateRegP: SU(20) %vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
  LiveReg: %vreg101
  UpdateRegP: SU(46) %vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
  UpdateRegP: SU(45) %vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
  UpdateRegP: SU(44) %vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
  UpdateRegP: SU(40) %vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
  Ready @5c
  HWVALU +1x3255u
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.A RemLatency SU(45) 505c
  TopQ.A + Remain MOps: 42
  BotQ.A RemainingLatency 505 + 6c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 45 
  SU(51) ORDER                              
  SU(45) REG-CRIT   VS_32:1                    
Pick Bot REG-CRIT  
Scheduling SU(45) %vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
handleMove 848B -> 964B: %vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
     %vreg76:	[848r,984r:0)  0@848r
        -->	[964r,984r:0)  0@964r
     %vreg103:	[832r,848r:0)  0@832r
        -->	[832r,964r:0)  0@832r
     %vreg101:	[752r,968r:0)  0@752r
        -->	[752r,968r:0)  0@752r
     %vreg73:	[816r,848r:0)  0@816r
        -->	[816r,964r:0)  0@816r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg103
  UpdateRegP: SU(45) %vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
  LiveReg: %vreg73
  UpdateRegP: SU(45) %vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
  Ready @6c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(45) 505c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.A RemLatency SU(43) 504c
  TopQ.A + Remain MOps: 41
  BotQ.A RemainingLatency 504 + 7c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 43 44 
  SU(51) ORDER                              
  SU(43) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(43) %vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123

*** Renumbered SlotIndexes 960-1040 ***
handleMove 816B -> 968B: %vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
     %vreg73:	[816r,976r:0)  0@816r
        -->	[968r,976r:0)  0@968r
     %vreg123:	[800r,816r:0)  0@800r
        -->	[800r,968r:0)  0@800r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg123
  UpdateRegP: SU(43) %vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
  Ready @7c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(43) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
BotQ.A RemLatency SU(42) 503c
  TopQ.A + Remain MOps: 40
  BotQ.A RemainingLatency 503 + 8c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 44 42 
  SU(51) ORDER                              
  SU(44) REG-CRIT                           
  SU(42) BOT-PATH                  503 cycles 
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(42) %vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
handleMove 800B -> 964B: %vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
     %vreg123:	[800r,968r:0)  0@800r
        -->	[964r,968r:0)  0@964r
     %vreg63:	[736r,992r:0)  0@736r
        -->	[736r,992r:0)  0@736r
     %vreg68:	[784r,800r:0)  0@784r
        -->	[784r,964r:0)  0@784r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg68
  UpdateRegP: SU(42) %vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
  Ready @8c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(42) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
BotQ.A RemLatency SU(41) 502c
  TopQ.A + Remain MOps: 39
  BotQ.A RemainingLatency 502 + 9c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 44 41 38 
  SU(51) ORDER                              
  SU(44) REG-CRIT                           
  SU(41) BOT-PATH                  502 cycles 
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(41) %vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66

*** Renumbered SlotIndexes 960-1056 ***
handleMove 784B -> 968B: %vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
     %vreg68:	[784r,976r:0)  0@784r
        -->	[968r,976r:0)  0@968r
     %vreg66:	[768r,784r:0)  0@768r
        -->	[768r,968r:0)  0@768r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg66
  UpdateRegP: SU(41) %vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
  Ready @9c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(41) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
BotQ.A RemLatency SU(44) 501c
  TopQ.A + Remain MOps: 38
  BotQ.A RemainingLatency 501 + 10c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 44 38 40 
  SU(51) ORDER                              
  SU(44) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(44) %vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
handleMove 832B -> 964B: %vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
     %vreg103:	[832r,992r:0)  0@832r
        -->	[964r,992r:0)  0@964r
     %vreg107:	[432r,1000r:0)  0@432r
        -->	[432r,1000r:0)  0@432r
     %vreg101:	[752r,1000r:0)  0@752r
        -->	[752r,1000r:0)  0@752r
     VCC_LO:	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[1000r,1000d:6)[1032r,1032d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@1000r 7@752r 8@1032r 9@144r
        -->	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[964r,964d:5)[1000r,1000d:6)[1032r,1032d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@964r 6@1000r 7@752r 8@1032r 9@144r
     VCC_HI:	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[832r,832d:5)[1000r,1000d:6)[1032r,1032d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@832r 6@1000r 7@752r 8@1032r 9@144r
        -->	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[964r,964d:5)[1000r,1000d:6)[1032r,1032d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@964r 6@1000r 7@752r 8@1032r 9@144r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  Ready @10c
  HWVALU +1x3255u
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
BotQ.A RemLatency SU(40) 501c
  TopQ.A + Remain MOps: 37
  BotQ.A RemainingLatency 501 + 11c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 40 38 
  SU(51) ORDER                              
  SU(40) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(40) %vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107

*** Renumbered SlotIndexes 960-1072 ***
handleMove 768B -> 968B: %vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
     %vreg66:	[768r,984r:0)  0@768r
        -->	[968r,984r:0)  0@968r
     %vreg101:	[752r,1016r:0)  0@752r
        -->	[752r,1016r:0)  0@752r
     %vreg107:	[432r,1016r:0)  0@432r
        -->	[432r,1016r:0)  0@432r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  Ready @11c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(40) 501c
  BotQ.A BotLatency SU(40) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
BotQ.A RemLatency SU(38) 501c
  TopQ.A + Remain MOps: 36
  BotQ.A RemainingLatency 501 + 12c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 38 39 
  SU(51) ORDER                              
  SU(38) BOT-PATH                  501 cycles 
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(38) %vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
handleMove 736B -> 964B: %vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
     %vreg63:	[736r,1024r:0)  0@736r
        -->	[964r,1024r:0)  0@964r
     %vreg60:	[720r,736r:0)  0@720r
        -->	[720r,964r:0)  0@720r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg60
  UpdateRegP: SU(38) %vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
  Ready @12c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(38) 501c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
BotQ.A RemLatency SU(39) 500c
  TopQ.A + Remain MOps: 35
  BotQ.A RemainingLatency 500 + 13c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 39 37 
  SU(51) ORDER                              
  SU(39) BOT-PATH                  500 cycles 
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(39) %vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100

*** Renumbered SlotIndexes 960-1088 ***
handleMove 752B -> 968B: %vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
     %vreg101:	[752r,1032r:0)  0@752r
        -->	[968r,1032r:0)  0@968r
     %vreg108:	[704r,752r:0)  0@704r
        -->	[704r,968r:0)  0@704r
     %vreg100:	[672r,752r:0)  0@672r
        -->	[672r,968r:0)  0@672r
     VCC_LO:	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@992r 6@1032r 7@752r 8@1064r 9@144r
        -->	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@144r
     VCC_HI:	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[752r,752d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@992r 6@1032r 7@752r 8@1064r 9@144r
        -->	[144r,144d:9)[416r,416d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@416r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@144r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  LiveReg: %vreg108
  UpdateRegP: SU(39) %vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
  UpdateRegP: SU(37) %vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
  LiveReg: %vreg100
  UpdateRegP: SU(39) %vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
  UpdateRegP: SU(37) %vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
  UpdateRegP: SU(35) %vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
  Ready @13c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(39) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
BotQ.A RemLatency SU(37) 500c
  TopQ.A + Remain MOps: 34
  BotQ.A RemainingLatency 500 + 14c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 51 37 
  SU(51) ORDER                              
  SU(37) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(37) %vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
handleMove 720B -> 964B: %vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
     %vreg60:	[720r,976r:0)  0@720r
        -->	[964r,976r:0)  0@964r
     %vreg100:	[672r,968r:0)  0@672r
        -->	[672r,968r:0)  0@672r
     %vreg108:	[704r,968r:0)  0@704r
        -->	[704r,968r:0)  0@704r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  Ready @14c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(37) 500c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
BotQ.P: 36 
Pick Bot NOCAND
Scheduling SU(51) %vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
  LiveReg: %vreg86
  UpdateRegP: SU(52) BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
  LiveReg: %vreg18
  UpdateRegP: SU(51) %vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
  UpdateRegP: SU(15) %vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
  UpdateRegP: SU(13) %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
  Ready @15c
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
Cycle: 16 BotQ.A
BotQ.P: 36 
Cycle: 18 BotQ.A
Pick Bot NOCAND
Scheduling SU(36) %vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
  LiveReg: %vreg57
  UpdateRegP: SU(36) %vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
  Ready @18c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(36) 13c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 16
  Executed: 19c
  Critical: 16c, 16 MOps
  ExpectedLatency: 13c
  - Latency limited.
BotQ.P: 35 
Cycle: 22 BotQ.A
Pick Bot NOCAND
Scheduling SU(35) %vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
  LiveReg: %vreg51
  UpdateRegP: SU(35) %vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
  Ready @22c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(35) 17c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 17
  Executed: 23c
  Critical: 17c, 17 MOps
  ExpectedLatency: 17c
  - Latency limited.
BotQ.A RemLatency SU(32) 491c
  TopQ.A + Remain MOps: 31
  BotQ.A RemainingLatency 491 + 23c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 32 34 
  SU(32) ORDER                              
  SU(34) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(34) %vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
  LiveReg: %vreg104
  UpdateRegP: SU(34) %vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
  Ready @23c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(34) 18c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 18
  Executed: 24c
  Critical: 18c, 18 MOps
  ExpectedLatency: 18c
  - Latency limited.
BotQ.A RemLatency SU(32) 491c
  TopQ.A + Remain MOps: 30
  BotQ.A RemainingLatency 491 + 24c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 32 33 
  SU(32) ORDER                              
  SU(33) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(33) %vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg19
  UpdateRegP: SU(33) %vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
  UpdateRegP: SU(14) %vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
  Ready @24c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(33) 19c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 19
  Executed: 25c
  Critical: 19c, 19 MOps
  ExpectedLatency: 19c
  - Latency limited.
BotQ.A RemLatency SU(32) 491c
  TopQ.A + Remain MOps: 29
  BotQ.A RemainingLatency 491 + 25c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 32 14 
  SU(32) ORDER                              
  SU(14) REG-CRIT                           
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-CRIT  
Scheduling SU(14) %vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
handleMove 336B -> 648B: %vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
     %vreg97:	[336r,1064r:0)  0@336r
        -->	[648r,1064r:0)  0@648r
     %vreg19:	[320r,656r:0)  0@320r
        -->	[320r,656r:0)  0@320r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 16 <= 18(+ 0 livethru)
  Ready @25c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(14) 20c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 20
  Executed: 26c
  Critical: 20c, 20 MOps
  ExpectedLatency: 20c
  - Latency limited.
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(32) %vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
  VS_32: 16 <= 18(+ 0 livethru)
  LiveReg: %vreg118
  UpdateRegP: SU(32) %vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
  LiveReg: %vreg115
  UpdateRegP: SU(32) %vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
  LiveReg: %vreg37
  UpdateRegP: SU(32) %vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
  UpdateRegP: SU(28) %vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
  Ready @26c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(32) 491c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 21
  Executed: 27c
  Critical: 21c, 21 MOps
  ExpectedLatency: 20c
  - Latency limited.
BotQ.P: 13 
BotQ.A RemLatency SU(31) 490c
BotQ.A RemLatency SU(13) 14c
  TopQ.A + Remain MOps: 27
  BotQ.A RemainingLatency 490 + 27c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 31 30 
  SU(31) ORDER                              
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
  VS_32: 18 <= 18(+ 0 livethru)
  LiveReg: %vreg44
  UpdateRegP: SU(31) %vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
  UpdateRegP: SU(30) %vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
  LiveReg: %vreg35
  UpdateRegP: SU(31) %vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
  UpdateRegP: SU(30) %vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
  UpdateRegP: SU(29) %vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
  UpdateRegP: SU(26) %vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
  UpdateRegP: SU(24) %vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
  Ready @27c
  HWVALU +1x3255u
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 22
  Executed: 28c
  Critical: 22c, 22 MOps
  ExpectedLatency: 20c
  - Latency limited.
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(30) %vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
  VS_32: 19 > 18(+ 0 livethru)
  Ready @28c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(30) 490c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 23
  Executed: 29c
  Critical: 23c, 23 MOps
  ExpectedLatency: 20c
  - Latency limited.
BotQ.P: 13 29 
Cycle: 32 BotQ.A
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(29) %vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg41
  UpdateRegP: SU(29) %vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
  Ready @32c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(29) 23c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 24
  Executed: 33c
  Critical: 24c, 24 MOps
  ExpectedLatency: 23c
  - Latency limited.
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(28) %vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg109
  UpdateRegP: SU(28) %vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
  UpdateRegP: SU(27) %vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
  LiveReg: %vreg110
  UpdateRegP: SU(28) %vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
  Ready @33c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(28) 24c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 25
  Executed: 34c
  Critical: 25c, 25 MOps
  ExpectedLatency: 24c
  - Latency limited.
BotQ.P: 13 
BotQ.A RemLatency SU(25) 484c
BotQ.A RemLatency SU(13) 14c
  TopQ.A + Remain MOps: 23
  BotQ.A RemainingLatency 484 + 34c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 25 27 
  SU(25) ORDER                              
  SU(27) ORDER                              
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
  VS_32: 19 > 18(+ 0 livethru)
  Ready @34c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(27) 25c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 26
  Executed: 35c
  Critical: 26c, 26 MOps
  ExpectedLatency: 25c
  - Latency limited.
BotQ.P: 13 26 
Pick Bot NOCAND
Scheduling SU(25) %vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
handleMove 528B -> 552B: %vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
     %vreg37:	[528r,640r:0)  0@528r
        -->	[552r,640r:0)  0@552r
     %vreg36:	[512r,528r:0)  0@512r
        -->	[512r,552r:0)  0@512r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg36
  UpdateRegP: SU(25) %vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
  Ready @35c
  HWVALU +1x3255u
  BotQ.A TopLatency SU(25) 484c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 27
  Executed: 36c
  Critical: 27c, 27 MOps
  ExpectedLatency: 25c
  - Latency limited.
BotQ.P: 13 26 24 
Cycle: 38 BotQ.A
BotQ.P: 13 24 
Pick Bot NOCAND
Scheduling SU(26) %vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
  VS_32: 19 > 18(+ 0 livethru)
  Ready @38c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(26) 29c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 28
  Executed: 39c
  Critical: 28c, 28 MOps
  ExpectedLatency: 29c
  - Latency limited.
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(24) %vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
  VS_32: 19 > 18(+ 0 livethru)
  Ready @39c
  HWVALU +1x3255u
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 29
  Executed: 40c
  Critical: 29c, 29 MOps
  ExpectedLatency: 29c
  - Latency limited.
BotQ.P: 13 23 
Cycle: 43 BotQ.A
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(23) %vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg34
  UpdateRegP: SU(23) %vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
  Ready @43c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(23) 33c
  *** Max MOps 1 at cycle 43
Cycle: 44 BotQ.A
BotQ.A @44c
  Retired: 30
  Executed: 44c
  Critical: 30c, 30 MOps
  ExpectedLatency: 33c
  - Latency limited.
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(22) %vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg33
  UpdateRegP: SU(22) %vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
  Ready @44c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(22) 34c
  *** Max MOps 1 at cycle 44
Cycle: 45 BotQ.A
BotQ.A @45c
  Retired: 31
  Executed: 45c
  Critical: 31c, 31 MOps
  ExpectedLatency: 34c
  - Latency limited.
BotQ.P: 13 21 
Cycle: 48 BotQ.A
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(21) %vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg32
  UpdateRegP: SU(21) %vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
  Ready @48c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(21) 38c
  *** Max MOps 1 at cycle 48
Cycle: 49 BotQ.A
BotQ.A @49c
  Retired: 32
  Executed: 49c
  Critical: 32c, 32 MOps
  ExpectedLatency: 38c
  - Latency limited.
BotQ.P: 13 20 
Cycle: 52 BotQ.A
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(20) %vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
  VS_32: 19 > 18(+ 0 livethru)
  Ready @52c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(20) 42c
  *** Max MOps 1 at cycle 52
Cycle: 53 BotQ.A
BotQ.A @53c
  Retired: 33
  Executed: 53c
  Critical: 33c, 33 MOps
  ExpectedLatency: 42c
  - Latency limited.
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(19) %vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg111
  UpdateRegP: SU(19) %vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
  LiveReg: %vreg106
  UpdateRegP: SU(19) %vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
  UpdateRegP: SU(18) %vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
  Ready @53c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(19) 43c
  *** Max MOps 1 at cycle 53
Cycle: 54 BotQ.A
BotQ.A @54c
  Retired: 34
  Executed: 54c
  Critical: 34c, 34 MOps
  ExpectedLatency: 43c
  - Latency limited.
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(18) %vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg25
  UpdateRegP: SU(18) %vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
  UpdateRegP: SU(17) %vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
  Ready @54c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(18) 44c
  *** Max MOps 1 at cycle 54
Cycle: 55 BotQ.A
BotQ.A @55c
  Retired: 35
  Executed: 55c
  Critical: 35c, 35 MOps
  ExpectedLatency: 44c
  - Latency limited.
BotQ.P: 13 
Pick Bot NOCAND
Scheduling SU(17) %vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
  VS_32: 19 > 18(+ 0 livethru)
  Ready @55c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(17) 45c
  *** Max MOps 1 at cycle 55
Cycle: 56 BotQ.A
BotQ.A @56c
  Retired: 36
  Executed: 56c
  Critical: 36c, 36 MOps
  ExpectedLatency: 45c
  - Latency limited.
BotQ.P: 13 16 
Cycle: 475 BotQ.A
BotQ.P: 16 
Pick Bot NOCAND
Scheduling SU(13) %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
handleMove 320B -> 392B: %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
     %vreg19:	[320r,656r:0)  0@320r
        -->	[392r,656r:0)  0@392r
     %vreg94:	[208r,1072r:0)  0@208r
        -->	[208r,1072r:0)  0@208r
     %vreg18 L0004:	[240r,960r:0)  0@240r
        -->	[240r,960r:0)  0@240r
     %vreg18 L0003:	[80r,320r:0)  0@80r
        -->	[80r,392r:0)  0@80r
     %vreg18 L0008:	[224r,960r:0)  0@224r
        -->	[224r,960r:0)  0@224r
     %vreg18:	[80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r
        -->	[80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 19 > 18(+ 0 livethru)
  Ready @475c
  HWVMEM +1x217u
  BotQ.A BotLatency SU(13) 470c
  *** Max MOps 1 at cycle 475
Cycle: 476 BotQ.A
BotQ.A @476c
  Retired: 37
  Executed: 476c
  Critical: 37c, 37 MOps
  ExpectedLatency: 470c
  - Latency limited.
BotQ.P: 16 
Cycle: 505 BotQ.A
Pick Bot NOCAND
Scheduling SU(16) %vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg24
  UpdateRegP: SU(16) %vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
  Ready @505c
  HWVMEM +1x217u
  BotQ.A BotLatency SU(16) 495c
  *** Max MOps 1 at cycle 505
Cycle: 506 BotQ.A
BotQ.A @506c
  Retired: 38
  Executed: 506c
  Critical: 38c, 38 MOps
  ExpectedLatency: 495c
  - Latency limited.
BotQ.A RemLatency SU(10) 13c
  TopQ.A + Remain MOps: 10
  BotQ.A RemainingLatency 13 + 506c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 10 15 
  SU(10) ORDER                              
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(10) %vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
handleMove 208B -> 376B: %vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
     %vreg94:	[208r,1072r:0)  0@208r
        -->	[376r,1072r:0)  0@376r
     %vreg91 L0001:	[144r,208r:0)  0@144r
        -->	[144r,376r:0)  0@144r
     %vreg91 L0002:	[160r,208r:0)  0@160r
        -->	[160r,376r:0)  0@160r
     %vreg91:	[144r,160r:0)[160r,208r:1)  0@144r 1@160r
        -->	[144r,160r:0)[160r,376r:1)  0@144r 1@160r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg91
  UpdateRegP: SU(10) %vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
  UpdateRegP: SU(9) %vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
  Ready @506c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(10) 496c
  *** Max MOps 1 at cycle 506
Cycle: 507 BotQ.A
BotQ.A @507c
  Retired: 39
  Executed: 507c
  Critical: 39c, 39 MOps
  ExpectedLatency: 496c
  - Latency limited.
BotQ.A RemLatency SU(9) 12c
  TopQ.A + Remain MOps: 9
  BotQ.A RemainingLatency 12 + 507c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 15 9 
  SU(15) ORDER                              
  SU(9) BOT-PATH                  12 cycles 
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(9) %vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
handleMove 160B -> 372B: %vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
     %vreg91 L0002:	[160r,376r:0)  0@160r
        -->	[372r,376r:0)  0@372r
     %vreg91:	[144r,160r:0)[160r,376r:1)  0@144r 1@160r
        -->	[144r,372r:0)[372r,376r:1)  0@144r 1@372r
     %vreg91 L0001:	[144r,376r:0)  0@144r
        -->	[144r,376r:0)  0@144r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg91
  UpdateRegP: SU(10) %vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
  UpdateRegP: SU(9) %vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
  Ready @507c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(9) 497c
  *** Max MOps 1 at cycle 507
Cycle: 508 BotQ.A
BotQ.A @508c
  Retired: 40
  Executed: 508c
  Critical: 40c, 40 MOps
  ExpectedLatency: 497c
  - Latency limited.
BotQ.A RemLatency SU(8) 11c
  TopQ.A + Remain MOps: 8
  BotQ.A RemainingLatency 11 + 508c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 15 8 
  SU(15) ORDER                              
  SU(8) BOT-PATH                  11 cycles 
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(8) %vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2

*** Renumbered SlotIndexes 368-424 ***
handleMove 144B -> 376B: %vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
     %vreg91 L0001:	[144r,392r:0)  0@144r
        -->	[376r,392r:0)  0@376r
     %vreg91:	[144r,384r:0)[384r,392r:1)  0@144r 1@384r
        -->	[376r,384r:0)[384r,392r:1)  0@376r 1@384r
     %vreg8:	[128r,144r:0)  0@128r
        -->	[128r,376r:0)  0@128r
     %vreg2:	[32r,144r:0)  0@32r
        -->	[32r,376r:0)  0@32r
     VCC_LO:	[144r,144d:9)[424r,424d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@424r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@144r
        -->	[376r,376d:9)[424r,424d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@424r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@376r
     VCC_HI:	[144r,144d:9)[424r,424d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@424r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@144r
        -->	[376r,376d:9)[424r,424d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@424r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@376r
     EXEC_LO:	EMPTY
        -->	EMPTY
     EXEC_HI:	EMPTY
        -->	EMPTY
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg8
  UpdateRegP: SU(8) %vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
  LiveReg: %vreg2
  UpdateRegP: SU(8) %vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
  Ready @508c
  HWVALU +1x3255u
  BotQ.A BotLatency SU(8) 498c
  *** Max MOps 1 at cycle 508
Cycle: 509 BotQ.A
BotQ.A @509c
  Retired: 41
  Executed: 509c
  Critical: 41c, 41 MOps
  ExpectedLatency: 498c
  - Latency limited.
BotQ.A RemLatency SU(7) 10c
  TopQ.A + Remain MOps: 7
  BotQ.A RemainingLatency 10 + 509c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 15 7 1 
  SU(15) ORDER                              
  SU(7) BOT-PATH                  10 cycles 
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(7) %vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
handleMove 128B -> 372B: %vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
     %vreg8:	[128r,376r:0)  0@128r
        -->	[372r,376r:0)  0@372r
     %vreg4:	[64r,128r:0)  0@64r
        -->	[64r,372r:0)  0@64r
     %vreg3:	[16r,128r:0)  0@16r
        -->	[16r,372r:0)  0@16r
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg4
  UpdateRegP: SU(7) %vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
  LiveReg: %vreg3
  UpdateRegP: SU(7) %vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
  Ready @509c
  HWSALU +1x3255u
  BotQ.A BotLatency SU(7) 499c
  *** Max MOps 1 at cycle 509
Cycle: 510 BotQ.A
BotQ.A @510c
  Retired: 42
  Executed: 510c
  Critical: 42c, 42 MOps
  ExpectedLatency: 499c
  - Latency limited.
BotQ.P: 3 
BotQ.A RemLatency SU(15) 3c
  TopQ.A + Remain MOps: 6
  BotQ.A RemainingLatency 9 + 510c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 15 1 0 
  SU(15) ORDER                              
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(15) %vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg24
  UpdateRegP: SU(16) %vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
  Ready @510c
BotQ.A @510c
  Retired: 42
  Executed: 510c
  Critical: 42c, 42 MOps
  ExpectedLatency: 499c
  - Latency limited.
BotQ.A RemLatency SU(12) 2c
  TopQ.A + Remain MOps: 6
  BotQ.A RemainingLatency 9 + 510c > CritPath 509
TopQ.A RemLatency SU(2) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 0 1 
  SU(0) ORDER                              
  SU(1) REG-MAX                            
TopQ.A: 0 1 2 
  SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(1) %vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
handleMove 32B -> 248B: %vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
     %vreg2:	[32r,376r:0)  0@32r
        -->	[248r,376r:0)  0@248r
     VGPR0:	[0B,32r:0)  0@0B-phi
        -->	[0B,248r:0)  0@0B-phi
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: VGPR0
  Ready @510c
BotQ.A @510c
  Retired: 42
  Executed: 510c
  Critical: 42c, 42 MOps
  ExpectedLatency: 499c
  - Latency limited.
Pick Bot NOCAND
Scheduling SU(0) %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
handleMove 16B -> 244B: %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
     %vreg3:	[16r,372r:0)  0@16r
        -->	[244r,372r:0)  0@244r
     SGPR4:	[0B,16r:0)  0@0B-phi
        -->	[0B,244r:0)  0@0B-phi
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: SGPR4
  Ready @510c
BotQ.A @510c
  Retired: 42
  Executed: 510c
  Critical: 42c, 42 MOps
  ExpectedLatency: 499c
  - Latency limited.
Cycle: 511 BotQ.A
BotQ.P: 3 
Pick Bot NOCAND
Scheduling SU(12) %vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg18
  UpdateRegP: SU(51) %vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
  UpdateRegP: SU(15) %vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
  UpdateRegP: SU(13) %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
  Ready @511c
  HWSALU +1x3255u
  *** Max MOps 1 at cycle 511
Cycle: 512 BotQ.A
BotQ.A @512c
  Retired: 43
  Executed: 512c
  Critical: 43c, 43 MOps
  ExpectedLatency: 499c
  - Latency limited.
BotQ.P: 3 
Pick Bot NOCAND
Scheduling SU(11) %vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg18
  UpdateRegP: SU(51) %vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
  UpdateRegP: SU(15) %vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
  UpdateRegP: SU(13) %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
  Ready @512c
  HWSALU +1x3255u
  *** Max MOps 1 at cycle 512
Cycle: 513 BotQ.A
BotQ.A @513c
  Retired: 44
  Executed: 513c
  Critical: 44c, 44 MOps
  ExpectedLatency: 499c
  - Latency limited.
BotQ.P: 3 
Pick Top NOCAND
Scheduling SU(2) %vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
  Ready @0c
  TopQ.A BotLatency SU(2) 509c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
  TopQ.A + Remain MOps: 4
  BotQ.A RemainingLatency 6 + 513c > CritPath 509
TopQ.A RemLatency SU(3) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 4 5 6 
  SU(4) ORDER                              
  SU(5) ORDER                              
  SU(6) WEAK                               
TopQ.A: 6 5 4 3 
  SU(6) ORDER                              
  SU(5) ORDER                              
  SU(4) ORDER                              
  SU(3) WEAK                               
Pick Bot WEAK      
Scheduling SU(6) %vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
  VS_32: 19 > 18(+ 0 livethru)
  LiveReg: %vreg0
  UpdateRegP: SU(6) %vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
  UpdateRegP: SU(5) %vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
  UpdateRegP: SU(4) %vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
  UpdateRegP: SU(3) %vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
  Ready @513c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 513
Cycle: 514 BotQ.A
BotQ.A @514c
  Retired: 45
  Executed: 514c
  Critical: 45c, 45 MOps
  ExpectedLatency: 499c
  - Latency limited.
BotQ.P: 3 
  TopQ.A + Remain MOps: 3
  BotQ.A RemainingLatency 5 + 514c > CritPath 509
TopQ.A RemLatency SU(3) 509c
  BotQ.A + Remain MOps: 48
BotQ.A: 4 5 
  SU(4) ORDER                              
  SU(5) CLUSTER                            
TopQ.A: 3 5 4 
  SU(3) ORDER                              
Pick Bot CLUSTER   
Scheduling SU(5) %vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
  VS_32: 19 > 18(+ 0 livethru)
  Ready @514c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 514
Cycle: 515 BotQ.A
BotQ.A @515c
  Retired: 46
  Executed: 515c
  Critical: 46c, 46 MOps
  ExpectedLatency: 499c
  - Latency limited.
BotQ.P: 3 
Pick Bot NOCAND
Scheduling SU(4) %vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
  VS_32: 19 > 18(+ 0 livethru)
  Ready @515c
  HWLGKM +1x105u
  *** Max MOps 1 at cycle 515
Cycle: 516 BotQ.A
BotQ.A @516c
  Retired: 47
  Executed: 516c
  Critical: 47c, 47 MOps
  ExpectedLatency: 499c
  - Latency limited.
BotQ.P: 3 
Cycle: 519 BotQ.A
Pick Bot NOCAND
Scheduling SU(3) %vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
  VS_32: 19 > 18(+ 0 livethru)
  Ready @519c
  HWLGKM +1x105u
  BotQ.A BotLatency SU(3) 509c
  *** Max MOps 1 at cycle 519
Cycle: 520 BotQ.A
BotQ.A @520c
  Retired: 48
  Executed: 520c
  Critical: 48c, 48 MOps
  ExpectedLatency: 509c
  - Latency limited.
*** Final schedule for BB#0 ***
SU(2):   %vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
SU(3):   %vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
SU(4):   %vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
SU(5):   %vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
SU(6):   %vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
SU(11):   %vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
SU(12):   %vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
SU(0):   %vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
SU(1):   %vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
SU(15):   %vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
SU(7):   %vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
SU(8):   %vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
SU(9):   %vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
SU(10):   %vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
SU(16):   %vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
SU(13):   %vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
SU(17):   %vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
SU(18):   %vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
SU(19):   %vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
SU(20):   %vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
SU(21):   %vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
SU(22):   %vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
SU(23):   %vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
SU(24):   %vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
SU(26):   %vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
SU(25):   %vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
SU(27):   %vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
SU(28):   %vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
SU(29):   %vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
SU(30):   %vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
SU(31):   %vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
SU(32):   %vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
SU(14):   %vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
SU(33):   %vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
SU(34):   %vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
SU(35):   %vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
SU(36):   %vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
SU(51):   %vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
SU(37):   %vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
SU(39):   %vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
SU(38):   %vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
SU(40):   %vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
SU(44):   %vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
SU(41):   %vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
SU(42):   %vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
SU(43):   %vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
SU(45):   %vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
SU(46):   %vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
SU(47):   %vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
SU(48):   %vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
SU(49):   %vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
SU(50):   %vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
SU(52):   BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86

********** INTERVALS **********
EXEC_LO EMPTY
EXEC_HI EMPTY
VCC_LO [376r,376d:9)[424r,424d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@424r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@376r
VCC_HI [376r,376d:9)[424r,424d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@424r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@376r
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,244r:0)  0@0B-phi
VGPR0 [0B,248r:0)  0@0B-phi
%vreg0 [48r,112r:0)  0@48r
%vreg2 [248r,376r:0)  0@248r
%vreg3 [244r,372r:0)  0@244r
%vreg4 [64r,372r:0)  0@64r
%vreg8 [372r,376r:0)  0@372r
%vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,408r:0)  0@80r L0008 [224r,960r:0)  0@224r
%vreg19 [408r,656r:0)  0@408r
%vreg24 [96r,368r:0)[368r,400r:1)  0@96r 1@368r L0003 [96r,400r:0)  0@96r L000C [368r,400r:0)  0@368r
%vreg25 [400r,424r:0)  0@400r
%vreg32 [448r,464r:0)  0@448r
%vreg33 [464r,480r:0)  0@464r
%vreg34 [480r,496r:0)  0@480r
%vreg35 [496r,624r:0)  0@496r
%vreg36 [512r,552r:0)  0@512r
%vreg37 [552r,640r:0)  0@552r
%vreg41 [576r,592r:0)  0@576r
%vreg44 [592r,624r:0)  0@592r
%vreg51 [640r,688r:0)  0@640r
%vreg57 [688r,704r:0)  0@688r
%vreg60 [964r,976r:0)  0@964r
%vreg63 [976r,1040r:0)  0@976r
%vreg66 [984r,1000r:0)  0@984r
%vreg68 [1000r,1008r:0)  0@1000r
%vreg73 [1016r,1024r:0)  0@1016r
%vreg76 [1024r,1048r:0)  0@1024r
%vreg80 [1040r,1048r:0)  0@1040r
%vreg81 [1048r,1056r:0)  0@1048r
%vreg86 [112r,960r:0)[960r,1072r:1)  0@112r 1@960r L0003 [112r,1072r:0)  0@112r L000C [960r,1072r:0)  0@960r
%vreg91 [376r,384r:0)[384r,392r:1)  0@376r 1@384r L0001 [376r,392r:0)  0@376r L0002 [384r,392r:0)  0@384r
%vreg94 [392r,1072r:0)  0@392r
%vreg97 [648r,1064r:0)  0@648r
%vreg98 [1064r,1072r:0)  0@1064r
%vreg99 [1056r,1064r:0)  0@1056r
%vreg100 [672r,968r:0)  0@672r
%vreg101 [968r,1032r:0)  0@968r
%vreg102 [1032r,1048r:0)  0@1032r
%vreg103 [992r,1024r:0)  0@992r
%vreg104 [656r,672r:0)  0@656r
%vreg106 [416r,432r:0)  0@416r
%vreg107 [432r,1032r:0)  0@432r
%vreg108 [704r,968r:0)  0@704r
%vreg109 [544r,576r:0)  0@544r
%vreg110 [560r,576r:0)  0@560r
%vreg111 [424r,432r:0)  0@424r
%vreg115 [608r,640r:0)  0@608r
%vreg118 [624r,640r:0)  0@624r
%vreg123 [1008r,1016r:0)  0@1008r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
244B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
248B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
372B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
376B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
384B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
392B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
400B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
408B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
416B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
424B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
552B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
648B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
964B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
968B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
976B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
984B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
992B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1000B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1008B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1016B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1024B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1032B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1040B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1048B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1056B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1064B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1072B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1080B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
244B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
248B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
372B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
376B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
384B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
392B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
400B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
408B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
416B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
424B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
552B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
648B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
964B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
968B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
976B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
984B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
992B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1000B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1008B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1016B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1024B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1032B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1040B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1048B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1056B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1064B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1072B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1080B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After SI Fix CF Live Intervals ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
244B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
248B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
372B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
376B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
384B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
392B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
400B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
408B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
416B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
424B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
552B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
648B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
964B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
968B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
976B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
984B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
992B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1000B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1008B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1016B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1024B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1032B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1040B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1048B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1056B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1064B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1072B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1080B		S_ENDPGM

# End machine code for function remainder_intint.


block-frequency: remainder_intint
=================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: remainder_intint
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
244B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
248B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
372B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
376B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
384B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
392B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
400B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
408B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
416B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
424B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
552B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
648B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
964B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
968B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
976B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
984B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
992B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1000B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1008B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1016B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1024B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1032B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1040B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1048B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1056B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1064B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1072B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1080B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
244B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
248B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
372B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
376B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
384B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
392B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
400B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
408B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
416B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
424B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
552B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
648B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
964B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
968B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
976B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
984B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
992B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1000B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1008B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1016B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1024B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1032B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1040B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1048B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1056B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1064B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1072B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1080B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
244B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
248B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
372B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
376B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
384B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
392B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
400B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
408B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
416B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
424B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
552B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
648B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
964B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
968B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
976B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
984B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
992B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1000B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1008B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1016B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1024B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1032B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1040B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1048B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1056B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1064B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1072B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1080B		S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
244B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
248B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
372B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
376B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
384B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
392B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
400B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
408B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
416B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
424B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
552B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
648B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
964B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
968B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
976B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
984B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
992B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1000B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1008B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1016B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1024B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1032B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1040B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1048B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1056B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1064B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1072B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1080B		S_ENDPGM

# End machine code for function remainder_intint.

********** GREEDY REGISTER ALLOCATION **********
********** Function: remainder_intint
********** Compute Spill Weights **********
********** Function: remainder_intint
********** INTERVALS **********
EXEC_LO EMPTY
EXEC_HI EMPTY
VCC_LO [376r,376d:9)[424r,424d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@424r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@376r
VCC_HI [376r,376d:9)[424r,424d:2)[560r,560d:3)[608r,608d:1)[624r,624d:0)[656r,656d:4)[968r,968d:7)[992r,992d:5)[1032r,1032d:6)[1064r,1064d:8)  0@624r 1@608r 2@424r 3@560r 4@656r 5@992r 6@1032r 7@968r 8@1064r 9@376r
SGPR0 [0B,48r:0)  0@0B-phi
SGPR1 [0B,48r:0)  0@0B-phi
SGPR4 [0B,244r:0)  0@0B-phi
VGPR0 [0B,248r:0)  0@0B-phi
%vreg0 [48r,112r:0)  0@48r
%vreg2 [248r,376r:0)  0@248r
%vreg3 [244r,372r:0)  0@244r
%vreg4 [64r,372r:0)  0@64r
%vreg8 [372r,376r:0)  0@372r
%vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,408r:0)  0@80r L0008 [224r,960r:0)  0@224r
%vreg19 [408r,656r:0)  0@408r
%vreg24 [96r,368r:0)[368r,400r:1)  0@96r 1@368r L0003 [96r,400r:0)  0@96r L000C [368r,400r:0)  0@368r
%vreg25 [400r,424r:0)  0@400r
%vreg32 [448r,464r:0)  0@448r
%vreg33 [464r,480r:0)  0@464r
%vreg34 [480r,496r:0)  0@480r
%vreg35 [496r,624r:0)  0@496r
%vreg36 [512r,552r:0)  0@512r
%vreg37 [552r,640r:0)  0@552r
%vreg41 [576r,592r:0)  0@576r
%vreg44 [592r,624r:0)  0@592r
%vreg51 [640r,688r:0)  0@640r
%vreg57 [688r,704r:0)  0@688r
%vreg60 [964r,976r:0)  0@964r
%vreg63 [976r,1040r:0)  0@976r
%vreg66 [984r,1000r:0)  0@984r
%vreg68 [1000r,1008r:0)  0@1000r
%vreg73 [1016r,1024r:0)  0@1016r
%vreg76 [1024r,1048r:0)  0@1024r
%vreg80 [1040r,1048r:0)  0@1040r
%vreg81 [1048r,1056r:0)  0@1048r
%vreg86 [112r,960r:0)[960r,1072r:1)  0@112r 1@960r L0003 [112r,1072r:0)  0@112r L000C [960r,1072r:0)  0@960r
%vreg91 [376r,384r:0)[384r,392r:1)  0@376r 1@384r L0001 [376r,392r:0)  0@376r L0002 [384r,392r:0)  0@384r
%vreg94 [392r,1072r:0)  0@392r
%vreg97 [648r,1064r:0)  0@648r
%vreg98 [1064r,1072r:0)  0@1064r
%vreg99 [1056r,1064r:0)  0@1056r
%vreg100 [672r,968r:0)  0@672r
%vreg101 [968r,1032r:0)  0@968r
%vreg102 [1032r,1048r:0)  0@1032r
%vreg103 [992r,1024r:0)  0@992r
%vreg104 [656r,672r:0)  0@656r
%vreg106 [416r,432r:0)  0@416r
%vreg107 [432r,1032r:0)  0@432r
%vreg108 [704r,968r:0)  0@704r
%vreg109 [544r,576r:0)  0@544r
%vreg110 [560r,576r:0)  0@560r
%vreg111 [424r,432r:0)  0@424r
%vreg115 [608r,640r:0)  0@608r
%vreg118 [624r,640r:0)  0@624r
%vreg123 [1008r,1016r:0)  0@1008r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1 in %vreg0, %VGPR0 in %vreg2, %SGPR4 in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR0_SGPR1 %VGPR0 %SGPR4
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
244B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
248B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
372B		%vreg8<def> = S_MUL_I32 %vreg4, %vreg3; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
376B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8, %vreg2, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
384B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
392B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
400B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
408B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
416B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
424B		%vreg111<def> = V_ADD_I32_e32 %vreg25, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111, %vreg106, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
552B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109, %vreg110, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118, %vreg115, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
648B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
964B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
968B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108, %vreg100, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
976B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
984B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
992B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1000B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1008B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1016B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1024B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103, %vreg101, %vreg73, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1032B		%vreg102<def> = V_ADD_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1040B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1048B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76, %vreg102, %vreg80, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1056B		%vreg99<def> = V_XOR_B32_e32 %vreg81, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1064B		%vreg98<def> = V_SUB_I32_e32 %vreg99, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1072B		BUFFER_STORE_DWORD_ADDR64 %vreg98, %vreg94, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1080B		S_ENDPGM

# End machine code for function remainder_intint.


selectOrSplit SReg_64:%vreg0 [48r,112r:0)  0@48r w=1.088362e-02
AllocationOrder(SReg_64) = [ %SGPR0_SGPR1 %SGPR2_SGPR3 %SGPR4_SGPR5 %SGPR6_SGPR7 %SGPR8_SGPR9 %SGPR10_SGPR11 %SGPR12_SGPR13 %SGPR14_SGPR15 %SGPR16_SGPR17 %SGPR18_SGPR19 %SGPR20_SGPR21 %SGPR22_SGPR23 %SGPR24_SGPR25 %SGPR26_SGPR27 %SGPR28_SGPR29 %SGPR30_SGPR31 %SGPR32_SGPR33 %SGPR34_SGPR35 %SGPR36_SGPR37 %SGPR38_SGPR39 %SGPR40_SGPR41 %SGPR42_SGPR43 %SGPR44_SGPR45 %SGPR46_SGPR47 %SGPR48_SGPR49 %SGPR50_SGPR51 %SGPR52_SGPR53 %SGPR54_SGPR55 %SGPR56_SGPR57 %SGPR58_SGPR59 %SGPR60_SGPR61 %SGPR62_SGPR63 %SGPR64_SGPR65 %SGPR66_SGPR67 %SGPR68_SGPR69 %SGPR70_SGPR71 %SGPR72_SGPR73 %SGPR74_SGPR75 %SGPR76_SGPR77 %SGPR78_SGPR79 %SGPR80_SGPR81 %SGPR82_SGPR83 %SGPR84_SGPR85 %SGPR86_SGPR87 %SGPR88_SGPR89 %SGPR90_SGPR91 %SGPR92_SGPR93 %SGPR94_SGPR95 %SGPR96_SGPR97 %SGPR98_SGPR99 %SGPR100_SGPR101 %VCC ]
hints: %SGPR0_SGPR1
assigning %vreg0 to %SGPR0_SGPR1: SGPR0 [48r,112r:0)  0@48r SGPR1 [48r,112r:0)  0@48r

selectOrSplit SReg_32:%vreg3 [244r,372r:0)  0@244r w=3.825758e-03
AllocationOrder(SReg_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 %M0 %VCC_LO %VCC_HI ]
hints: %SGPR4
assigning %vreg3 to %SGPR4: SGPR4 [244r,372r:0)  0@244r

selectOrSplit VGPR_32:%vreg2 [248r,376r:0)  0@248r w=3.825758e-03
AllocationOrder(VGPR_32) = [ %VGPR0 %VGPR1 %VGPR2 %VGPR3 %VGPR4 %VGPR5 %VGPR6 %VGPR7 %VGPR8 %VGPR9 %VGPR10 %VGPR11 %VGPR12 %VGPR13 %VGPR14 %VGPR15 %VGPR16 %VGPR17 %VGPR18 %VGPR19 %VGPR20 %VGPR21 %VGPR22 %VGPR23 %VGPR24 %VGPR25 %VGPR26 %VGPR27 %VGPR28 %VGPR29 %VGPR30 %VGPR31 %VGPR32 %VGPR33 %VGPR34 %VGPR35 %VGPR36 %VGPR37 %VGPR38 %VGPR39 %VGPR40 %VGPR41 %VGPR42 %VGPR43 %VGPR44 %VGPR45 %VGPR46 %VGPR47 %VGPR48 %VGPR49 %VGPR50 %VGPR51 %VGPR52 %VGPR53 %VGPR54 %VGPR55 %VGPR56 %VGPR57 %VGPR58 %VGPR59 %VGPR60 %VGPR61 %VGPR62 %VGPR63 %VGPR64 %VGPR65 %VGPR66 %VGPR67 %VGPR68 %VGPR69 %VGPR70 %VGPR71 %VGPR72 %VGPR73 %VGPR74 %VGPR75 %VGPR76 %VGPR77 %VGPR78 %VGPR79 %VGPR80 %VGPR81 %VGPR82 %VGPR83 %VGPR84 %VGPR85 %VGPR86 %VGPR87 %VGPR88 %VGPR89 %VGPR90 %VGPR91 %VGPR92 %VGPR93 %VGPR94 %VGPR95 %VGPR96 %VGPR97 %VGPR98 %VGPR99 %VGPR100 %VGPR101 %VGPR102 %VGPR103 %VGPR104 %VGPR105 %VGPR106 %VGPR107 %VGPR108 %VGPR109 %VGPR110 %VGPR111 %VGPR112 %VGPR113 %VGPR114 %VGPR115 %VGPR116 %VGPR117 %VGPR118 %VGPR119 %VGPR120 %VGPR121 %VGPR122 %VGPR123 %VGPR124 %VGPR125 %VGPR126 %VGPR127 %VGPR128 %VGPR129 %VGPR130 %VGPR131 %VGPR132 %VGPR133 %VGPR134 %VGPR135 %VGPR136 %VGPR137 %VGPR138 %VGPR139 %VGPR140 %VGPR141 %VGPR142 %VGPR143 %VGPR144 %VGPR145 %VGPR146 %VGPR147 %VGPR148 %VGPR149 %VGPR150 %VGPR151 %VGPR152 %VGPR153 %VGPR154 %VGPR155 %VGPR156 %VGPR157 %VGPR158 %VGPR159 %VGPR160 %VGPR161 %VGPR162 %VGPR163 %VGPR164 %VGPR165 %VGPR166 %VGPR167 %VGPR168 %VGPR169 %VGPR170 %VGPR171 %VGPR172 %VGPR173 %VGPR174 %VGPR175 %VGPR176 %VGPR177 %VGPR178 %VGPR179 %VGPR180 %VGPR181 %VGPR182 %VGPR183 %VGPR184 %VGPR185 %VGPR186 %VGPR187 %VGPR188 %VGPR189 %VGPR190 %VGPR191 %VGPR192 %VGPR193 %VGPR194 %VGPR195 %VGPR196 %VGPR197 %VGPR198 %VGPR199 %VGPR200 %VGPR201 %VGPR202 %VGPR203 %VGPR204 %VGPR205 %VGPR206 %VGPR207 %VGPR208 %VGPR209 %VGPR210 %VGPR211 %VGPR212 %VGPR213 %VGPR214 %VGPR215 %VGPR216 %VGPR217 %VGPR218 %VGPR219 %VGPR220 %VGPR221 %VGPR222 %VGPR223 %VGPR224 %VGPR225 %VGPR226 %VGPR227 %VGPR228 %VGPR229 %VGPR230 %VGPR231 %VGPR232 %VGPR233 %VGPR234 %VGPR235 %VGPR236 %VGPR237 %VGPR238 %VGPR239 %VGPR240 %VGPR241 %VGPR242 %VGPR243 %VGPR244 %VGPR245 %VGPR246 %VGPR247 %VGPR248 %VGPR249 %VGPR250 %VGPR251 %VGPR252 %VGPR253 ]
hints: %VGPR0
assigning %vreg2 to %VGPR0: VGPR0 [248r,376r:0)  0@248r

selectOrSplit SReg_64:%vreg37 [552r,640r:0)  0@552r w=6.147541e-03
hints: %VCC
missed hint %VCC
assigning %vreg37 to %SGPR0_SGPR1: SGPR0 [552r,640r:0)  0@552r SGPR1 [552r,640r:0)  0@552r

selectOrSplit SReg_64:%vreg60 [964r,976r:0)  0@964r w=4.854369e-03
hints: %VCC
missed hint %VCC
assigning %vreg60 to %SGPR0_SGPR1: SGPR0 [964r,976r:0)  0@964r SGPR1 [964r,976r:0)  0@964r

selectOrSplit SReg_64:%vreg66 [984r,1000r:0)  0@984r w=4.807692e-03
hints: %VCC
missed hint %VCC
assigning %vreg66 to %SGPR0_SGPR1: SGPR0 [984r,1000r:0)  0@984r SGPR1 [984r,1000r:0)  0@984r

selectOrSplit SReg_64:%vreg73 [1016r,1024r:0)  0@1016r w=inf
hints: %VCC
assigning %vreg73 to %VCC: VCC_LO [1016r,1024r:0)  0@1016r VCC_HI [1016r,1024r:0)  0@1016r

selectOrSplit SReg_64:%vreg80 [1040r,1048r:0)  0@1040r w=inf
hints: %VCC
assigning %vreg80 to %VCC: VCC_LO [1040r,1048r:0)  0@1040r VCC_HI [1040r,1048r:0)  0@1040r

selectOrSplit SReg_128:%vreg86 [112r,960r:0)[960r,1072r:1)  0@112r 1@960r L0003 [112r,1072r:0)  0@112r L000C [960r,1072r:0)  0@960r w=2.970588e-03
AllocationOrder(SReg_128) = [ %SGPR0_SGPR1_SGPR2_SGPR3 %SGPR4_SGPR5_SGPR6_SGPR7 %SGPR8_SGPR9_SGPR10_SGPR11 %SGPR12_SGPR13_SGPR14_SGPR15 %SGPR16_SGPR17_SGPR18_SGPR19 %SGPR20_SGPR21_SGPR22_SGPR23 %SGPR24_SGPR25_SGPR26_SGPR27 %SGPR28_SGPR29_SGPR30_SGPR31 %SGPR32_SGPR33_SGPR34_SGPR35 %SGPR36_SGPR37_SGPR38_SGPR39 %SGPR40_SGPR41_SGPR42_SGPR43 %SGPR44_SGPR45_SGPR46_SGPR47 %SGPR48_SGPR49_SGPR50_SGPR51 %SGPR52_SGPR53_SGPR54_SGPR55 %SGPR56_SGPR57_SGPR58_SGPR59 %SGPR60_SGPR61_SGPR62_SGPR63 %SGPR64_SGPR65_SGPR66_SGPR67 %SGPR68_SGPR69_SGPR70_SGPR71 %SGPR72_SGPR73_SGPR74_SGPR75 %SGPR76_SGPR77_SGPR78_SGPR79 %SGPR80_SGPR81_SGPR82_SGPR83 %SGPR84_SGPR85_SGPR86_SGPR87 %SGPR88_SGPR89_SGPR90_SGPR91 %SGPR92_SGPR93_SGPR94_SGPR95 %SGPR96_SGPR97_SGPR98_SGPR99 ]
assigning %vreg86 to %SGPR8_SGPR9_SGPR10_SGPR11: SGPR8 [112r,1072r:0)  0@112r SGPR9 [112r,1072r:0)  0@112r SGPR10 [960r,1072r:0)  0@960r SGPR11 [960r,1072r:0)  0@960r

selectOrSplit SReg_128:%vreg18 [80r,224r:0)[224r,240r:1)[240r,960r:2)  0@80r 1@224r 2@240r L0004 [240r,960r:0)  0@240r L0003 [80r,408r:0)  0@80r L0008 [224r,960r:0)  0@224r w=6.312500e-03
assigning %vreg18 to %SGPR12_SGPR13_SGPR14_SGPR15: SGPR12 [80r,408r:0)  0@80r SGPR13 [80r,408r:0)  0@80r SGPR14 [240r,960r:0)  0@240r SGPR15 [224r,960r:0)  0@224r

selectOrSplit SGPR_32:%vreg4 [64r,372r:0)  0@64r w=2.824859e-03
AllocationOrder(SGPR_32) = [ %SGPR0 %SGPR1 %SGPR2 %SGPR3 %SGPR4 %SGPR5 %SGPR6 %SGPR7 %SGPR8 %SGPR9 %SGPR10 %SGPR11 %SGPR12 %SGPR13 %SGPR14 %SGPR15 %SGPR16 %SGPR17 %SGPR18 %SGPR19 %SGPR20 %SGPR21 %SGPR22 %SGPR23 %SGPR24 %SGPR25 %SGPR26 %SGPR27 %SGPR28 %SGPR29 %SGPR30 %SGPR31 %SGPR32 %SGPR33 %SGPR34 %SGPR35 %SGPR36 %SGPR37 %SGPR38 %SGPR39 %SGPR40 %SGPR41 %SGPR42 %SGPR43 %SGPR44 %SGPR45 %SGPR46 %SGPR47 %SGPR48 %SGPR49 %SGPR50 %SGPR51 %SGPR52 %SGPR53 %SGPR54 %SGPR55 %SGPR56 %SGPR57 %SGPR58 %SGPR59 %SGPR60 %SGPR61 %SGPR62 %SGPR63 %SGPR64 %SGPR65 %SGPR66 %SGPR67 %SGPR68 %SGPR69 %SGPR70 %SGPR71 %SGPR72 %SGPR73 %SGPR74 %SGPR75 %SGPR76 %SGPR77 %SGPR78 %SGPR79 %SGPR80 %SGPR81 %SGPR82 %SGPR83 %SGPR84 %SGPR85 %SGPR86 %SGPR87 %SGPR88 %SGPR89 %SGPR90 %SGPR91 %SGPR92 %SGPR93 %SGPR94 %SGPR95 %SGPR96 %SGPR97 %SGPR98 %SGPR99 %SGPR100 %SGPR101 ]
assigning %vreg4 to %SGPR2: SGPR2 [64r,372r:0)  0@64r

selectOrSplit SReg_128:%vreg24 [96r,368r:0)[368r,400r:1)  0@96r 1@368r L0003 [96r,400r:0)  0@96r L000C [368r,400r:0)  0@368r w=5.738636e-03
hints: %SGPR12_SGPR13_SGPR14_SGPR15
assigning %vreg24 to %SGPR16_SGPR17_SGPR18_SGPR19: SGPR16 [96r,400r:0)  0@96r SGPR17 [96r,400r:0)  0@96r SGPR18 [368r,400r:0)  0@368r SGPR19 [368r,400r:0)  0@368r

selectOrSplit SReg_32:%vreg8 [372r,376r:0)  0@372r w=inf
assigning %vreg8 to %SGPR0: SGPR0 [372r,376r:0)  0@372r

selectOrSplit VReg_64:%vreg91 [376r,384r:0)[384r,392r:1)  0@376r 1@384r L0001 [376r,392r:0)  0@376r L0002 [384r,392r:0)  0@384r w=inf
AllocationOrder(VReg_64) = [ %VGPR0_VGPR1 %VGPR1_VGPR2 %VGPR2_VGPR3 %VGPR3_VGPR4 %VGPR4_VGPR5 %VGPR5_VGPR6 %VGPR6_VGPR7 %VGPR7_VGPR8 %VGPR8_VGPR9 %VGPR9_VGPR10 %VGPR10_VGPR11 %VGPR11_VGPR12 %VGPR12_VGPR13 %VGPR13_VGPR14 %VGPR14_VGPR15 %VGPR15_VGPR16 %VGPR16_VGPR17 %VGPR17_VGPR18 %VGPR18_VGPR19 %VGPR19_VGPR20 %VGPR20_VGPR21 %VGPR21_VGPR22 %VGPR22_VGPR23 %VGPR23_VGPR24 %VGPR24_VGPR25 %VGPR25_VGPR26 %VGPR26_VGPR27 %VGPR27_VGPR28 %VGPR28_VGPR29 %VGPR29_VGPR30 %VGPR30_VGPR31 %VGPR31_VGPR32 %VGPR32_VGPR33 %VGPR33_VGPR34 %VGPR34_VGPR35 %VGPR35_VGPR36 %VGPR36_VGPR37 %VGPR37_VGPR38 %VGPR38_VGPR39 %VGPR39_VGPR40 %VGPR40_VGPR41 %VGPR41_VGPR42 %VGPR42_VGPR43 %VGPR43_VGPR44 %VGPR44_VGPR45 %VGPR45_VGPR46 %VGPR46_VGPR47 %VGPR47_VGPR48 %VGPR48_VGPR49 %VGPR49_VGPR50 %VGPR50_VGPR51 %VGPR51_VGPR52 %VGPR52_VGPR53 %VGPR53_VGPR54 %VGPR54_VGPR55 %VGPR55_VGPR56 %VGPR56_VGPR57 %VGPR57_VGPR58 %VGPR58_VGPR59 %VGPR59_VGPR60 %VGPR60_VGPR61 %VGPR61_VGPR62 %VGPR62_VGPR63 %VGPR63_VGPR64 %VGPR64_VGPR65 %VGPR65_VGPR66 %VGPR66_VGPR67 %VGPR67_VGPR68 %VGPR68_VGPR69 %VGPR69_VGPR70 %VGPR70_VGPR71 %VGPR71_VGPR72 %VGPR72_VGPR73 %VGPR73_VGPR74 %VGPR74_VGPR75 %VGPR75_VGPR76 %VGPR76_VGPR77 %VGPR77_VGPR78 %VGPR78_VGPR79 %VGPR79_VGPR80 %VGPR80_VGPR81 %VGPR81_VGPR82 %VGPR82_VGPR83 %VGPR83_VGPR84 %VGPR84_VGPR85 %VGPR85_VGPR86 %VGPR86_VGPR87 %VGPR87_VGPR88 %VGPR88_VGPR89 %VGPR89_VGPR90 %VGPR90_VGPR91 %VGPR91_VGPR92 %VGPR92_VGPR93 %VGPR93_VGPR94 %VGPR94_VGPR95 %VGPR95_VGPR96 %VGPR96_VGPR97 %VGPR97_VGPR98 %VGPR98_VGPR99 %VGPR99_VGPR100 %VGPR100_VGPR101 %VGPR101_VGPR102 %VGPR102_VGPR103 %VGPR103_VGPR104 %VGPR104_VGPR105 %VGPR105_VGPR106 %VGPR106_VGPR107 %VGPR107_VGPR108 %VGPR108_VGPR109 %VGPR109_VGPR110 %VGPR110_VGPR111 %VGPR111_VGPR112 %VGPR112_VGPR113 %VGPR113_VGPR114 %VGPR114_VGPR115 %VGPR115_VGPR116 %VGPR116_VGPR117 %VGPR117_VGPR118 %VGPR118_VGPR119 %VGPR119_VGPR120 %VGPR120_VGPR121 %VGPR121_VGPR122 %VGPR122_VGPR123 %VGPR123_VGPR124 %VGPR124_VGPR125 %VGPR125_VGPR126 %VGPR126_VGPR127 %VGPR127_VGPR128 %VGPR128_VGPR129 %VGPR129_VGPR130 %VGPR130_VGPR131 %VGPR131_VGPR132 %VGPR132_VGPR133 %VGPR133_VGPR134 %VGPR134_VGPR135 %VGPR135_VGPR136 %VGPR136_VGPR137 %VGPR137_VGPR138 %VGPR138_VGPR139 %VGPR139_VGPR140 %VGPR140_VGPR141 %VGPR141_VGPR142 %VGPR142_VGPR143 %VGPR143_VGPR144 %VGPR144_VGPR145 %VGPR145_VGPR146 %VGPR146_VGPR147 %VGPR147_VGPR148 %VGPR148_VGPR149 %VGPR149_VGPR150 %VGPR150_VGPR151 %VGPR151_VGPR152 %VGPR152_VGPR153 %VGPR153_VGPR154 %VGPR154_VGPR155 %VGPR155_VGPR156 %VGPR156_VGPR157 %VGPR157_VGPR158 %VGPR158_VGPR159 %VGPR159_VGPR160 %VGPR160_VGPR161 %VGPR161_VGPR162 %VGPR162_VGPR163 %VGPR163_VGPR164 %VGPR164_VGPR165 %VGPR165_VGPR166 %VGPR166_VGPR167 %VGPR167_VGPR168 %VGPR168_VGPR169 %VGPR169_VGPR170 %VGPR170_VGPR171 %VGPR171_VGPR172 %VGPR172_VGPR173 %VGPR173_VGPR174 %VGPR174_VGPR175 %VGPR175_VGPR176 %VGPR176_VGPR177 %VGPR177_VGPR178 %VGPR178_VGPR179 %VGPR179_VGPR180 %VGPR180_VGPR181 %VGPR181_VGPR182 %VGPR182_VGPR183 %VGPR183_VGPR184 %VGPR184_VGPR185 %VGPR185_VGPR186 %VGPR186_VGPR187 %VGPR187_VGPR188 %VGPR188_VGPR189 %VGPR189_VGPR190 %VGPR190_VGPR191 %VGPR191_VGPR192 %VGPR192_VGPR193 %VGPR193_VGPR194 %VGPR194_VGPR195 %VGPR195_VGPR196 %VGPR196_VGPR197 %VGPR197_VGPR198 %VGPR198_VGPR199 %VGPR199_VGPR200 %VGPR200_VGPR201 %VGPR201_VGPR202 %VGPR202_VGPR203 %VGPR203_VGPR204 %VGPR204_VGPR205 %VGPR205_VGPR206 %VGPR206_VGPR207 %VGPR207_VGPR208 %VGPR208_VGPR209 %VGPR209_VGPR210 %VGPR210_VGPR211 %VGPR211_VGPR212 %VGPR212_VGPR213 %VGPR213_VGPR214 %VGPR214_VGPR215 %VGPR215_VGPR216 %VGPR216_VGPR217 %VGPR217_VGPR218 %VGPR218_VGPR219 %VGPR219_VGPR220 %VGPR220_VGPR221 %VGPR221_VGPR222 %VGPR222_VGPR223 %VGPR223_VGPR224 %VGPR224_VGPR225 %VGPR225_VGPR226 %VGPR226_VGPR227 %VGPR227_VGPR228 %VGPR228_VGPR229 %VGPR229_VGPR230 %VGPR230_VGPR231 %VGPR231_VGPR232 %VGPR232_VGPR233 %VGPR233_VGPR234 %VGPR234_VGPR235 %VGPR235_VGPR236 %VGPR236_VGPR237 %VGPR237_VGPR238 %VGPR238_VGPR239 %VGPR239_VGPR240 %VGPR240_VGPR241 %VGPR241_VGPR242 %VGPR242_VGPR243 %VGPR243_VGPR244 %VGPR244_VGPR245 %VGPR245_VGPR246 %VGPR246_VGPR247 %VGPR247_VGPR248 %VGPR248_VGPR249 %VGPR249_VGPR250 %VGPR250_VGPR251 %VGPR251_VGPR252 %VGPR252_VGPR253 ]
assigning %vreg91 to %VGPR0_VGPR1: VGPR0 [376r,392r:0)  0@376r VGPR1 [384r,392r:0)  0@384r

selectOrSplit VReg_64:%vreg94 [392r,1072r:0)  0@392r w=3.703704e-03
assigning %vreg94 to %VGPR0_VGPR1: VGPR0 [392r,1072r:0)  0@392r VGPR1 [392r,1072r:0)  0@392r

selectOrSplit VGPR_32:%vreg25 [400r,424r:0)  0@400r w=7.075472e-03
assigning %vreg25 to %VGPR2: VGPR2 [400r,424r:0)  0@400r

selectOrSplit VGPR_32:%vreg19 [408r,656r:0)  0@408r w=4.629630e-03
assigning %vreg19 to %VGPR3: VGPR3 [408r,656r:0)  0@408r

selectOrSplit VGPR_32:%vreg106 [416r,432r:0)  0@416r w=7.211538e-03
assigning %vreg106 to %VGPR4: VGPR4 [416r,432r:0)  0@416r

selectOrSplit VGPR_32:%vreg111 [424r,432r:0)  0@424r w=inf
assigning %vreg111 to %VGPR2: VGPR2 [424r,432r:0)  0@424r

selectOrSplit VGPR_32:%vreg107 [432r,1032r:0)  0@432r w=8.000000e-03
assigning %vreg107 to %VGPR2: VGPR2 [432r,1032r:0)  0@432r

selectOrSplit VGPR_32:%vreg32 [448r,464r:0)  0@448r w=inf
assigning %vreg32 to %VGPR4: VGPR4 [448r,464r:0)  0@448r

selectOrSplit VGPR_32:%vreg33 [464r,480r:0)  0@464r w=inf
assigning %vreg33 to %VGPR4: VGPR4 [464r,480r:0)  0@464r

selectOrSplit VGPR_32:%vreg34 [480r,496r:0)  0@480r w=inf
assigning %vreg34 to %VGPR4: VGPR4 [480r,496r:0)  0@480r

selectOrSplit VGPR_32:%vreg35 [496r,624r:0)  0@496r w=1.136364e-02
assigning %vreg35 to %VGPR4: VGPR4 [496r,624r:0)  0@496r

selectOrSplit VGPR_32:%vreg36 [512r,552r:0)  0@512r w=4.545454e-03
assigning %vreg36 to %VGPR5: VGPR5 [512r,552r:0)  0@512r

selectOrSplit VGPR_32:%vreg109 [544r,576r:0)  0@544r w=6.944444e-03
assigning %vreg109 to %VGPR6: VGPR6 [544r,576r:0)  0@544r

selectOrSplit VGPR_32:%vreg110 [560r,576r:0)  0@560r w=inf
assigning %vreg110 to %VGPR5: VGPR5 [560r,576r:0)  0@560r

selectOrSplit VGPR_32:%vreg41 [576r,592r:0)  0@576r w=inf
assigning %vreg41 to %VGPR5: VGPR5 [576r,592r:0)  0@576r

selectOrSplit VGPR_32:%vreg44 [592r,624r:0)  0@592r w=6.944444e-03
assigning %vreg44 to %VGPR5: VGPR5 [592r,624r:0)  0@592r

selectOrSplit VGPR_32:%vreg115 [608r,640r:0)  0@608r w=4.629630e-03
assigning %vreg115 to %VGPR6: VGPR6 [608r,640r:0)  0@608r

selectOrSplit VGPR_32:%vreg118 [624r,640r:0)  0@624r w=inf
assigning %vreg118 to %VGPR4: VGPR4 [624r,640r:0)  0@624r

selectOrSplit VGPR_32:%vreg51 [640r,688r:0)  0@640r w=4.464286e-03
assigning %vreg51 to %VGPR4: VGPR4 [640r,688r:0)  0@640r

selectOrSplit VGPR_32:%vreg97 [648r,1064r:0)  0@648r w=6.127451e-03
assigning %vreg97 to %VGPR5: VGPR5 [648r,1064r:0)  0@648r

selectOrSplit VGPR_32:%vreg104 [656r,672r:0)  0@656r w=inf
assigning %vreg104 to %VGPR3: VGPR3 [656r,672r:0)  0@656r

selectOrSplit VGPR_32:%vreg100 [672r,968r:0)  0@672r w=5.747126e-03
assigning %vreg100 to %VGPR3: VGPR3 [672r,968r:0)  0@672r

selectOrSplit VGPR_32:%vreg57 [688r,704r:0)  0@688r w=inf
assigning %vreg57 to %VGPR4: VGPR4 [688r,704r:0)  0@688r

selectOrSplit VGPR_32:%vreg108 [704r,968r:0)  0@704r w=4.518072e-03
assigning %vreg108 to %VGPR4: VGPR4 [704r,968r:0)  0@704r

selectOrSplit VGPR_32:%vreg101 [968r,1032r:0)  0@968r w=1.077586e-02
assigning %vreg101 to %VGPR3: VGPR3 [968r,1032r:0)  0@968r

selectOrSplit VGPR_32:%vreg63 [976r,1040r:0)  0@976r w=6.465517e-03
assigning %vreg63 to %VGPR4: VGPR4 [976r,1040r:0)  0@976r

selectOrSplit VGPR_32:%vreg103 [992r,1024r:0)  0@992r w=4.629630e-03
assigning %vreg103 to %VGPR6: VGPR6 [992r,1024r:0)  0@992r

selectOrSplit VGPR_32:%vreg68 [1000r,1008r:0)  0@1000r w=inf
assigning %vreg68 to %VGPR7: VGPR7 [1000r,1008r:0)  0@1000r

selectOrSplit VGPR_32:%vreg123 [1008r,1016r:0)  0@1008r w=inf
assigning %vreg123 to %VGPR7: VGPR7 [1008r,1016r:0)  0@1008r

selectOrSplit VGPR_32:%vreg76 [1024r,1048r:0)  0@1024r w=4.716981e-03
assigning %vreg76 to %VGPR6: VGPR6 [1024r,1048r:0)  0@1024r

selectOrSplit VGPR_32:%vreg102 [1032r,1048r:0)  0@1032r w=4.807692e-03
assigning %vreg102 to %VGPR2: VGPR2 [1032r,1048r:0)  0@1032r

selectOrSplit VGPR_32:%vreg81 [1048r,1056r:0)  0@1048r w=inf
assigning %vreg81 to %VGPR2: VGPR2 [1048r,1056r:0)  0@1048r

selectOrSplit VGPR_32:%vreg99 [1056r,1064r:0)  0@1056r w=inf
assigning %vreg99 to %VGPR2: VGPR2 [1056r,1064r:0)  0@1056r

selectOrSplit VGPR_32:%vreg98 [1064r,1072r:0)  0@1064r w=inf
assigning %vreg98 to %VGPR2: VGPR2 [1064r,1072r:0)  0@1064r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: remainder_intint
********** REGISTER MAP **********
[%vreg0 -> %SGPR0_SGPR1] SReg_64
[%vreg2 -> %VGPR0] VGPR_32
[%vreg3 -> %SGPR4] SReg_32
[%vreg4 -> %SGPR2] SGPR_32
[%vreg8 -> %SGPR0] SReg_32
[%vreg18 -> %SGPR12_SGPR13_SGPR14_SGPR15] SReg_128
[%vreg19 -> %VGPR3] VGPR_32
[%vreg24 -> %SGPR16_SGPR17_SGPR18_SGPR19] SReg_128
[%vreg25 -> %VGPR2] VGPR_32
[%vreg32 -> %VGPR4] VGPR_32
[%vreg33 -> %VGPR4] VGPR_32
[%vreg34 -> %VGPR4] VGPR_32
[%vreg35 -> %VGPR4] VGPR_32
[%vreg36 -> %VGPR5] VGPR_32
[%vreg37 -> %SGPR0_SGPR1] SReg_64
[%vreg41 -> %VGPR5] VGPR_32
[%vreg44 -> %VGPR5] VGPR_32
[%vreg51 -> %VGPR4] VGPR_32
[%vreg57 -> %VGPR4] VGPR_32
[%vreg60 -> %SGPR0_SGPR1] SReg_64
[%vreg63 -> %VGPR4] VGPR_32
[%vreg66 -> %SGPR0_SGPR1] SReg_64
[%vreg68 -> %VGPR7] VGPR_32
[%vreg73 -> %VCC] SReg_64
[%vreg76 -> %VGPR6] VGPR_32
[%vreg80 -> %VCC] SReg_64
[%vreg81 -> %VGPR2] VGPR_32
[%vreg86 -> %SGPR8_SGPR9_SGPR10_SGPR11] SReg_128
[%vreg91 -> %VGPR0_VGPR1] VReg_64
[%vreg94 -> %VGPR0_VGPR1] VReg_64
[%vreg97 -> %VGPR5] VGPR_32
[%vreg98 -> %VGPR2] VGPR_32
[%vreg99 -> %VGPR2] VGPR_32
[%vreg100 -> %VGPR3] VGPR_32
[%vreg101 -> %VGPR3] VGPR_32
[%vreg102 -> %VGPR2] VGPR_32
[%vreg103 -> %VGPR6] VGPR_32
[%vreg104 -> %VGPR3] VGPR_32
[%vreg106 -> %VGPR4] VGPR_32
[%vreg107 -> %VGPR2] VGPR_32
[%vreg108 -> %VGPR4] VGPR_32
[%vreg109 -> %VGPR6] VGPR_32
[%vreg110 -> %VGPR5] VGPR_32
[%vreg111 -> %VGPR2] VGPR_32
[%vreg115 -> %VGPR6] VGPR_32
[%vreg118 -> %VGPR4] VGPR_32
[%vreg123 -> %VGPR7] VGPR_32

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
48B		%vreg0<def> = COPY %SGPR0_SGPR1; SReg_64:%vreg0
64B		%vreg4<def> = S_LOAD_DWORD_IMM %vreg0, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant) SGPR_32:%vreg4 SReg_64:%vreg0
80B		%vreg18:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg18 SReg_64:%vreg0
96B		%vreg24:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg24 SReg_64:%vreg0
112B		%vreg86:sub0_sub1<def,read-undef> = S_LOAD_DWORDX2_IMM %vreg0<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant) SReg_128:%vreg86 SReg_64:%vreg0
224B		%vreg18:sub3<def> = S_MOV_B32 61440; SReg_128:%vreg18
240B		%vreg18:sub2<def> = S_MOV_B32 0; SReg_128:%vreg18
244B		%vreg3<def> = COPY %SGPR4; SReg_32:%vreg3
248B		%vreg2<def> = COPY %VGPR0; VGPR_32:%vreg2
368B		%vreg24:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg24,%vreg18
372B		%vreg8<def> = S_MUL_I32 %vreg4<kill>, %vreg3<kill>; SReg_32:%vreg8,%vreg3 SGPR_32:%vreg4
376B		%vreg91:sub0<def,read-undef> = V_ADD_I32_e32 %vreg8<kill>, %vreg2<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VReg_64:%vreg91 SReg_32:%vreg8 VGPR_32:%vreg2
384B		%vreg91:sub1<def> = V_ASHRREV_I32_e32 31, %vreg91:sub0, %EXEC<imp-use>; VReg_64:%vreg91
392B		%vreg94<def> = V_LSHL_B64 %vreg91, 2, %EXEC<imp-use>; VReg_64:%vreg94,%vreg91
400B		%vreg25<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg24, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9) VGPR_32:%vreg25 VReg_64:%vreg94 SReg_128:%vreg24
408B		%vreg19<def> = BUFFER_LOAD_DWORD_ADDR64 %vreg94, %vreg18, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9) VGPR_32:%vreg19 VReg_64:%vreg94 SReg_128:%vreg18
416B		%vreg106<def> = V_ASHRREV_I32_e32 31, %vreg25, %EXEC<imp-use>; VGPR_32:%vreg106,%vreg25
424B		%vreg111<def> = V_ADD_I32_e32 %vreg25<kill>, %vreg106, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg111,%vreg25,%vreg106
432B		%vreg107<def> = V_XOR_B32_e32 %vreg111<kill>, %vreg106<kill>, %EXEC<imp-use>; VGPR_32:%vreg107,%vreg111,%vreg106
448B		%vreg32<def> = V_CVT_F32_U32_e32 %vreg107, %EXEC<imp-use>; VGPR_32:%vreg32,%vreg107
464B		%vreg33<def> = V_RCP_IFLAG_F32_e32 %vreg32<kill>, %EXEC<imp-use>; VGPR_32:%vreg33,%vreg32
480B		%vreg34<def> = V_MUL_F32_e32 1333788672, %vreg33<kill>, %EXEC<imp-use>; VGPR_32:%vreg34,%vreg33
496B		%vreg35<def> = V_CVT_U32_F32_e32 %vreg34<kill>, %EXEC<imp-use>; VGPR_32:%vreg35,%vreg34
512B		%vreg36<def> = V_MUL_HI_U32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg36,%vreg35,%vreg107
544B		%vreg109<def> = V_MUL_LO_I32 %vreg35, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg109,%vreg35,%vreg107
552B		%vreg37<def> = V_CMP_EQ_I32_e64 0, %vreg36<kill>, %EXEC<imp-use>; SReg_64:%vreg37 VGPR_32:%vreg36
560B		%vreg110<def> = V_SUB_I32_e32 0, %vreg109, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg110,%vreg109
576B		%vreg41<def> = V_CNDMASK_B32_e64 %vreg109<kill>, %vreg110<kill>, %vreg37, %EXEC<imp-use>; VGPR_32:%vreg41,%vreg109,%vreg110 SReg_64:%vreg37
592B		%vreg44<def> = V_MUL_HI_U32 %vreg41<kill>, %vreg35, %EXEC<imp-use>; VGPR_32:%vreg44,%vreg41,%vreg35
608B		%vreg115<def> = V_ADD_I32_e32 %vreg44, %vreg35, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg115,%vreg44,%vreg35
624B		%vreg118<def> = V_SUBREV_I32_e32 %vreg44<kill>, %vreg35<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg118,%vreg44,%vreg35
640B		%vreg51<def> = V_CNDMASK_B32_e64 %vreg118<kill>, %vreg115<kill>, %vreg37<kill>, %EXEC<imp-use>; VGPR_32:%vreg51,%vreg118,%vreg115 SReg_64:%vreg37
648B		%vreg97<def> = V_ASHRREV_I32_e32 31, %vreg19, %EXEC<imp-use>; VGPR_32:%vreg97,%vreg19
656B		%vreg104<def> = V_ADD_I32_e32 %vreg19<kill>, %vreg97, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg104,%vreg19,%vreg97
672B		%vreg100<def> = V_XOR_B32_e32 %vreg104<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg100,%vreg104,%vreg97
688B		%vreg57<def> = V_MUL_HI_U32 %vreg51<kill>, %vreg100, %EXEC<imp-use>; VGPR_32:%vreg57,%vreg51,%vreg100
704B		%vreg108<def> = V_MUL_LO_I32 %vreg57<kill>, %vreg107, %EXEC<imp-use>; VGPR_32:%vreg108,%vreg57,%vreg107
960B		%vreg86:sub2_sub3<def> = COPY %vreg18:sub2_sub3; SReg_128:%vreg86,%vreg18
964B		%vreg60<def> = V_CMP_GE_U32_e64 %vreg100, %vreg108, %EXEC<imp-use>; SReg_64:%vreg60 VGPR_32:%vreg100,%vreg108
968B		%vreg101<def> = V_SUBREV_I32_e32 %vreg108<kill>, %vreg100<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg101,%vreg108,%vreg100
976B		%vreg63<def> = V_CNDMASK_B32_e64 0, -1, %vreg60<kill>, %EXEC<imp-use>; VGPR_32:%vreg63 SReg_64:%vreg60
984B		%vreg66<def> = V_CMP_GE_U32_e64 %vreg101, %vreg107, %EXEC<imp-use>; SReg_64:%vreg66 VGPR_32:%vreg101,%vreg107
992B		%vreg103<def> = V_SUBREV_I32_e32 %vreg107, %vreg101, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg103,%vreg107,%vreg101
1000B		%vreg68<def> = V_CNDMASK_B32_e64 0, -1, %vreg66<kill>, %EXEC<imp-use>; VGPR_32:%vreg68 SReg_64:%vreg66
1008B		%vreg123<def> = V_AND_B32_e32 %vreg63, %vreg68<kill>, %EXEC<imp-use>; VGPR_32:%vreg123,%vreg63,%vreg68
1016B		%vreg73<def> = V_CMP_EQ_I32_e64 0, %vreg123<kill>, %EXEC<imp-use>; SReg_64:%vreg73 VGPR_32:%vreg123
1024B		%vreg76<def> = V_CNDMASK_B32_e64 %vreg103<kill>, %vreg101, %vreg73<kill>, %EXEC<imp-use>; VGPR_32:%vreg76,%vreg103,%vreg101 SReg_64:%vreg73
1032B		%vreg102<def> = V_ADD_I32_e32 %vreg107<kill>, %vreg101<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg102,%vreg107,%vreg101
1040B		%vreg80<def> = V_CMP_EQ_I32_e64 0, %vreg63<kill>, %EXEC<imp-use>; SReg_64:%vreg80 VGPR_32:%vreg63
1048B		%vreg81<def> = V_CNDMASK_B32_e64 %vreg76<kill>, %vreg102<kill>, %vreg80<kill>, %EXEC<imp-use>; VGPR_32:%vreg81,%vreg76,%vreg102 SReg_64:%vreg80
1056B		%vreg99<def> = V_XOR_B32_e32 %vreg81<kill>, %vreg97, %EXEC<imp-use>; VGPR_32:%vreg99,%vreg81,%vreg97
1064B		%vreg98<def> = V_SUB_I32_e32 %vreg99<kill>, %vreg97<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>; VGPR_32:%vreg98,%vreg99,%vreg97
1072B		BUFFER_STORE_DWORD_ADDR64 %vreg98<kill>, %vreg94<kill>, %vreg86, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9) VGPR_32:%vreg98 VReg_64:%vreg94 SReg_128:%vreg86
1080B		S_ENDPGM
> %SGPR0_SGPR1<def> = COPY %SGPR0_SGPR1
Deleting identity copy.
> %SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
> %SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
> %SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
> %SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
> %SGPR15<def> = S_MOV_B32 61440
> %SGPR14<def> = S_MOV_B32 0
> %SGPR4<def> = COPY %SGPR4
Deleting identity copy.
> %VGPR0<def> = COPY %VGPR0
Deleting identity copy.
> %SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
> %SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
> %VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
> %VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
> %VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
> %VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
> %VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
> %VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
> %VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
> %VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
> %VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
> %VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
> %VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
> %VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
> %SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
> %VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
> %VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
> %VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
> %VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
> %VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
> %VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
> %VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
> %SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
> %SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
> %VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
> %SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
> %VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
> %VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
> %VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR7<kill>, %EXEC<imp-use>
> %VGPR6<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR3, %VCC<kill>, %EXEC<imp-use>
> %VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> %VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
> %VGPR2<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR2<kill>, %VCC<kill>, %EXEC<imp-use>
> %VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
> %VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
> BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
> S_ENDPGM
# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
64B		%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
80B		%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
96B		%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
112B		%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
224B		%SGPR15<def> = S_MOV_B32 61440
240B		%SGPR14<def> = S_MOV_B32 0
368B		%SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
372B		%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
376B		%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
384B		%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
392B		%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
400B		%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
408B		%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
416B		%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
424B		%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
432B		%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
448B		%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
464B		%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
480B		%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
496B		%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
512B		%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
544B		%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
552B		%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
560B		%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
576B		%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
592B		%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
608B		%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
624B		%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
640B		%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
648B		%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
656B		%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
672B		%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
688B		%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
704B		%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
960B		%SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
964B		%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
968B		%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
976B		%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
984B		%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
992B		%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
1000B		%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
1008B		%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
1016B		%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR7<kill>, %EXEC<imp-use>
1024B		%VGPR6<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR3, %VCC<kill>, %EXEC<imp-use>
1032B		%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
1040B		%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
1048B		%VGPR2<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR2<kill>, %VCC<kill>, %EXEC<imp-use>
1056B		%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
1064B		%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
1072B		BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
1080B		S_ENDPGM

# End machine code for function remainder_intint.

********** Stack Slot Coloring **********
********** Function: remainder_intint
# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR7<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR3, %VCC<kill>, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR2<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

******** Post-regalloc Machine LICM: remainder_intint ********
# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR7<kill>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR3, %VCC<kill>, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR2<kill>, %VCC<kill>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

Shrinking %VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR7<kill>, %EXEC<imp-use>
e32 MI = V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>

Shrinking %VGPR6<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR3, %VCC<kill>, %EXEC<imp-use>
e32 MI = %VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>

Shrinking %VCC<def> = V_CMP_EQ_I32_e64 0, %VGPR4<kill>, %EXEC<imp-use>
e32 MI = V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>

Shrinking %VGPR2<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR2<kill>, %VCC<kill>, %EXEC<imp-use>
e32 MI = %VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>


block-frequency: remainder_intint
=================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: remainder_intint
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function remainder_intint: Post SSA
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

MCP: CopyPropagateBlock entry
MCP: Copy is a deletion candidate:   %SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
MCP: Copy is used - not dead:   %SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
MCP: Copy is used - not dead:   %SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
MCP: Copy is used - not dead:   %SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
MCP: Copy is used - not dead:   %SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
MCP: Copy is a deletion candidate:   %SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
MCP: Copy is used - not dead:   %SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
MCP: Copy is used - not dead:   %SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
MCP: Copy is used - not dead:   %SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
MCP: Copy is used - not dead:   %SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: remainder_intint
real copy:   %SGPR18_SGPR19<def> = COPY %SGPR14_SGPR15
replaced by: %SGPR18_SGPR19<def> = S_MOV_B64 %SGPR14_SGPR15
real copy:   %SGPR10_SGPR11<def> = COPY %SGPR14_SGPR15
replaced by: %SGPR10_SGPR11<def> = S_MOV_B64 %SGPR14_SGPR15
# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = S_MOV_B64 %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = S_MOV_B64 %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = S_MOV_B64 %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = S_MOV_B64 %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = S_MOV_B64 %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = S_MOV_B64 %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.


block-frequency: remainder_intint
=================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: remainder_intint
 - BB0[entry]: float = 1.0, int = 8

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = S_MOV_B64 %SGPR14_SGPR15
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = S_MOV_B64 %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

********** COMPUTING STACKMAP LIVENESS: remainder_intint **********
# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function remainder_intint: Post SSA, not tracking liveness
Function Live Ins: %SGPR0_SGPR1, %VGPR0, %SGPR4

BB#0: derived from LLVM BB %entry
    Live Ins: %SGPR4 %VGPR0 %SGPR0_SGPR1
	%SGPR2<def> = S_LOAD_DWORD_IMM %SGPR0_SGPR1, 6; mem:LD4[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR12_SGPR13<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 9; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR16_SGPR17<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1, 11; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR8_SGPR9<def> = S_LOAD_DWORDX2_IMM %SGPR0_SGPR1<kill>, 13; mem:LD8[undef(addrspace=2)](nontemporal)(invariant)
	%SGPR15<def> = S_MOV_B32 61440
	%SGPR14<def> = S_MOV_B32 0
	%SGPR18_SGPR19<def> = S_MOV_B64 %SGPR14_SGPR15
	S_WAITCNT 127
	%SGPR0<def> = S_MUL_I32 %SGPR2<kill>, %SGPR4<kill>
	%VGPR0<def> = V_ADD_I32_e32 %SGPR0<kill>, %VGPR0<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR1<def> = V_ASHRREV_I32_e32 31, %VGPR0, %EXEC<imp-use>
	%VGPR0_VGPR1<def> = V_LSHL_B64 %VGPR0_VGPR1, 2, %EXEC<imp-use>
	%VGPR2<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR16_SGPR17_SGPR18_SGPR19, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx1(addrspace=1)](tbaa=!9)
	%VGPR3<def> = BUFFER_LOAD_DWORD_ADDR64 %VGPR0_VGPR1, %SGPR12_SGPR13_SGPR14_SGPR15, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:LD4[%arrayidx(addrspace=1)](tbaa=!9)
	S_WAITCNT 1905
	%VGPR4<def> = V_ASHRREV_I32_e32 31, %VGPR2, %EXEC<imp-use>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_F32_U32_e32 %VGPR2, %EXEC<imp-use>
	%VGPR4<def> = V_RCP_IFLAG_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_F32_e32 1333788672, %VGPR4<kill>, %EXEC<imp-use>
	%VGPR4<def> = V_CVT_U32_F32_e32 %VGPR4<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_MUL_LO_I32 %VGPR4, %VGPR2, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_EQ_I32_e64 0, %VGPR5<kill>, %EXEC<imp-use>
	%VGPR5<def> = V_SUB_I32_e32 0, %VGPR6, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR5<def> = V_CNDMASK_B32_e64 %VGPR6<kill>, %VGPR5<kill>, %SGPR0_SGPR1, %EXEC<imp-use>
	%VGPR5<def> = V_MUL_HI_U32 %VGPR5<kill>, %VGPR4, %EXEC<imp-use>
	%VGPR6<def> = V_ADD_I32_e32 %VGPR5, %VGPR4, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_SUBREV_I32_e32 %VGPR5<kill>, %VGPR4<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 %VGPR4<kill>, %VGPR6<kill>, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	S_WAITCNT 1904
	%VGPR5<def> = V_ASHRREV_I32_e32 31, %VGPR3, %EXEC<imp-use>
	%VGPR3<def> = V_ADD_I32_e32 %VGPR3<kill>, %VGPR5, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR3<def> = V_XOR_B32_e32 %VGPR3<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_HI_U32 %VGPR4<kill>, %VGPR3, %EXEC<imp-use>
	%VGPR4<def> = V_MUL_LO_I32 %VGPR4<kill>, %VGPR2, %EXEC<imp-use>
	%SGPR10_SGPR11<def> = S_MOV_B64 %SGPR14_SGPR15
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR4, %EXEC<imp-use>
	%VGPR3<def> = V_SUBREV_I32_e32 %VGPR4<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR4<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%SGPR0_SGPR1<def> = V_CMP_GE_U32_e64 %VGPR3, %VGPR2, %EXEC<imp-use>
	%VGPR6<def> = V_SUBREV_I32_e32 %VGPR2, %VGPR3, %VCC<imp-def,dead>, %EXEC<imp-use>
	%VGPR7<def> = V_CNDMASK_B32_e64 0, -1, %SGPR0_SGPR1<kill>, %EXEC<imp-use>
	%VGPR7<def> = V_AND_B32_e32 %VGPR4, %VGPR7<kill>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR7<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR6<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR3, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_ADD_I32_e32 %VGPR2<kill>, %VGPR3<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	V_CMP_EQ_I32_e32 0, %VGPR4<kill>, %VCC<imp-def>, %EXEC<imp-use>
	%VGPR2<def> = V_CNDMASK_B32_e32 %VGPR6<kill>, %VGPR2<kill>, %EXEC<imp-use>, %VCC<imp-use,kill>
	%VGPR2<def> = V_XOR_B32_e32 %VGPR2<kill>, %VGPR5, %EXEC<imp-use>
	%VGPR2<def> = V_SUB_I32_e32 %VGPR2<kill>, %VGPR5<kill>, %VCC<imp-def,dead>, %EXEC<imp-use>
	BUFFER_STORE_DWORD_ADDR64 %VGPR2<kill>, %VGPR0_VGPR1<kill>, %SGPR8_SGPR9_SGPR10_SGPR11, 0, 0, 0, 0, 0, %EXEC<imp-use>; mem:ST4[%arrayidx2(addrspace=1)](tbaa=!9)
	S_ENDPGM

# End machine code for function remainder_intint.

